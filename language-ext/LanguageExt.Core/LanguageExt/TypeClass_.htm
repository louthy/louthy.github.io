<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt/index.htm">LanguageExt</a> \ <span class="nav-bar-link" href="TypeClass_.htm">TypeClass</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#abs&lt;NUM, A>">abs&lt;NUM, A&gt;(A)</a><a class="nav-link" href="#acos&lt;FLOAT, A>">acos&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#acosh&lt;FLOAT, A>">acosh&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#append&lt;A>">append&lt;A&gt;(HashSet&lt;A&gt;, HashSet&lt;A&gt;)</a><a class="nav-link" href="#append&lt;A>">append&lt;A&gt;(Lst&lt;A&gt;, Lst&lt;A&gt;)</a><a class="nav-link" href="#append&lt;K, V>">append&lt;K, V&gt;(HashMap&lt;K, V&gt;, HashMap&lt;K, V&gt;)</a><a class="nav-link" href="#append&lt;K, V>">append&lt;K, V&gt;(Map&lt;K, V&gt;, Map&lt;K, V&gt;)</a><a class="nav-link" href="#append&lt;NEWTYPE, SEMI, A, PRED>">append&lt;NEWTYPE, SEMI, A, PRED&gt;(NewType&lt;NEWTYPE, A, PRED&gt;, NewType&lt;NEWTYPE, A, PRED&gt;)</a><a class="nav-link" href="#append&lt;NEWTYPE, SEMI, A>">append&lt;NEWTYPE, SEMI, A&gt;(NewType&lt;NEWTYPE, A&gt;, NewType&lt;NEWTYPE, A&gt;)</a><a class="nav-link" href="#append&lt;NUMTYPE, NUM, A, PRED>">append&lt;NUMTYPE, NUM, A, PRED&gt;(NumType&lt;NUMTYPE, NUM, A, PRED&gt;, NumType&lt;NUMTYPE, NUM, A, PRED&gt;)</a><a class="nav-link" href="#append&lt;NUMTYPE, NUM, A>">append&lt;NUMTYPE, NUM, A&gt;(NumType&lt;NUMTYPE, NUM, A&gt;, NumType&lt;NUMTYPE, NUM, A&gt;)</a><a class="nav-link" href="#append&lt;SEMI, A>">append&lt;SEMI, A&gt;(A, A)</a><a class="nav-link" href="#append&lt;SEMI, A>">append&lt;SEMI, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#append&lt;SEMI, A>">append&lt;SEMI, A&gt;(OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#append&lt;SEMI, A>">append&lt;SEMI, A&gt;(IEnumerable&lt;A&gt;, IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#append&lt;SEMI, A>">append&lt;SEMI, A&gt;(Try&lt;A&gt;, Try&lt;A&gt;)</a><a class="nav-link" href="#append&lt;SEMI, A>">append&lt;SEMI, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#append&lt;SEMI, L, R>">append&lt;SEMI, L, R&gt;(Either&lt;L, R&gt;, Either&lt;L, R&gt;)</a><a class="nav-link" href="#append&lt;SEMI, L, R>">append&lt;SEMI, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#asEnumerable&lt;OPT, OA, A>">asEnumerable&lt;OPT, OA, A&gt;(OA)</a><a class="nav-link" href="#asin&lt;FLOAT, A>">asin&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#asinh&lt;FLOAT, A>">asinh&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#atan&lt;FLOAT, A>">atan&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#atanh&lt;FLOAT, A>">atanh&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#biExists&lt;FOLD, F, A, B>">biExists&lt;FOLD, F, A, B&gt;(F, Func&lt;A, bool&gt;, Func&lt;B, bool&gt;)</a><a class="nav-link" href="#biFold&lt;FOLD, F, A, B, S>">biFold&lt;FOLD, F, A, B, S&gt;(F, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;)</a><a class="nav-link" href="#biFoldBack&lt;FOLD, F, A, B, S>">biFoldBack&lt;FOLD, F, A, B, S&gt;(F, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;)</a><a class="nav-link" href="#biForAll&lt;FOLD, F, A, B>">biForAll&lt;FOLD, F, A, B&gt;(F, Func&lt;A, bool&gt;, Func&lt;B, bool&gt;)</a><a class="nav-link" href="#biIter&lt;FOLD, F, A, B>">biIter&lt;FOLD, F, A, B&gt;(F, Action&lt;A&gt;, Action&lt;B&gt;)</a><a class="nav-link" href="#bimap&lt;BiFunctorAB, FAB, FR, A, B, R>">bimap&lt;BiFunctorAB, FAB, FR, A, B, R&gt;(FAB, Func&lt;A, R&gt;, Func&lt;B, R&gt;)</a><a class="nav-link" href="#bimap&lt;BiFunctorAB, FAB, FUV, A, B, U, V>">bimap&lt;BiFunctorAB, FAB, FUV, A, B, U, V&gt;(FAB, Func&lt;A, U&gt;, Func&lt;B, V&gt;)</a><a class="nav-link" href="#bind&lt;MONADA, MONADB, MA, MB, A, B>">bind&lt;MONADA, MONADB, MA, MB, A, B&gt;(MA, Func&lt;A, MB&gt;)</a><a class="nav-link" href="#choice1AsEnumerable&lt;CHOICE, CH, A, B>">choice1AsEnumerable&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#choice1s&lt;CHOICE, CH, A, B>">choice1s&lt;CHOICE, CH, A, B&gt;(IEnumerable&lt;CH&gt;)</a><a class="nav-link" href="#choice1ToArray&lt;CHOICE, CH, A, B>">choice1ToArray&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#choice1ToList&lt;CHOICE, CH, A, B>">choice1ToList&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#choice2AsEnumerable&lt;CHOICE, CH, A, B>">choice2AsEnumerable&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#choice2s&lt;CHOICE, CH, A, B>">choice2s&lt;CHOICE, CH, A, B&gt;(IEnumerable&lt;CH&gt;)</a><a class="nav-link" href="#choice2ToArray&lt;CHOICE, CH, A, B>">choice2ToArray&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#choice2ToList&lt;CHOICE, CH, A, B>">choice2ToList&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#collect&lt;FOLD, F, A, B, C>">collect&lt;FOLD, F, A, B, C&gt;(F, Func&lt;A, C&gt;, Func&lt;B, C&gt;)</a><a class="nav-link" href="#collect&lt;FOLD, F, A, B>">collect&lt;FOLD, F, A, B&gt;(F, Func&lt;A, B&gt;)</a><a class="nav-link" href="#compare&lt;NEWTYPE, NUM, T, PRED>">compare&lt;NEWTYPE, NUM, T, PRED&gt;(NEWTYPE, NumType&lt;NEWTYPE, NUM, T, PRED&gt;)</a><a class="nav-link" href="#compare&lt;NEWTYPE, ORD, T, PRED>">compare&lt;NEWTYPE, ORD, T, PRED&gt;(NEWTYPE, NEWTYPE)</a><a class="nav-link" href="#compare&lt;ORD, A>">compare&lt;ORD, A&gt;(A, A)</a><a class="nav-link" href="#compare&lt;ORD, A>">compare&lt;ORD, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#compare&lt;ORD, A>">compare&lt;ORD, A&gt;(OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#compare&lt;ORD, A>">compare&lt;ORD, A&gt;(A, A)</a><a class="nav-link" href="#compare&lt;ORD, A>">compare&lt;ORD, A&gt;(Lst&lt;A&gt;, Lst&lt;A&gt;)</a><a class="nav-link" href="#compare&lt;ORD, A>">compare&lt;ORD, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#compare&lt;ORD, A>">compare&lt;ORD, A&gt;(Try&lt;A&gt;, Try&lt;A&gt;)</a><a class="nav-link" href="#compare&lt;ORD, L, R>">compare&lt;ORD, L, R&gt;(Either&lt;L, R&gt;, Either&lt;L, R&gt;)</a><a class="nav-link" href="#compare&lt;ORD, L, R>">compare&lt;ORD, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)</a><a class="nav-link" href="#compare&lt;ORDA, ORDB, A, B>">compare&lt;ORDA, ORDB, A, B&gt;(Either&lt;A, B&gt;, Either&lt;A, B&gt;)</a><a class="nav-link" href="#compare&lt;ORDA, ORDB, A, B>">compare&lt;ORDA, ORDB, A, B&gt;(EitherUnsafe&lt;A, B&gt;, EitherUnsafe&lt;A, B&gt;)</a><a class="nav-link" href="#contains&lt;EQ, FOLD, F, A, B>">contains&lt;EQ, FOLD, F, A, B&gt;(F, A)</a><a class="nav-link" href="#contains&lt;EQ, FOLD, F, A, B>">contains&lt;EQ, FOLD, F, A, B&gt;(F, B)</a><a class="nav-link" href="#contains&lt;EQ, FOLD, F, A>">contains&lt;EQ, FOLD, F, A&gt;(F, A)</a><a class="nav-link" href="#cos&lt;FLOAT, A>">cos&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#cosh&lt;FLOAT, A>">cosh&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#count&lt;FOLD, F, A>">count&lt;FOLD, F, A&gt;(F)</a><a class="nav-link" href="#divide&lt;NUM, A>">divide&lt;NUM, A&gt;(A, A)</a><a class="nav-link" href="#equals&lt;EQ, A>">equals&lt;EQ, A&gt;(A, A)</a><a class="nav-link" href="#equals&lt;EQ, A>">equals&lt;EQ, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#equals&lt;EQ, A>">equals&lt;EQ, A&gt;(OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#equals&lt;EQ, A>">equals&lt;EQ, A&gt;(A?, A?)</a><a class="nav-link" href="#equals&lt;EQ, A>">equals&lt;EQ, A&gt;(Try&lt;A&gt;, Try&lt;A&gt;)</a><a class="nav-link" href="#equals&lt;EQ, A>">equals&lt;EQ, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#equals&lt;EQ, A>">equals&lt;EQ, A&gt;(Lst&lt;A&gt;, Lst&lt;A&gt;)</a><a class="nav-link" href="#equals&lt;EQ, A>">equals&lt;EQ, A&gt;(IEnumerable&lt;A&gt;, IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#Equals&lt;EQ, A>">Equals&lt;EQ, A&gt;(A, A)</a><a class="nav-link" href="#Equals&lt;EQ, A>">Equals&lt;EQ, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#Equals&lt;EQ, A>">Equals&lt;EQ, A&gt;(OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;)</a><a class="nav-link" href="#Equals&lt;EQ, A>">Equals&lt;EQ, A&gt;(A?, A?)</a><a class="nav-link" href="#Equals&lt;EQ, A>">Equals&lt;EQ, A&gt;(Try&lt;A&gt;, Try&lt;A&gt;)</a><a class="nav-link" href="#Equals&lt;EQ, A>">Equals&lt;EQ, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)</a><a class="nav-link" href="#Equals&lt;EQ, A>">Equals&lt;EQ, A&gt;(Lst&lt;A&gt;, Lst&lt;A&gt;)</a><a class="nav-link" href="#Equals&lt;EQ, A>">Equals&lt;EQ, A&gt;(IEnumerable&lt;A&gt;, IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#Equals&lt;EQA, EQB, A, B>">Equals&lt;EQA, EQB, A, B&gt;(Either&lt;A, B&gt;, Either&lt;A, B&gt;)</a><a class="nav-link" href="#equals&lt;NEWTYPE, EQ, A, PRED>">equals&lt;NEWTYPE, EQ, A, PRED&gt;(NewType&lt;NEWTYPE, A, PRED&gt;, NewType&lt;NEWTYPE, A, PRED&gt;)</a><a class="nav-link" href="#exists&lt;FOLD, F, A>">exists&lt;FOLD, F, A&gt;(F, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#exp&lt;FLOAT, A>">exp&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#fail&lt;MONAD, MA, A>">fail&lt;MONAD, MA, A&gt;(Exception)</a><a class="nav-link" href="#filter&lt;MPLUS, MA, A>">filter&lt;MPLUS, MA, A&gt;(MA, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#fold&lt;FOLD, F, A, S>">fold&lt;FOLD, F, A, S&gt;(F, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#foldBack&lt;FOLD, F, A, S>">foldBack&lt;FOLD, F, A, S&gt;(F, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#forall&lt;FOLD, F, A>">forall&lt;FOLD, F, A&gt;(F, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#fromDecimal&lt;NUM, A>">fromDecimal&lt;NUM, A&gt;(decimal)</a><a class="nav-link" href="#fromDouble&lt;NUM, A>">fromDouble&lt;NUM, A&gt;(double)</a><a class="nav-link" href="#fromFloat&lt;NUM, A>">fromFloat&lt;NUM, A&gt;(float)</a><a class="nav-link" href="#fromInteger&lt;NUM, A>">fromInteger&lt;NUM, A&gt;(int)</a><a class="nav-link" href="#fromRational&lt;FRACTION, A>">fromRational&lt;FRACTION, A&gt;(Ratio&lt;int&gt;)</a><a class="nav-link" href="#greaterOrEq&lt;ORD, A>">greaterOrEq&lt;ORD, A&gt;(A, A)</a><a class="nav-link" href="#greaterThan&lt;ORD, A>">greaterThan&lt;ORD, A&gt;(A, A)</a><a class="nav-link" href="#hashCode&lt;CHOICE, CH, A, B>">hashCode&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#head&lt;FOLD, F, A>">head&lt;FOLD, F, A&gt;(F)</a><a class="nav-link" href="#headOrNone&lt;FOLD, F, A>">headOrNone&lt;FOLD, F, A&gt;(F)</a><a class="nav-link" href="#ifChoice1&lt;CHOICE, CH, A, B>">ifChoice1&lt;CHOICE, CH, A, B&gt;(CH, Func&lt;B&gt;)</a><a class="nav-link" href="#ifChoice1&lt;CHOICE, CH, A, B>">ifChoice1&lt;CHOICE, CH, A, B&gt;(CH, Func&lt;A, B&gt;)</a><a class="nav-link" href="#ifChoice1&lt;CHOICE, CH, A, B>">ifChoice1&lt;CHOICE, CH, A, B&gt;(CH, B)</a><a class="nav-link" href="#ifChoice1&lt;CHOICE, CH, A, B>">ifChoice1&lt;CHOICE, CH, A, B&gt;(CH, Action&lt;A&gt;)</a><a class="nav-link" href="#ifChoice2&lt;CHOICE, CH, A, B>">ifChoice2&lt;CHOICE, CH, A, B&gt;(CH, Action&lt;B&gt;)</a><a class="nav-link" href="#ifChoice2&lt;CHOICE, CH, A, B>">ifChoice2&lt;CHOICE, CH, A, B&gt;(CH, A)</a><a class="nav-link" href="#ifChoice2&lt;CHOICE, CH, A, B>">ifChoice2&lt;CHOICE, CH, A, B&gt;(CH, Func&lt;A&gt;)</a><a class="nav-link" href="#ifChoice2&lt;CHOICE, CH, A, B>">ifChoice2&lt;CHOICE, CH, A, B&gt;(CH, Func&lt;B, A&gt;)</a><a class="nav-link" href="#ifNone&lt;OPT, OA, A>">ifNone&lt;OPT, OA, A&gt;(OA, Func&lt;A&gt;)</a><a class="nav-link" href="#ifNone&lt;OPT, OA, A>">ifNone&lt;OPT, OA, A&gt;(OA, A)</a><a class="nav-link" href="#ifNoneUnsafe&lt;OPT, OA, A>">ifNoneUnsafe&lt;OPT, OA, A&gt;(OA, Func&lt;A&gt;)</a><a class="nav-link" href="#ifNoneUnsafe&lt;OPT, OA, A>">ifNoneUnsafe&lt;OPT, OA, A&gt;(OA, A)</a><a class="nav-link" href="#ifSome&lt;OPT, OA, A>">ifSome&lt;OPT, OA, A&gt;(OA, Action&lt;A&gt;)</a><a class="nav-link" href="#ifSome&lt;OPT, OA, A>">ifSome&lt;OPT, OA, A&gt;(OA, Func&lt;A, Unit&gt;)</a><a class="nav-link" href="#isEmpty&lt;FOLD, F, A>">isEmpty&lt;FOLD, F, A&gt;(F)</a><a class="nav-link" href="#iter&lt;FOLD, F, A>">iter&lt;FOLD, F, A&gt;(F, Action&lt;A&gt;)</a><a class="nav-link" href="#join&lt;EQ, MONADA, MONADB, MONADD, MA, MB, MD, A, B, C, D>">join&lt;EQ, MONADA, MONADB, MONADD, MA, MB, MD, A, B, C, D&gt;(MA, MB, Func&lt;A, C&gt;, Func&lt;B, C&gt;, Func&lt;A, B, D&gt;)</a><a class="nav-link" href="#last&lt;FOLD, F, A>">last&lt;FOLD, F, A&gt;(F)</a><a class="nav-link" href="#lastOrNone&lt;FOLD, F, A>">lastOrNone&lt;FOLD, F, A&gt;(F)</a><a class="nav-link" href="#lessOrEq&lt;ORD, A>">lessOrEq&lt;ORD, A&gt;(A, A)</a><a class="nav-link" href="#lessThan&lt;ORD, A>">lessThan&lt;ORD, A&gt;(A, A)</a><a class="nav-link" href="#liftM&lt;MONAD, FUNCTOR, MA, MB, A, B>">liftM&lt;MONAD, FUNCTOR, MA, MB, A, B&gt;(MA, Func&lt;A, B&gt;)</a><a class="nav-link" href="#log&lt;FLOAT, A>">log&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#logBase&lt;FLOAT, A>">logBase&lt;FLOAT, A&gt;(A, A)</a><a class="nav-link" href="#map&lt;FunctorAB, FA, FB, A, B>">map&lt;FunctorAB, FA, FB, A, B&gt;(FA, Func&lt;A, B&gt;)</a><a class="nav-link" href="#matchAsync&lt;CHOICE, CH, A, B, R>">matchAsync&lt;CHOICE, CH, A, B, R&gt;(CH, Func&lt;A, R&gt;, Func&lt;B, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#matchAsync&lt;CHOICE, CH, A, B, R>">matchAsync&lt;CHOICE, CH, A, B, R&gt;(CH, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;B, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#matchObservable&lt;CHOICE, CH, A, B, R>">matchObservable&lt;CHOICE, CH, A, B, R&gt;(CH, Func&lt;A, R&gt;, Func&lt;B, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#matchObservable&lt;CHOICE, CH, A, B, R>">matchObservable&lt;CHOICE, CH, A, B, R&gt;(CH, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;B, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#matchUntyped&lt;CHOICE, CH, A, B, R>">matchUntyped&lt;CHOICE, CH, A, B, R&gt;(CH, Func&lt;object, R&gt;, Func&lt;object, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#matchUntyped&lt;OPT, OA, A, R>">matchUntyped&lt;OPT, OA, A, R&gt;(OA, Func&lt;object, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#mconcat&lt;MONOID, A>">mconcat&lt;MONOID, A&gt;(IEnumerable&lt;A&gt;)</a><a class="nav-link" href="#mconcat&lt;MONOID, A>">mconcat&lt;MONOID, A&gt;(A)</a><a class="nav-link" href="#mempty&lt;MONOID, A>">mempty&lt;MONOID, A&gt;()</a><a class="nav-link" href="#mplus&lt;MPLUS, MA, A>">mplus&lt;MPLUS, MA, A&gt;(MA, MA)</a><a class="nav-link" href="#msum&lt;MPLUS, MA, A>">msum&lt;MPLUS, MA, A&gt;(MA)</a><a class="nav-link" href="#msum&lt;MPLUS, MA, A>">msum&lt;MPLUS, MA, A&gt;(IEnumerable&lt;MA&gt;)</a><a class="nav-link" href="#mzero&lt;MPLUS, MA, A>">mzero&lt;MPLUS, MA, A&gt;()</a><a class="nav-link" href="#negate&lt;NUM, A>">negate&lt;NUM, A&gt;(A)</a><a class="nav-link" href="#partition&lt;CHOICE, CH, A, B>">partition&lt;CHOICE, CH, A, B&gt;(IEnumerable&lt;CH&gt;)</a><a class="nav-link" href="#pi&lt;FLOAT, A>">pi&lt;FLOAT, A&gt;()</a><a class="nav-link" href="#plus&lt;NUM, A>">plus&lt;NUM, A&gt;(A, A)</a><a class="nav-link" href="#pow&lt;FLOAT, A>">pow&lt;FLOAT, A&gt;(A, A)</a><a class="nav-link" href="#product&lt;NUM, A>">product&lt;NUM, A&gt;(A, A)</a><a class="nav-link" href="#product&lt;NUM, FOLD, F, A>">product&lt;NUM, FOLD, F, A&gt;(F)</a><a class="nav-link" href="#Ratio&lt;A>">Ratio&lt;A&gt;(A, A)</a><a class="nav-link" href="#Return&lt;MONAD, MA, A>">Return&lt;MONAD, MA, A&gt;(A)</a><a class="nav-link" href="#SelectMany&lt;MONADA, MA, A, B, C>">SelectMany&lt;MONADA, MA, A, B, C&gt;(MA, Func&lt;A, IEnumerable&lt;B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#SelectMany&lt;MONADA, MONADB, MONADC, MA, MB, MC, A, B, C>">SelectMany&lt;MONADA, MONADB, MONADC, MA, MB, MC, A, B, C&gt;(MA, Func&lt;A, MB&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#signum&lt;NUM, A>">signum&lt;NUM, A&gt;(A)</a><a class="nav-link" href="#sin&lt;FLOAT, A>">sin&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#sinh&lt;FLOAT, A>">sinh&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#Some&lt;OPT, OA, A, B>">Some&lt;OPT, OA, A, B&gt;(OA, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Some&lt;OPT, OA, A>">Some&lt;OPT, OA, A&gt;(OA, Action&lt;A&gt;)</a><a class="nav-link" href="#sqrt&lt;FLOAT, A>">sqrt&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#subtract&lt;NUM, A>">subtract&lt;NUM, A&gt;(A, A)</a><a class="nav-link" href="#sum&lt;NUM, FOLD, F, A>">sum&lt;NUM, FOLD, F, A&gt;(F)</a><a class="nav-link" href="#tan&lt;FLOAT, A>">tan&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#tanh&lt;FLOAT, A>">tanh&lt;FLOAT, A&gt;(A)</a><a class="nav-link" href="#toArray&lt;CHOICE, CH, A, B>">toArray&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#toArray&lt;OPT, OA, A>">toArray&lt;OPT, OA, A&gt;(OA)</a><a class="nav-link" href="#toBiSeq&lt;FOLD, F, A, B>">toBiSeq&lt;FOLD, F, A, B&gt;(F)</a><a class="nav-link" href="#toEither&lt;CHOICE, CH, A, B>">toEither&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#toEither&lt;OPT, OA, L, A>">toEither&lt;OPT, OA, L, A&gt;(OA, L)</a><a class="nav-link" href="#toEither&lt;OPT, OA, L, A>">toEither&lt;OPT, OA, L, A&gt;(OA, Func&lt;L&gt;)</a><a class="nav-link" href="#toEitherUnsafe&lt;CHOICE, CH, A, B>">toEitherUnsafe&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#toEitherUnsafe&lt;OPT, OA, L, A>">toEitherUnsafe&lt;OPT, OA, L, A&gt;(OA, L)</a><a class="nav-link" href="#toEitherUnsafe&lt;OPT, OA, L, A>">toEitherUnsafe&lt;OPT, OA, L, A&gt;(OA, Func&lt;L&gt;)</a><a class="nav-link" href="#toList&lt;CHOICE, CH, A, B>">toList&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#toList&lt;OPT, OA, A>">toList&lt;OPT, OA, A&gt;(OA)</a><a class="nav-link" href="#toOption&lt;CHOICE, CH, A, B>">toOption&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#toOption&lt;OPT, OA, A>">toOption&lt;OPT, OA, A&gt;(OA)</a><a class="nav-link" href="#toOptionUnsafe&lt;CHOICE, CH, A, B>">toOptionUnsafe&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#toOptionUnsafe&lt;OPT, OA, A>">toOptionUnsafe&lt;OPT, OA, A&gt;(OA)</a><a class="nav-link" href="#toSeq&lt;CHOICE, CH, A, B>">toSeq&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#toSeq&lt;FOLD, F, A>">toSeq&lt;FOLD, F, A&gt;(F)</a><a class="nav-link" href="#toTryOption&lt;CHOICE, CH, A, B>">toTryOption&lt;CHOICE, CH, A, B&gt;(CH)</a><a class="nav-link" href="#toTryOption&lt;OPT, OA, A>">toTryOption&lt;OPT, OA, A&gt;(OA)</a><a class="nav-link" href="#traverse&lt;Env, Out, MonadA, MonadB, MA, MB, A, B>">traverse&lt;Env, Out, MonadA, MonadB, MA, MB, A, B&gt;(MA, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;Env, Out, MonadA, MonadB, MA, MB, A, B>">traverse&lt;Env, Out, MonadA, MonadB, MA, MB, A, B&gt;(MA, Func&lt;A, MB&gt;)</a><a class="nav-link" href="#traverse&lt;MonadA, MonadB, MA, MB, A, B>">traverse&lt;MonadA, MonadB, MA, MB, A, B&gt;(MA, Func&lt;A, B&gt;)</a><a class="nav-link" href="#traverse&lt;MonadA, MonadB, MA, MB, A, B>">traverse&lt;MonadA, MonadB, MA, MB, A, B&gt;(MA, Func&lt;A, MB&gt;)</a><a class="nav-link" href="#trimap&lt;TriFunctorABC, FABC, FR, A, B, C, R>">trimap&lt;TriFunctorABC, FABC, FR, A, B, C, R&gt;(FABC, Func&lt;A, R&gt;, Func&lt;B, R&gt;, Func&lt;B, R&gt;)</a><a class="nav-link" href="#trimap&lt;TriFunctorABC, FABC, FTUV, A, B, C, T, U, V>">trimap&lt;TriFunctorABC, FABC, FTUV, A, B, C, T, U, V&gt;(FABC, Func&lt;A, T&gt;, Func&lt;B, U&gt;, Func&lt;C, V&gt;)</a></div><div class="content-panel"><h1 >TypeClass Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="ident">TypeClass</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt</div></div><h2 >Methods</h2><div class="member-title"><a name="abs&lt;NUM, A>"></a>abs&lt;NUM, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-abs_NUM_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the absolute value of a number </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value to find the absolute value of</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">abs</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The non-negative absolute value of x</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-abs_NUM_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Abs(x)</div></div></div><div class="member-title"><a name="acos&lt;FLOAT, A>"></a>acos&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-acos_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates an arc-cosine. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which an arc-cosine is to be calculated</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">acos</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;acos(x)&lt;/c&gt;, in radians</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-acos_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Acos(x)</div></div></div><div class="member-title"><a name="acosh&lt;FLOAT, A>"></a>acosh&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-acosh_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates an area hyperbolic cosine. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which an area hyperbolic cosine is to be calculated. </div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">acosh</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;acosh(x)&lt;/c&gt;.</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-acosh_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Acosh(x)</div></div></div><div class="member-title"><a name="append&lt;A>"></a>append&lt;A&gt;(HashSet&lt;A&gt;, HashSet&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_A_HashSet_A_x__HashSet_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt; <span class="ident">append</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >The result of the operation</span></div></div></div><div style="display:none" id="code-append_A_HashSet_A_x__HashSet_A_y_"><div class="section_title">SOURCE</div><div class="code">
            MHashSet&lt;A&gt;.Inst.Append(x, y)</div></div></div><div class="member-title"><a name="append&lt;A>"></a>append&lt;A&gt;(Lst&lt;A&gt;, Lst&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_A_Lst_A_x__Lst_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; <span class="ident">append</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >The result of the operation</span></div></div></div><div style="display:none" id="code-append_A_Lst_A_x__Lst_A_y_"><div class="section_title">SOURCE</div><div class="code">
            MLst&lt;A&gt;.Inst.Append(x, y)</div></div></div><div class="member-title"><a name="append&lt;K, V>"></a>append&lt;K, V&gt;(HashMap&lt;K, V&gt;, HashMap&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_K_V_HashMap_K_V_x__HashMap_K_V_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">append</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; x, <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >The result of the operation</span></div></div></div><div style="display:none" id="code-append_K_V_HashMap_K_V_x__HashMap_K_V_y_"><div class="section_title">SOURCE</div><div class="code">
            MHashMap&lt;K, V&gt;.Inst.Append(x, y)</div></div></div><div class="member-title"><a name="append&lt;K, V>"></a>append&lt;K, V&gt;(Map&lt;K, V&gt;, Map&lt;K, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_K_V_Map_K_V_x__Map_K_V_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; <span class="ident">append</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;(<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; x, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;</div><div class="normal"><span >The result of the operation</span></div></div></div><div style="display:none" id="code-append_K_V_Map_K_V_x__Map_K_V_y_"><div class="section_title">SOURCE</div><div class="code">
            MMap&lt;K, V&gt;.Inst.Append(x, y)</div></div></div><div class="member-title"><a name="append&lt;NEWTYPE, SEMI, A, PRED>"></a>append&lt;NEWTYPE, SEMI, A, PRED&gt;(NewType&lt;NEWTYPE, A, PRED&gt;, NewType&lt;NEWTYPE, A, PRED&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_NEWTYPE_SEMI_A_PRED_NewType_NEWTYPE_A_PRED_x__NewType_NEWTYPE_A_PRED_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NEWTYPE</span> <span class="ident">append</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">SEMI</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; x, <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NEWTYPE</span></div><div class="normal"><span >The result of the operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NEWTYPE</span> : <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_NEWTYPE_SEMI_A_PRED_NewType_NEWTYPE_A_PRED_x__NewType_NEWTYPE_A_PRED_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(SEMI).Append(a, b)</div></div></div><div class="member-title"><a name="append&lt;NEWTYPE, SEMI, A>"></a>append&lt;NEWTYPE, SEMI, A&gt;(NewType&lt;NEWTYPE, A&gt;, NewType&lt;NEWTYPE, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_NEWTYPE_SEMI_A_NewType_NEWTYPE_A_x__NewType_NEWTYPE_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NEWTYPE</span> <span class="ident">append</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">SEMI</span>, <span class="ident">A</span>&gt;(<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>&gt; x, <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NEWTYPE</span></div><div class="normal"><span >The result of the operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NEWTYPE</span> : <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_NEWTYPE_SEMI_A_NewType_NEWTYPE_A_x__NewType_NEWTYPE_A_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(SEMI).Append(a, b)</div></div></div><div class="member-title"><a name="append&lt;NUMTYPE, NUM, A, PRED>"></a>append&lt;NUMTYPE, NUM, A, PRED&gt;(NumType&lt;NUMTYPE, NUM, A, PRED&gt;, NumType&lt;NUMTYPE, NUM, A, PRED&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_NUMTYPE_NUM_A_PRED_NumType_NUMTYPE_NUM_A_PRED_x__NumType_NUMTYPE_NUM_A_PRED_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">append</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; x, <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"><span >The result of the operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_NUMTYPE_NUM_A_PRED_NumType_NUMTYPE_NUM_A_PRED_x__NumType_NUMTYPE_NUM_A_PRED_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Append(a, b)</div></div></div><div class="member-title"><a name="append&lt;NUMTYPE, NUM, A>"></a>append&lt;NUMTYPE, NUM, A&gt;(NumType&lt;NUMTYPE, NUM, A&gt;, NumType&lt;NUMTYPE, NUM, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_NUMTYPE_NUM_A_NumType_NUMTYPE_NUM_A_x__NumType_NUMTYPE_NUM_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">NUMTYPE</span> <span class="ident">append</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt; x, <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">NUMTYPE</span></div><div class="normal"><span >The result of the operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUMTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_NUMTYPE_NUM_A_NumType_NUMTYPE_NUM_A_x__NumType_NUMTYPE_NUM_A_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(NUM).Append(a, b)</div></div></div><div class="member-title"><a name="append&lt;SEMI, A>"></a>append&lt;SEMI, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SEMI_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The result of the operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SEMI_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(SEMI).Append(x, y)</div></div></div><div class="member-title"><a name="append&lt;SEMI, A>"></a>append&lt;SEMI, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SEMI_A_Option_A_x__Option_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >The result of the operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SEMI_A_Option_A_x__Option_A_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(SEMI).Append(a, b)</div></div></div><div class="member-title"><a name="append&lt;SEMI, A>"></a>append&lt;SEMI, A&gt;(OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SEMI_A_OptionUnsafe_A_x__OptionUnsafe_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >The result of the operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SEMI_A_OptionUnsafe_A_x__OptionUnsafe_A_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(SEMI).Append(a, b)</div></div></div><div class="member-title"><a name="append&lt;SEMI, A>"></a>append&lt;SEMI, A&gt;(IEnumerable&lt;A&gt;, IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SEMI_A_IEnumerable_A_x__IEnumerable_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >The result of the operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SEMI_A_IEnumerable_A_x__IEnumerable_A_y_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var a in x)
                foreach (var b in y)
                    yield return default(SEMI).Append(a, b);
        </div></div></div><div class="member-title"><a name="append&lt;SEMI, A>"></a>append&lt;SEMI, A&gt;(Try&lt;A&gt;, Try&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SEMI_A_Try_A_x__Try_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >The result of the operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SEMI_A_Try_A_x__Try_A_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(SEMI).Append(a, b)</div></div></div><div class="member-title"><a name="append&lt;SEMI, A>"></a>append&lt;SEMI, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SEMI_A_TryOption_A_x__TryOption_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >The result of the operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-append_SEMI_A_TryOption_A_x__TryOption_A_y_"><div class="section_title">SOURCE</div><div class="code">
            from a in x
            from b in y
            select default(SEMI).Append(a, b)</div></div></div><div class="member-title"><a name="append&lt;SEMI, L, R>"></a>append&lt;SEMI, L, R&gt;(Either&lt;L, R&gt;, Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SEMI_L_R_Either_L_R_lhs__Either_L_R_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; lhs, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-append_SEMI_L_R_Either_L_R_lhs__Either_L_R_rhs_"><div class="section_title">SOURCE</div><div class="code">
            from x in lhs
            from y in rhs
            select default(SEMI).Append(x, y)</div></div></div><div class="member-title"><a name="append&lt;SEMI, L, R>"></a>append&lt;SEMI, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-append_SEMI_L_R_EitherUnsafe_L_R_lhs__EitherUnsafe_L_R_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >An associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Left-hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Right-hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; <span class="ident">append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; lhs, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-append_SEMI_L_R_EitherUnsafe_L_R_lhs__EitherUnsafe_L_R_rhs_"><div class="section_title">SOURCE</div><div class="code">
            from x in lhs
            from y in rhs
            select default(SEMI).Append(x, y)</div></div></div><div class="member-title"><a name="asEnumerable&lt;OPT, OA, A>"></a>asEnumerable&lt;OPT, OA, A&gt;(OA)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-asEnumerable_OPT_OA_A_OA__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option to an enumerable of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div><div class="arg-desc">Option</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; <span class="ident">asEnumerable</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An enumerable of zero or one items</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-asEnumerable_OPT_OA_A_OA__ma_"><div class="section_title">SOURCE</div><div class="code">
            toArray&lt;OPT, OA, A&gt;(ma).AsEnumerable()</div></div></div><div class="member-title"><a name="asin&lt;FLOAT, A>"></a>asin&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-asin_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates an arcsine. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which an arcsine is to be calculated.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">asin</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;asin(x)&lt;/c&gt;, in radians.</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-asin_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Asin(x)</div></div></div><div class="member-title"><a name="asinh&lt;FLOAT, A>"></a>asinh&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-asinh_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates an area hyperbolic sine</span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which an area hyperbolic sine is to be calculated. </div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">asinh</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;asinh(x)&lt;/c&gt;.</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-asinh_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Asinh(x)</div></div></div><div class="member-title"><a name="atan&lt;FLOAT, A>"></a>atan&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-atan_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates an arc-tangent. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which an arc-tangent is to be calculated</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">atan</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;atan(x)&lt;/c&gt;, in radians</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-atan_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Atan(x)</div></div></div><div class="member-title"><a name="atanh&lt;FLOAT, A>"></a>atanh&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-atanh_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates an area hyperbolic tangent. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which an area hyperbolic tangent is to be calculated. </div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">atanh</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;atanh(x)&lt;/c&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-atanh_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Atanh(x)</div></div></div><div class="member-title"><a name="biExists&lt;FOLD, F, A, B>"></a>biExists&lt;FOLD, F, A, B&gt;(F, Func&lt;A, bool&gt;, Func&lt;B, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biExists_FOLD_F_A_B_F__foldable__Func_A_bool_preda__Func_B_bool_predb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Runs a predicate against the bound value(s).  If the predicate returns true for any item then the operation immediately returns true.  False is returned if no items in the structure match the predicate.<br/><br/> NOTE: An empty structure will return false. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">foldable</div><div class="arg-type"><span class="ident">F</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">preda</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biExists</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">F</span> foldable, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; preda, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="keyword">bool</span>&gt; predb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate holds for all values</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="keyword">struct</span> <span class="ident">BiFoldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-biExists_FOLD_F_A_B_F__foldable__Func_A_bool_preda__Func_B_bool_predb_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in toBiSeq&lt;FOLD, F, A, B&gt;(foldable))
            {
                if (item.Match(Left: preda, Right: predb)) return true;
            }
            return false;
        </div></div></div><div class="member-title"><a name="biFold&lt;FOLD, F, A, B, S>"></a>biFold&lt;FOLD, F, A, B, S&gt;(F, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biFold_FOLD_F_A_B_S_F__foldable__S__state__Func_S_A_S_fa__Func_S_B_S_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right:<br/><br/> Fold([x1, x2, ..., xn] == x1 `f` (x2 `f` ... (xn `f` z)...)<br/><br/> Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">foldable</div><div class="arg-type"><span class="ident">F</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Folder function, applied for each item in foldable</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Folder function, applied for each item in foldable</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">biFold</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;(<span class="ident">F</span> foldable, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="keyword">struct</span> <span class="ident">BiFoldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-biFold_FOLD_F_A_B_S_F__foldable__S__state__Func_S_A_S_fa__Func_S_B_S_fb_"><div class="section_title">SOURCE</div><div class="code">
            default(FOLD).BiFold(foldable, state, fa, fb)</div></div></div><div class="member-title"><a name="biFoldBack&lt;FOLD, F, A, B, S>"></a>biFoldBack&lt;FOLD, F, A, B, S&gt;(F, S, Func&lt;S, A, S&gt;, Func&lt;S, B, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biFoldBack_FOLD_F_A_B_S_F__foldable__S__state__Func_S_A_S_fa__Func_S_B_S_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >In the case of lists, &#39;FoldBack&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right:<br/><br/> FoldBack( [x1, x2, ..., xn]) == (...((z `f` x1) `f` x2) `f`...) `f` xn<br/><br/> Note that to produce the outermost application of the operator the entire input list must be traversed.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">foldable</div><div class="arg-type"><span class="ident">F</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Folder function, applied for each item in foldable</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Folder function, applied for each item in foldable</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">biFoldBack</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt;(<span class="ident">F</span> foldable, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">B</span>, <span class="ident">S</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="keyword">struct</span> <span class="ident">BiFoldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-biFoldBack_FOLD_F_A_B_S_F__foldable__S__state__Func_S_A_S_fa__Func_S_B_S_fb_"><div class="section_title">SOURCE</div><div class="code">
            default(FOLD).BiFoldBack(foldable, state, fa, fb)</div></div></div><div class="member-title"><a name="biForAll&lt;FOLD, F, A, B>"></a>biForAll&lt;FOLD, F, A, B&gt;(F, Func&lt;A, bool&gt;, Func&lt;B, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biForAll_FOLD_F_A_B_F__foldable__Func_A_bool_preda__Func_B_bool_predb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Runs a predicate against the bound value(s).  If the predicate holds for all values then true is returned.  <br/><br/> NOTE: An empty structure will return true. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">foldable</div><div class="arg-type"><span class="ident">F</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">preda</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">predb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">biForAll</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">F</span> foldable, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; preda, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="keyword">bool</span>&gt; predb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate holds for all values</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="keyword">struct</span> <span class="ident">BiFoldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-biForAll_FOLD_F_A_B_F__foldable__Func_A_bool_preda__Func_B_bool_predb_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in toBiSeq&lt;FOLD, F, A, B&gt;(foldable))
            {
                if (!item.Match(Left: preda, Right: predb)) return false;
            }
            return true;
        </div></div></div><div class="member-title"><a name="biIter&lt;FOLD, F, A, B>"></a>biIter&lt;FOLD, F, A, B&gt;(F, Action&lt;A&gt;, Action&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-biIter_FOLD_F_A_B_F__foldable__Action_A_fa__Action_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate the values in the foldable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">foldable</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable to perform the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">biIter</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">F</span> foldable, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Action</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="keyword">struct</span> <span class="ident">BiFoldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-biIter_FOLD_F_A_B_F__foldable__Action_A_fa__Action_B_fb_"><div class="section_title">SOURCE</div><div class="code">
            biFold&lt;FOLD, F, A, B, Unit&gt;(foldable, unit, (s,x) =&gt; { fa(x); return unit; }, (s, x) =&gt; { fb(x); return unit; })</div></div></div><div class="member-title"><a name="bimap&lt;BiFunctorAB, FAB, FR, A, B, R>"></a>bimap&lt;BiFunctorAB, FAB, FR, A, B, R&gt;(FAB, Func&lt;A, R&gt;, Func&lt;B, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_BiFunctorAB_FAB_FR_A_B_R_FAB__ma__Func_A_R_fa__Func_B_R_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one bi-functor to another.  This operation should map only one of the items (A, or B).  The type R should match A, or B depending on which item is being mapped. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">FAB</span></div></div><div class="arg-desc">Functor value to map from </div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Projection function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Projection function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">FR</span> <span class="ident">bimap</span>&lt;<span class="ident">BiFunctorAB</span>, <span class="ident">FAB</span>, <span class="ident">FR</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">FAB</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">FR</span></div><div class="normal"><span >Mapped functor</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">BiFunctorAB</span> : <span class="ident">BiFunctor</span>&lt;<span class="ident">FAB</span>, <span class="ident">FR</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-bimap_BiFunctorAB_FAB_FR_A_B_R_FAB__ma__Func_A_R_fa__Func_B_R_fb_"><div class="section_title">SOURCE</div><div class="code">
            default(BiFunctorAB).BiMap(ma, fa, fb)</div></div></div><div class="member-title"><a name="bimap&lt;BiFunctorAB, FAB, FUV, A, B, U, V>"></a>bimap&lt;BiFunctorAB, FAB, FUV, A, B, U, V&gt;(FAB, Func&lt;A, U&gt;, Func&lt;B, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bimap_BiFunctorAB_FAB_FUV_A_B_U_V_FAB__ma__Func_A_U_fa__Func_B_V_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another.  Both elements of the bi-functor can will be mapped to a new result value. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">FAB</span></div></div><div class="arg-desc">Functor value to map from </div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">U</span>&gt;</div></div><div class="arg-desc">Projection function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">Projection function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">FUV</span> <span class="ident">bimap</span>&lt;<span class="ident">BiFunctorAB</span>, <span class="ident">FAB</span>, <span class="ident">FUV</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="ident">FAB</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">U</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">V</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">FUV</span></div><div class="normal"><span >Mapped functor</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">BiFunctorAB</span> : <span class="ident">BiFunctor</span>&lt;<span class="ident">FAB</span>, <span class="ident">FUV</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div><div style="display:none" id="code-bimap_BiFunctorAB_FAB_FUV_A_B_U_V_FAB__ma__Func_A_U_fa__Func_B_V_fb_"><div class="section_title">SOURCE</div><div class="code">
            default(BiFunctorAB).BiMap(ma, fa, fb)</div></div></div><div class="member-title"><a name="bind&lt;MONADA, MONADB, MA, MB, A, B>"></a>bind&lt;MONADA, MONADB, MA, MB, A, B&gt;(MA, Func&lt;A, MB&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-bind_MONADA_MONADB_MA_MB_A_B_MA__ma__Func_A_MB_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">MA</span></div></div><div class="arg-desc">Monad to bind</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt;</div></div><div class="arg-desc">Bind function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MB</span> <span class="ident">bind</span>&lt;<span class="ident">MONADA</span>, <span class="ident">MONADB</span>, <span class="ident">MA</span>, <span class="ident">MB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">MA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MB</span></div><div class="normal"><span >Monad of B</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MONADA</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MA</span>, <span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MONADB</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MB</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-bind_MONADA_MONADB_MA_MB_A_B_MA__ma__Func_A_MB_f_"><div class="section_title">SOURCE</div><div class="code">
            default(MONADA).Bind&lt;MONADB, MB, B&gt;(ma, f)</div></div></div><div class="member-title"><a name="choice1AsEnumerable&lt;CHOICE, CH, A, B>"></a>choice1AsEnumerable&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choice1AsEnumerable_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into a IEnumerable L </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; <span class="ident">choice1AsEnumerable</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >If the Either is in a Left state, a IEnumerable of L with one item.  A zero length IEnumerable L otherwise</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-choice1AsEnumerable_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: a =&gt; new A[1] { a },
                Choice2: _ =&gt; new A[0],
                Bottom: () =&gt; new A[0])</div></div></div><div class="member-title"><a name="choice1s&lt;CHOICE, CH, A, B>"></a>choice1s&lt;CHOICE, CH, A, B&gt;(IEnumerable&lt;CH&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choice1s_CHOICE_CH_A_B_IEnumerable_CH_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Either&#39; all the &#39;Left&#39; elements. All the &#39;Left&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">CH</span>&gt;</div></div><div class="arg-desc">Either list</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; <span class="ident">choice1s</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">CH</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An enumerable of L</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-choice1s_CHOICE_CH_A_B_IEnumerable_CH_ma_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in ma)
            {
                if (default(CHOICE).IsChoice1(item))
                {
                    yield return default(CHOICE).Match(
                        item,
                        Choice1: x =&gt; x,
                        Choice2: y =&gt; default(A),
                        Bottom: () =&gt; default(A));
                }
            }
        </div></div></div><div class="member-title"><a name="choice1ToArray&lt;CHOICE, CH, A, B>"></a>choice1ToArray&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choice1ToArray_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an ImmutableArray R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt; <span class="ident">choice1ToArray</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-choice1ToArray_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            toArray&lt;A&gt;(choice1AsEnumerable&lt;CHOICE, CH, A, B&gt;(ma))</div></div></div><div class="member-title"><a name="choice1ToList&lt;CHOICE, CH, A, B>"></a>choice1ToList&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choice1ToList_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into a Lst R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; <span class="ident">choice1ToList</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-choice1ToList_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            choice1AsEnumerable&lt;CHOICE, CH, A, B&gt;(ma).Freeze()</div></div></div><div class="member-title"><a name="choice2AsEnumerable&lt;CHOICE, CH, A, B>"></a>choice2AsEnumerable&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choice2AsEnumerable_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into a IEnumerable R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt; <span class="ident">choice2AsEnumerable</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, a IEnumerable of R with one item.  A zero length IEnumerable R otherwise</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-choice2AsEnumerable_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma, 
                Choice1: _ =&gt; new B[0],
                Choice2: b =&gt; new B[1] { b },
                Bottom: () =&gt; new B[0])</div></div></div><div class="member-title"><a name="choice2s&lt;CHOICE, CH, A, B>"></a>choice2s&lt;CHOICE, CH, A, B&gt;(IEnumerable&lt;CH&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choice2s_CHOICE_CH_A_B_IEnumerable_CH_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Either&#39; all the &#39;Right&#39; elements. All the &#39;Right&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">CH</span>&gt;</div></div><div class="arg-desc">Choice  list</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt; <span class="ident">choice2s</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">CH</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >An enumerable of L</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-choice2s_CHOICE_CH_A_B_IEnumerable_CH_ma_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in ma)
            {
                if (default(CHOICE).IsChoice2(item))
                {
                    yield return default(CHOICE).Match(
                        item,
                        Choice1: x =&gt; default(B),
                        Choice2: y =&gt; y,
                        Bottom: () =&gt; default(B));
                }
            }
        </div></div></div><div class="member-title"><a name="choice2ToArray&lt;CHOICE, CH, A, B>"></a>choice2ToArray&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choice2ToArray_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into an ImmutableArray R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">B</span>&gt; <span class="ident">choice2ToArray</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-choice2ToArray_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            toArray&lt;B&gt;(choice2AsEnumerable&lt;CHOICE, CH, A, B&gt;(ma))</div></div></div><div class="member-title"><a name="choice2ToList&lt;CHOICE, CH, A, B>"></a>choice2ToList&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-choice2ToList_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Project the Either into a Lst R </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">B</span>&gt; <span class="ident">choice2ToList</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-choice2ToList_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            choice2AsEnumerable&lt;CHOICE, CH, A, B&gt;(ma).Freeze()</div></div></div><div class="member-title"><a name="collect&lt;FOLD, F, A, B, C>"></a>collect&lt;FOLD, F, A, B, C&gt;(F, Func&lt;A, C&gt;, Func&lt;B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-collect_FOLD_F_A_B_C_F__foldable__Func_A_C_fa__Func_B_C_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the foldable to a sequence (IEnumerable) performing a map operation on each item in the structure </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">foldable</div><div class="arg-type"><span class="ident">F</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">C</span>&gt; <span class="ident">collect</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">F</span> foldable, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Sequence of As that represent the value(s) in the structure</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="keyword">struct</span> <span class="ident">BiFoldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-collect_FOLD_F_A_B_C_F__foldable__Func_A_C_fa__Func_B_C_fb_"><div class="section_title">SOURCE</div><div class="code">
            biFoldBack&lt;FOLD, F, A, B, IEnumerable&lt;C&gt;&gt;(foldable, new C[0].AsEnumerable(), (s, x) =&gt; fa(x).Cons(s), (s, x) =&gt; fb(x).Cons(s))</div></div></div><div class="member-title"><a name="collect&lt;FOLD, F, A, B>"></a>collect&lt;FOLD, F, A, B&gt;(F, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-collect_FOLD_F_A_B_F__self__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the foldable to a sequence (IEnumerable) performing a map operation on each item in the structure </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable to performt the operation on</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt; <span class="ident">collect</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">F</span> self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Sequence of As that represent the value(s) in the structure</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-collect_FOLD_F_A_B_F__self__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            default(FOLD).FoldBack(self, new B[0].AsEnumerable(), (s, x) =&gt; f(x).Cons(s))(unit)</div></div></div><div class="member-title"><a name="compare&lt;NEWTYPE, NUM, T, PRED>"></a>compare&lt;NEWTYPE, NUM, T, PRED&gt;(NEWTYPE, NumType&lt;NEWTYPE, NUM, T, PRED&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_NEWTYPE_NUM_T_PRED_NEWTYPE__x__NumType_NEWTYPE_NUM_T_PRED_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NEWTYPE</span></div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NumType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NEWTYPE</span> x, <span class="ident">NumType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NEWTYPE</span> : <span class="ident">NumType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">NUM</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-compare_NEWTYPE_NUM_T_PRED_NEWTYPE__x__NumType_NEWTYPE_NUM_T_PRED_y_"><div class="section_title">SOURCE</div><div class="code">
            OrdNumType&lt;NEWTYPE, NUM, T, PRED&gt;.Inst.Compare(x, y)</div></div></div><div class="member-title"><a name="compare&lt;NEWTYPE, ORD, T, PRED>"></a>compare&lt;NEWTYPE, ORD, T, PRED&gt;(NEWTYPE, NEWTYPE)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_NEWTYPE_ORD_T_PRED_NEWTYPE__x__NEWTYPE__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NEWTYPE</span></div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NEWTYPE</span></div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">ORD</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NEWTYPE</span> x, <span class="ident">NEWTYPE</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">T</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NEWTYPE</span> : <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">T</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-compare_NEWTYPE_ORD_T_PRED_NEWTYPE__x__NEWTYPE__y_"><div class="section_title">SOURCE</div><div class="code">
            OrdNewType&lt;NEWTYPE, ORD, T, PRED&gt;.Inst.Compare(x, y)</div></div></div><div class="member-title"><a name="compare&lt;ORD, A>"></a>compare&lt;ORD, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_ORD_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compare_ORD_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(ORD).Compare(x, y)</div></div></div><div class="member-title"><a name="compare&lt;ORD, A>"></a>compare&lt;ORD, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_ORD_A_Option_A_x__Option_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compare_ORD_A_Option_A_x__Option_A_y_"><div class="section_title">SOURCE</div><div class="code">
            OrdOpt&lt;ORD, MOption&lt;A&gt;, Option&lt;A&gt;, A&gt;.Inst.Compare(x, y)</div></div></div><div class="member-title"><a name="compare&lt;ORD, A>"></a>compare&lt;ORD, A&gt;(OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_ORD_A_OptionUnsafe_A_x__OptionUnsafe_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compare_ORD_A_OptionUnsafe_A_x__OptionUnsafe_A_y_"><div class="section_title">SOURCE</div><div class="code">
            OrdOpt&lt;ORD, MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;.Inst.Compare(x, y)</div></div></div><div class="member-title"><a name="compare&lt;ORD, A>"></a>compare&lt;ORD, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_ORD_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compare_ORD_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            OrdArray&lt;ORD, A&gt;.Inst.Compare(x, y)</div></div></div><div class="member-title"><a name="compare&lt;ORD, A>"></a>compare&lt;ORD, A&gt;(Lst&lt;A&gt;, Lst&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_ORD_A_Lst_A_x__Lst_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compare_ORD_A_Lst_A_x__Lst_A_y_"><div class="section_title">SOURCE</div><div class="code">
            OrdLst&lt;ORD, A&gt;.Inst.Compare(x, y)</div></div></div><div class="member-title"><a name="compare&lt;ORD, A>"></a>compare&lt;ORD, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_ORD_A_TryOption_A_x__TryOption_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compare_ORD_A_TryOption_A_x__TryOption_A_y_"><div class="section_title">SOURCE</div><div class="code">
            OrdOpt&lt;ORD, MTryOption&lt;A&gt;, TryOption&lt;A&gt;, A&gt;.Inst.Compare(x, y)</div></div></div><div class="member-title"><a name="compare&lt;ORD, A>"></a>compare&lt;ORD, A&gt;(Try&lt;A&gt;, Try&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_ORD_A_Try_A_x__Try_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-compare_ORD_A_Try_A_x__Try_A_y_"><div class="section_title">SOURCE</div><div class="code">
            OrdOpt&lt;ORD, MTry&lt;A&gt;, Try&lt;A&gt;, A&gt;.Inst.Compare(x, y)</div></div></div><div class="member-title"><a name="compare&lt;ORD, L, R>"></a>compare&lt;ORD, L, R&gt;(Either&lt;L, R&gt;, Either&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_ORD_L_R_Either_L_R_x__Either_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-compare_ORD_L_R_Either_L_R_x__Either_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
            OrdChoice&lt;ORD, MEither&lt;L, R&gt;, Either&lt;L, R&gt;, L, R&gt;.Inst.Compare(x, y)</div></div></div><div class="member-title"><a name="compare&lt;ORD, L, R>"></a>compare&lt;ORD, L, R&gt;(EitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_ORD_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">ORD</span>, <span class="ident">L</span>, <span class="ident">R</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-compare_ORD_L_R_EitherUnsafe_L_R_x__EitherUnsafe_L_R_y_"><div class="section_title">SOURCE</div><div class="code">
            OrdChoice&lt;ORD, MEitherUnsafe&lt;L, R&gt;, EitherUnsafe&lt;L, R&gt;, L, R&gt;.Inst.Compare(x, y)</div></div></div><div class="member-title"><a name="compare&lt;ORDA, ORDB, A, B>"></a>compare&lt;ORDA, ORDB, A, B&gt;(Either&lt;A, B&gt;, Either&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_ORDA_ORDB_A_B_Either_A_B_x__Either_A_B_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">ORDA</span>, <span class="ident">ORDB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">Either</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; x, <span class="ident">Either</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORDA</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">ORDB</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-compare_ORDA_ORDB_A_B_Either_A_B_x__Either_A_B_y_"><div class="section_title">SOURCE</div><div class="code">
            OrdChoice&lt;ORDA, ORDB, MEither&lt;A, B&gt;, Either&lt;A, B&gt;, A, B&gt;.Inst.Compare(x, y)</div></div></div><div class="member-title"><a name="compare&lt;ORDA, ORDB, A, B>"></a>compare&lt;ORDA, ORDB, A, B&gt;(EitherUnsafe&lt;A, B&gt;, EitherUnsafe&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-compare_ORDA_ORDB_A_B_EitherUnsafe_A_B_x__EitherUnsafe_A_B_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare one item to another to ascertain ordering </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">compare</span>&lt;<span class="ident">ORDA</span>, <span class="ident">ORDB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">EitherUnsafe</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; x, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >0 if x is equal to y -1 if x greater than y  1 if x less than y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORDA</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">ORDB</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-compare_ORDA_ORDB_A_B_EitherUnsafe_A_B_x__EitherUnsafe_A_B_y_"><div class="section_title">SOURCE</div><div class="code">
            OrdChoice&lt;ORDA, ORDB, MEitherUnsafe&lt;A, B&gt;, EitherUnsafe&lt;A, B&gt;, A, B&gt;.Inst.Compare(x, y)</div></div></div><div class="member-title"><a name="contains&lt;EQ, FOLD, F, A, B>"></a>contains&lt;EQ, FOLD, F, A, B&gt;(F, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_FOLD_F_A_B_F__foldable__A__item_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Does the element occur in the structure? </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">foldable</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable</div></div><div class="arg"><div class="arg-header"><div class="arg-name">item</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Item to test</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">F</span> foldable, <span class="ident">A</span> item)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if item in the structure</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="keyword">struct</span> <span class="ident">BiFoldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_FOLD_F_A_B_F__foldable__A__item_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var x in toBiSeq&lt;FOLD, F, A, B&gt;(foldable).Lefts())
            {
                if (equals&lt;EQ, A&gt;(x, item)) return true;
            }
            return false;
        </div></div></div><div class="member-title"><a name="contains&lt;EQ, FOLD, F, A, B>"></a>contains&lt;EQ, FOLD, F, A, B&gt;(F, B)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_FOLD_F_A_B_F__foldable__B__item_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Does the element occur in the structure? </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">foldable</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable</div></div><div class="arg"><div class="arg-header"><div class="arg-name">item</div><div class="arg-type"><span class="ident">B</span></div></div><div class="arg-desc">Item to test</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">F</span> foldable, <span class="ident">B</span> item)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if item in the structure</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="keyword">struct</span> <span class="ident">BiFoldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_FOLD_F_A_B_F__foldable__B__item_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var x in toBiSeq&lt;FOLD, F, A, B&gt;(foldable).Rights())
            {
                if (equals&lt;EQ, B&gt;(x, item)) return true;
            }
            return false;
        </div></div></div><div class="member-title"><a name="contains&lt;EQ, FOLD, F, A>"></a>contains&lt;EQ, FOLD, F, A&gt;(F, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-contains_EQ_FOLD_F_A_F__fa__A__item_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Does the element occur in the structure? </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable</div></div><div class="arg"><div class="arg-header"><div class="arg-name">item</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Item to test</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">contains</span>&lt;<span class="ident">EQ</span>, <span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa, <span class="ident">A</span> item)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if item in the structure</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-contains_EQ_FOLD_F_A_F__fa__A__item_"><div class="section_title">SOURCE</div><div class="code">
            foreach(var x in toSeq&lt;FOLD, F, A&gt;(fa))
            {
                if (equals&lt;EQ, A&gt;(x, item)) return true;
            }
            return false;
        </div></div></div><div class="member-title"><a name="cos&lt;FLOAT, A>"></a>cos&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-cos_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates the cosine of an angle. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">An angle, in radians</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">cos</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;cos(x)&lt;/c&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-cos_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Cos(x)</div></div></div><div class="member-title"><a name="cosh&lt;FLOAT, A>"></a>cosh&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-cosh_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates a hyperbolic cosine. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which a hyperbolic cosine is to be calculated</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">cosh</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;cosh(x)&lt;/c&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-cosh_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Cosh(x)</div></div></div><div class="member-title"><a name="count&lt;FOLD, F, A>"></a>count&lt;FOLD, F, A&gt;(F)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-count_FOLD_F_A_F__fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the length of a foldable structure  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">count</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >True if empty, False otherwise</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-count_FOLD_F_A_F__fa_"><div class="section_title">SOURCE</div><div class="code">
            default(FOLD).Fold(fa, 0, (s, _) =&gt; s + 1)(unit)</div></div></div><div class="member-title"><a name="divide&lt;NUM, A>"></a>divide&lt;NUM, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-divide_NUM_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide two numbers </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">left hand side of the division operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">right hand side of the division operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-divide_NUM_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Divide(x, y)</div></div></div><div class="member-title"><a name="equals&lt;EQ, A>"></a>equals&lt;EQ, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equals_EQ_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equals_EQ_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(x, y)</div></div></div><div class="member-title"><a name="equals&lt;EQ, A>"></a>equals&lt;EQ, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equals_EQ_A_Option_A_x__Option_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equals_EQ_A_Option_A_x__Option_A_y_"><div class="section_title">SOURCE</div><div class="code">
            EqOpt&lt;EQ, MOption&lt;A&gt;, Option&lt;A&gt;, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="equals&lt;EQ, A>"></a>equals&lt;EQ, A&gt;(OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equals_EQ_A_OptionUnsafe_A_x__OptionUnsafe_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equals_EQ_A_OptionUnsafe_A_x__OptionUnsafe_A_y_"><div class="section_title">SOURCE</div><div class="code">
            EqOpt&lt;EQ, MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="equals&lt;EQ, A>"></a>equals&lt;EQ, A&gt;(A?, A?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equals_EQ_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span>?</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span>?</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span>? x, <span class="ident">A</span>? y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">A</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-equals_EQ_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            EqOpt&lt;EQ, MNullable&lt;A&gt;, A?, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="equals&lt;EQ, A>"></a>equals&lt;EQ, A&gt;(Try&lt;A&gt;, Try&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equals_EQ_A_Try_A_x__Try_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equals_EQ_A_Try_A_x__Try_A_y_"><div class="section_title">SOURCE</div><div class="code">
            EqTry&lt;EQ, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="equals&lt;EQ, A>"></a>equals&lt;EQ, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equals_EQ_A_TryOption_A_x__TryOption_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equals_EQ_A_TryOption_A_x__TryOption_A_y_"><div class="section_title">SOURCE</div><div class="code">
            EqTryOpt&lt;EQ, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="equals&lt;EQ, A>"></a>equals&lt;EQ, A&gt;(Lst&lt;A&gt;, Lst&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equals_EQ_A_Lst_A_x__Lst_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equals_EQ_A_Lst_A_x__Lst_A_y_"><div class="section_title">SOURCE</div><div class="code">
            EqLst&lt;EQ, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="equals&lt;EQ, A>"></a>equals&lt;EQ, A&gt;(IEnumerable&lt;A&gt;, IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equals_EQ_A_IEnumerable_A_x__IEnumerable_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-equals_EQ_A_IEnumerable_A_x__IEnumerable_A_y_"><div class="section_title">SOURCE</div><div class="code">
            EqSeq&lt;EQ, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="Equals&lt;EQ, A>"></a>Equals&lt;EQ, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals_EQ_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Equals_EQ_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(EQ).Equals(x, y)</div></div></div><div class="member-title"><a name="Equals&lt;EQ, A>"></a>Equals&lt;EQ, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals_EQ_A_Option_A_x__Option_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Equals_EQ_A_Option_A_x__Option_A_y_"><div class="section_title">SOURCE</div><div class="code">
            EqOpt&lt;EQ, MOption&lt;A&gt;, Option&lt;A&gt;, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="Equals&lt;EQ, A>"></a>Equals&lt;EQ, A&gt;(OptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals_EQ_A_OptionUnsafe_A_x__OptionUnsafe_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Equals_EQ_A_OptionUnsafe_A_x__OptionUnsafe_A_y_"><div class="section_title">SOURCE</div><div class="code">
            EqOpt&lt;EQ, MOptionUnsafe&lt;A&gt;, OptionUnsafe&lt;A&gt;, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="Equals&lt;EQ, A>"></a>Equals&lt;EQ, A&gt;(A?, A?)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals_EQ_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span>?</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span>?</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">A</span>? x, <span class="ident">A</span>? y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">A</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-Equals_EQ_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            EqOpt&lt;EQ, MNullable&lt;A&gt;, A?, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="Equals&lt;EQ, A>"></a>Equals&lt;EQ, A&gt;(Try&lt;A&gt;, Try&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals_EQ_A_Try_A_x__Try_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Equals_EQ_A_Try_A_x__Try_A_y_"><div class="section_title">SOURCE</div><div class="code">
            EqTry&lt;EQ, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="Equals&lt;EQ, A>"></a>Equals&lt;EQ, A&gt;(TryOption&lt;A&gt;, TryOption&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals_EQ_A_TryOption_A_x__TryOption_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Equals_EQ_A_TryOption_A_x__TryOption_A_y_"><div class="section_title">SOURCE</div><div class="code">
            EqTryOpt&lt;EQ, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="Equals&lt;EQ, A>"></a>Equals&lt;EQ, A&gt;(Lst&lt;A&gt;, Lst&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals_EQ_A_Lst_A_x__Lst_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Equals_EQ_A_Lst_A_x__Lst_A_y_"><div class="section_title">SOURCE</div><div class="code">
            EqLst&lt;EQ, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="Equals&lt;EQ, A>"></a>Equals&lt;EQ, A&gt;(IEnumerable&lt;A&gt;, IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals_EQ_A_IEnumerable_A_x__IEnumerable_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Equals</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Equals_EQ_A_IEnumerable_A_x__IEnumerable_A_y_"><div class="section_title">SOURCE</div><div class="code">
            EqSeq&lt;EQ, A&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="Equals&lt;EQA, EQB, A, B>"></a>Equals&lt;EQA, EQB, A, B&gt;(Either&lt;A, B&gt;, Either&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Equals_EQA_EQB_A_B_Either_A_B_x__Either_A_B_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Either</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">Equals</span>&lt;<span class="ident">EQA</span>, <span class="ident">EQB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Either</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; x, <span class="ident">Either</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQA</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">EQB</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-Equals_EQA_EQB_A_B_Either_A_B_x__Either_A_B_y_"><div class="section_title">SOURCE</div><div class="code">
            EqChoice&lt;EQA, EQB, MEither&lt;A, B&gt;, Either&lt;A, B&gt;, A, B&gt;.Inst.Equals(x, y)</div></div></div><div class="member-title"><a name="equals&lt;NEWTYPE, EQ, A, PRED>"></a>equals&lt;NEWTYPE, EQ, A, PRED&gt;(NewType&lt;NEWTYPE, A, PRED&gt;, NewType&lt;NEWTYPE, A, PRED&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-equals_NEWTYPE_EQ_A_PRED_NewType_NEWTYPE_A_PRED_x__NewType_NEWTYPE_A_PRED_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Structural equality test </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc">The left hand side of the equality operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div class="arg-desc">The right hand side of the equality operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">equals</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">EQ</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;(<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; x, <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x and y are equal</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">PRED</span> : <span class="keyword">struct</span> <span class="ident">Pred</span>&lt;<span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NEWTYPE</span> : <span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;</div></div><div style="display:none" id="code-equals_NEWTYPE_EQ_A_PRED_NewType_NEWTYPE_A_PRED_x__NewType_NEWTYPE_A_PRED_y_"><div class="section_title">SOURCE</div><div class="code">
            !ReferenceEquals(x, y) || ReferenceEquals(x, null) || ReferenceEquals(y, null) 
                ? false 
                : default(EQ).Equals((A)x, (A)y)</div></div></div><div class="member-title"><a name="exists&lt;FOLD, F, A>"></a>exists&lt;FOLD, F, A&gt;(F, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exists_FOLD_F_A_F__fa__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Runs a predicate against the bound value(s).  If the predicate returns true for any item then the operation immediately returns true.  False is returned if no items in the structure match the predicate.<br/><br/> NOTE: An empty structure will return false. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">exists</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate holds for all values</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-exists_FOLD_F_A_F__fa__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in toSeq&lt;FOLD, F, A&gt;(fa))
            {
                if (pred(item)) return true;
            }
            return false;
        </div></div></div><div class="member-title"><a name="exp&lt;FLOAT, A>"></a>exp&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-exp_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The exponential function. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which we are calculating the exponential</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">exp</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;e^x&lt;/c&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-exp_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Exp(x)</div></div></div><div class="member-title"><a name="fail&lt;MONAD, MA, A>"></a>fail&lt;MONAD, MA, A&gt;(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fail_MONAD_MA_A_Exception__err_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Produce a failure value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">err</div><div class="arg-type"><span class="ident">Exception</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MA</span> <span class="ident">fail</span>&lt;<span class="ident">MONAD</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;(<span class="ident">Exception</span> err = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MONAD</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-fail_MONAD_MA_A_Exception__err_"><div class="section_title">SOURCE</div><div class="code">
            default(MONAD).Fail(err)</div></div></div><div class="member-title"><a name="filter&lt;MPLUS, MA, A>"></a>filter&lt;MPLUS, MA, A&gt;(MA, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-filter_MPLUS_MA_A_MA__ma__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Filters the monad if the predicate doesn&#39;t hold </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">MA</span></div></div><div class="arg-desc">The monads filter</div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MA</span> <span class="ident">filter</span>&lt;<span class="ident">MPLUS</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;(<span class="ident">MA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"><span >The filtered (or not) monad</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MPLUS</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-filter_MPLUS_MA_A_MA__ma__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            default(MPLUS).Bind&lt;MPLUS, MA, A&gt;(ma,
                x =&gt; pred(x)
                    ? ma
                    : mzero&lt;MPLUS, MA, A&gt;())</div></div></div><div class="member-title"><a name="fold&lt;FOLD, F, A, S>"></a>fold&lt;FOLD, F, A, S&gt;(F, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fold_FOLD_F_A_S_F__fa__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >In the case of lists, &#39;Fold&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right:<br/><br/> Fold([x1, x2, ..., xn] == x1 `f` (x2 `f` ... (xn `f` z)...)<br/><br/> Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &#39;Fold&#39; can produce a terminating expression from an infinite list. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Folder function, applied for each item in fa</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">fold</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="ident">F</span> fa, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-fold_FOLD_F_A_S_F__fa__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            default(FOLD).Fold(fa, state, f)(unit)</div></div></div><div class="member-title"><a name="foldBack&lt;FOLD, F, A, S>"></a>foldBack&lt;FOLD, F, A, S&gt;(F, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-foldBack_FOLD_F_A_S_F__fa__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >In the case of lists, &#39;FoldBack&#39;, when applied to a binary operator, a starting value(typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right:<br/><br/> FoldBack( [x1, x2, ..., xn]) == (...((z `f` x1) `f` x2) `f`...) `f` xn<br/><br/> Note that to produce the outermost application of the operator the entire input list must be traversed.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc">Initial state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc">Folder function, applied for each item in fa</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">foldBack</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="ident">F</span> fa, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >The aggregate state</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-foldBack_FOLD_F_A_S_F__fa__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            default(FOLD).FoldBack(fa, state, f)(unit)</div></div></div><div class="member-title"><a name="forall&lt;FOLD, F, A>"></a>forall&lt;FOLD, F, A&gt;(F, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-forall_FOLD_F_A_F__fa__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Runs a predicate against the bound value(s).  If the predicate holds for all values then true is returned.  <br/><br/> NOTE: An empty structure will return true. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc">Predicate to apply</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">forall</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if the predicate holds for all values</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-forall_FOLD_F_A_F__fa__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
            foreach(var item in toSeq&lt;FOLD, F, A&gt;(fa))
            {
                if (!pred(item)) return false;
            }
            return true;
        </div></div></div><div class="member-title"><a name="fromDecimal&lt;NUM, A>"></a>fromDecimal&lt;NUM, A&gt;(decimal)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fromDecimal_NUM_A_decimal__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Generate a numeric value from a float </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="keyword">decimal</span></div></div><div class="arg-desc">The float to use</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">fromDecimal</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">decimal</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The equivalent of x in the Num&lt;A&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-fromDecimal_NUM_A_decimal__x_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).FromDecimal(x)</div></div></div><div class="member-title"><a name="fromDouble&lt;NUM, A>"></a>fromDouble&lt;NUM, A&gt;(double)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fromDouble_NUM_A_double__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Generate a numeric value from a decimal </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="keyword">double</span></div></div><div class="arg-desc">The decimal to use</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">fromDouble</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">double</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The equivalent of x in the Num&lt;A&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-fromDouble_NUM_A_double__x_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).FromDouble(x)</div></div></div><div class="member-title"><a name="fromFloat&lt;NUM, A>"></a>fromFloat&lt;NUM, A&gt;(float)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fromFloat_NUM_A_float__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Generate a numeric value from a double </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="keyword">float</span></div></div><div class="arg-desc">The double to use</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">fromFloat</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">float</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The equivalent of x in the Num&lt;A&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-fromFloat_NUM_A_float__x_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).FromFloat(x)</div></div></div><div class="member-title"><a name="fromInteger&lt;NUM, A>"></a>fromInteger&lt;NUM, A&gt;(int)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fromInteger_NUM_A_int__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Generate a numeric value from an integer </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="keyword">int</span></div></div><div class="arg-desc">The integer to use</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">fromInteger</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">int</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The equivalent of x in the Num&lt;A&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-fromInteger_NUM_A_int__x_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).FromInteger(x)</div></div></div><div class="member-title"><a name="fromRational&lt;FRACTION, A>"></a>fromRational&lt;FRACTION, A&gt;(Ratio&lt;int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-fromRational_FRACTION_A_Ratio_int_x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Generates a fractional value from an integer ratio. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Ratio</span>&lt;<span class="keyword">int</span>&gt;</div></div><div class="arg-desc">The ratio to convert</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">fromRational</span>&lt;<span class="ident">FRACTION</span>, <span class="ident">A</span>&gt;(<span class="ident">Ratio</span>&lt;<span class="keyword">int</span>&gt; x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The equivalent of x in the implementing type.</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FRACTION</span> : <span class="keyword">struct</span> <span class="ident">Fraction</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-fromRational_FRACTION_A_Ratio_int_x_"><div class="section_title">SOURCE</div><div class="code">
            default(FRACTION).FromRational(x)</div></div></div><div class="member-title"><a name="greaterOrEq&lt;ORD, A>"></a>greaterOrEq&lt;ORD, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-greaterOrEq_ORD_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if x is greater than or equal to y </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">greaterOrEq</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x is greater than or equal to y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-greaterOrEq_ORD_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(ORD).Compare(x, y) &gt;= 0</div></div></div><div class="member-title"><a name="greaterThan&lt;ORD, A>"></a>greaterThan&lt;ORD, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-greaterThan_ORD_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if x is greater than y </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">greaterThan</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x is greater than y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-greaterThan_ORD_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(ORD).Compare(x, y) &gt;0</div></div></div><div class="member-title"><a name="hashCode&lt;CHOICE, CH, A, B>"></a>hashCode&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-hashCode_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">hashCode</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-hashCode_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: a =&gt; a?.GetHashCode() ?? 0,
                Choice2: b =&gt; b?.GetHashCode() ?? 0,
                Bottom: () =&gt; -1
                )</div></div></div><div class="member-title"><a name="head&lt;FOLD, F, A>"></a>head&lt;FOLD, F, A&gt;(F)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-head_FOLD_F_A_F__fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the first item in a foldable structure </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">head</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >First A produced by the foldable</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-head_FOLD_F_A_F__fa_"><div class="section_title">SOURCE</div><div class="code">
            toSeq&lt;FOLD, F, A&gt;(fa).Head()</div></div></div><div class="member-title"><a name="headOrNone&lt;FOLD, F, A>"></a>headOrNone&lt;FOLD, F, A&gt;(F)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-headOrNone_FOLD_F_A_F__fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the first item in a foldable structure </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">headOrNone</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >First A produced by the foldable (Or None if no items produced)</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-headOrNone_FOLD_F_A_F__fa_"><div class="section_title">SOURCE</div><div class="code">
            toSeq&lt;FOLD, F, A&gt;(fa).HeadOrNone()</div></div></div><div class="member-title"><a name="ifChoice1&lt;CHOICE, CH, A, B>"></a>ifChoice1&lt;CHOICE, CH, A, B&gt;(CH, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifChoice1_CHOICE_CH_A_B_CH__ma__Func_B_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">B</span> <span class="ident">ifChoice1</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">B</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-ifChoice1_CHOICE_CH_A_B_CH__ma__Func_B_Left_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: _ =&gt; Left(),
                Choice2: identity)</div></div></div><div class="member-title"><a name="ifChoice1&lt;CHOICE, CH, A, B>"></a>ifChoice1&lt;CHOICE, CH, A, B&gt;(CH, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifChoice1_CHOICE_CH_A_B_CH__ma__Func_A_B_leftMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">leftMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">B</span> <span class="ident">ifChoice1</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; leftMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">B</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-ifChoice1_CHOICE_CH_A_B_CH__ma__Func_A_B_leftMap_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: leftMap,
                Choice2: identity)</div></div></div><div class="member-title"><a name="ifChoice1&lt;CHOICE, CH, A, B>"></a>ifChoice1&lt;CHOICE, CH, A, B&gt;(CH, B)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifChoice1_CHOICE_CH_A_B_CH__ma__B__rightValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rightValue</div><div class="arg-type"><span class="ident">B</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">B</span> <span class="ident">ifChoice1</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">B</span> rightValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">B</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-ifChoice1_CHOICE_CH_A_B_CH__ma__B__rightValue_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: _ =&gt; rightValue,
                Choice2: identity)</div></div></div><div class="member-title"><a name="ifChoice1&lt;CHOICE, CH, A, B>"></a>ifChoice1&lt;CHOICE, CH, A, B&gt;(CH, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifChoice1_CHOICE_CH_A_B_CH__ma__Action_A_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifChoice1</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Left)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-ifChoice1_CHOICE_CH_A_B_CH__ma__Action_A_Left_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: a =&gt; { Left(a); return unit; },
                Choice2: a =&gt; { return unit; },
                Bottom: () =&gt; { return unit; })</div></div></div><div class="member-title"><a name="ifChoice2&lt;CHOICE, CH, A, B>"></a>ifChoice2&lt;CHOICE, CH, A, B&gt;(CH, Action&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifChoice2_CHOICE_CH_A_B_CH__ma__Action_B_Right_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifChoice2</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">Action</span>&lt;<span class="ident">B</span>&gt; Right)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-ifChoice2_CHOICE_CH_A_B_CH__ma__Action_B_Right_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: a =&gt; { return unit; },
                Choice2: b =&gt; { Right(b); return unit; },
                Bottom: () =&gt; { return unit; })</div></div></div><div class="member-title"><a name="ifChoice2&lt;CHOICE, CH, A, B>"></a>ifChoice2&lt;CHOICE, CH, A, B&gt;(CH, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifChoice2_CHOICE_CH_A_B_CH__ma__A__leftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the leftValue if the Either is in a Right state. Returns the Left value if the Either is in a Left state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">leftValue</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Value to return if in the Left state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">ifChoice2</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">A</span> leftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Returns an unwrapped Left value</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-ifChoice2_CHOICE_CH_A_B_CH__ma__A__leftValue_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: identity,
                Choice2: _ =&gt; leftValue)</div></div></div><div class="member-title"><a name="ifChoice2&lt;CHOICE, CH, A, B>"></a>ifChoice2&lt;CHOICE, CH, A, B&gt;(CH, Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifChoice2_CHOICE_CH_A_B_CH__ma__Func_A_Right_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of Right() if the Either is in a Right state. Returns the Left value if the Either is in a Left state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Right</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Function to generate a Left value if in the Right state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">ifChoice2</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; Right)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Returns an unwrapped Left value</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-ifChoice2_CHOICE_CH_A_B_CH__ma__Func_A_Right_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: identity,
                Choice2: _ =&gt; Right())</div></div></div><div class="member-title"><a name="ifChoice2&lt;CHOICE, CH, A, B>"></a>ifChoice2&lt;CHOICE, CH, A, B&gt;(CH, Func&lt;B, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifChoice2_CHOICE_CH_A_B_CH__ma__Func_B_A_rightMap_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of rightMap if the Either is in a Right state. Returns the Left value if the Either is in a Left state. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rightMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">A</span>&gt;</div></div><div class="arg-desc">Function to generate a Left value if in the Right state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">ifChoice2</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">A</span>&gt; rightMap)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Returns an unwrapped Left value</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-ifChoice2_CHOICE_CH_A_B_CH__ma__Func_B_A_rightMap_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: identity,
                Choice2: rightMap)</div></div></div><div class="member-title"><a name="ifNone&lt;OPT, OA, A>"></a>ifNone&lt;OPT, OA, A&gt;(OA, Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNone_OPT_OA_A_OA__opt__Func_A_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Operation to invoke if the structure is in a None state</div></div><div class="section_title">REMARKS</div><span >Will not accept a null return value from the None operation</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">ifNone</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> opt, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Tesult of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned.</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ifNone_OPT_OA_A_OA__opt__Func_A_None_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).Match(opt, identity, None)</div></div></div><div class="member-title"><a name="ifNone&lt;OPT, OA, A>"></a>ifNone&lt;OPT, OA, A&gt;(OA, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNone_OPT_OA_A_OA__opt__A__noneValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Value to return if in a None state</div></div><div class="section_title">REMARKS</div><span >Will not accept a null noneValue</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">ifNone</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> opt, <span class="ident">A</span> noneValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ifNone_OPT_OA_A_OA__opt__A__noneValue_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).Match(opt, identity, () =&gt; noneValue)</div></div></div><div class="member-title"><a name="ifNoneUnsafe&lt;OPT, OA, A>"></a>ifNoneUnsafe&lt;OPT, OA, A&gt;(OA, Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNoneUnsafe_OPT_OA_A_OA__opt__Func_A_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the result of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">Operation to invoke if the structure is in a None state</div></div><div class="section_title">REMARKS</div><span >Will allow null the be returned from the None operation</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">ifNoneUnsafe</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> opt, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Tesult of invoking the None() operation if the optional  is in a None state, otherwise the bound Some(x) value is returned.</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ifNoneUnsafe_OPT_OA_A_OA__opt__Func_A_None_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).MatchUnsafe(opt, identity, None)</div></div></div><div class="member-title"><a name="ifNoneUnsafe&lt;OPT, OA, A>"></a>ifNoneUnsafe&lt;OPT, OA, A&gt;(OA, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifNoneUnsafe_OPT_OA_A_OA__opt__A__noneValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">noneValue</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Value to return if in a None state</div></div><div class="section_title">REMARKS</div><span >Will allow noneValue to be null</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">ifNoneUnsafe</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> opt, <span class="ident">A</span> noneValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >noneValue if the optional is in a None state, otherwise the bound Some(x) value is returned</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ifNoneUnsafe_OPT_OA_A_OA__opt__A__noneValue_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).MatchUnsafe(opt, identity, () =&gt; noneValue)</div></div></div><div class="member-title"><a name="ifSome&lt;OPT, OA, A>"></a>ifSome&lt;OPT, OA, A&gt;(OA, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifSome_OPT_OA_A_OA__opt__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the f action if Option is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifSome</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> opt, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ifSome_OPT_OA_A_OA__opt__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).Match(opt, f, noneIgnore)</div></div></div><div class="member-title"><a name="ifSome&lt;OPT, OA, A>"></a>ifSome&lt;OPT, OA, A&gt;(OA, Func&lt;A, Unit&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ifSome_OPT_OA_A_OA__opt__Func_A_Unit_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes the f function if Option is in the Some state, otherwise nothing happens. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Unit</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">ifSome</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> opt, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Unit</span>&gt; f)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-ifSome_OPT_OA_A_OA__opt__Func_A_Unit_f_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).Match(opt, f, noneIgnoreF)</div></div></div><div class="member-title"><a name="isEmpty&lt;FOLD, F, A>"></a>isEmpty&lt;FOLD, F, A&gt;(F)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-isEmpty_FOLD_F_A_F__fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests whether the foldable structure is empty </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">isEmpty</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if empty, False otherwise</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-isEmpty_FOLD_F_A_F__fa_"><div class="section_title">SOURCE</div><div class="code">
            !toSeq&lt;FOLD, F, A&gt;(fa).Any()</div></div></div><div class="member-title"><a name="iter&lt;FOLD, F, A>"></a>iter&lt;FOLD, F, A&gt;(F, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-iter_FOLD_F_A_F__fa__Action_A_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Iterate the values in the foldable </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">iter</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; action)</div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-iter_FOLD_F_A_F__fa__Action_A_action_"><div class="section_title">SOURCE</div><div class="code">
            foreach (var item in toSeq&lt;FOLD, F, A&gt;(fa))
            {
                action(item);
            }
            return unit;
        </div></div></div><div class="member-title"><a name="join&lt;EQ, MONADA, MONADB, MONADD, MA, MB, MD, A, B, C, D>"></a>join&lt;EQ, MONADA, MONADB, MONADD, MA, MB, MD, A, B, C, D&gt;(MA, MB, Func&lt;A, C&gt;, Func&lt;B, C&gt;, Func&lt;A, B, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-join_EQ_MONADA_MONADB_MONADD_MA_MB_MD_A_B_C_D_MA__self__MB__inner__Func_A_C_outerKeyMap__Func_B_C_innerKeyMap__Func_A_B_D_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monad join </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">MA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">inner</div><div class="arg-type"><span class="ident">MB</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">outerKeyMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">innerKeyMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MD</span> <span class="ident">join</span>&lt;<span class="ident">EQ</span>, <span class="ident">MONADA</span>, <span class="ident">MONADB</span>, <span class="ident">MONADD</span>, <span class="ident">MA</span>, <span class="ident">MB</span>, <span class="ident">MD</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="ident">MA</span> self, <span class="ident">MB</span> inner, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt; outerKeyMap, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt; innerKeyMap, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">D</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MD</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">C</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MONADA</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MA</span>, <span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MONADB</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MB</span>, <span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MONADD</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MD</span>, <span class="ident">D</span>&gt;</div></div><div style="display:none" id="code-join_EQ_MONADA_MONADB_MONADD_MA_MB_MD_A_B_C_D_MA__self__MB__inner__Func_A_C_outerKeyMap__Func_B_C_innerKeyMap__Func_A_B_D_project_"><div class="section_title">SOURCE</div><div class="code">
                default(MONADA).Bind&lt;MONADD, MD, D&gt;(self,  x =&gt;
                default(MONADB).Bind&lt;MONADD, MD, D&gt;(inner, y =&gt;
                    default(EQ).Equals(outerKeyMap(x), innerKeyMap(y))
                        ? default(MONADD).Return(_ =&gt; project(x, y))
                        : default(MONADD).Fail()))</div></div></div><div class="member-title"><a name="last&lt;FOLD, F, A>"></a>last&lt;FOLD, F, A&gt;(F)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-last_FOLD_F_A_F__fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the last item in a foldable structure </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">last</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Last A produced by the foldable</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-last_FOLD_F_A_F__fa_"><div class="section_title">SOURCE</div><div class="code">
            toSeq&lt;FOLD, F, A&gt;(fa).Last()</div></div></div><div class="member-title"><a name="lastOrNone&lt;FOLD, F, A>"></a>lastOrNone&lt;FOLD, F, A&gt;(F)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-lastOrNone_FOLD_F_A_F__fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the last item in a foldable structure </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">lastOrNone</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Last A produced by the foldable (Or None if no items produced)</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-lastOrNone_FOLD_F_A_F__fa_"><div class="section_title">SOURCE</div><div class="code">
            toSeq&lt;FOLD, F, A&gt;(fa)
                .Map(x =&gt; Prelude.Some(x))
                .DefaultIfEmpty(Option&lt;A&gt;.None)
                .LastOrDefault()</div></div></div><div class="member-title"><a name="lessOrEq&lt;ORD, A>"></a>lessOrEq&lt;ORD, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-lessOrEq_ORD_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if x is less than or equal to y </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">lessOrEq</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x is less than or equal to y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-lessOrEq_ORD_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(ORD).Compare(x, y) &lt;= 0</div></div></div><div class="member-title"><a name="lessThan&lt;ORD, A>"></a>lessThan&lt;ORD, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-lessThan_ORD_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns true if x is less than y </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The first item to compare</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The second item to compare</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="ident">lessThan</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">bool</span></div><div class="normal"><span >True if x is less than y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-lessThan_ORD_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(ORD).Compare(x, y) &lt; 0</div></div></div><div class="member-title"><a name="liftM&lt;MONAD, FUNCTOR, MA, MB, A, B>"></a>liftM&lt;MONAD, FUNCTOR, MA, MB, A, B&gt;(MA, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-liftM_MONAD_FUNCTOR_MA_MB_A_B_MA__ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Performs a map operation on the monad </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">MA</span></div></div><div class="arg-desc">Monad to map</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Mapping operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MB</span> <span class="ident">liftM</span>&lt;<span class="ident">MONAD</span>, <span class="ident">FUNCTOR</span>, <span class="ident">MA</span>, <span class="ident">MB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">MA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MB</span></div><div class="normal"><span >Mapped monad</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FUNCTOR</span> : <span class="keyword">struct</span> <span class="ident">Functor</span>&lt;<span class="ident">MA</span>, <span class="ident">MB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MONAD</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-liftM_MONAD_FUNCTOR_MA_MB_A_B_MA__ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            default(FUNCTOR).Map(ma, f)</div></div></div><div class="member-title"><a name="log&lt;FLOAT, A>"></a>log&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-log_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates the natural logarithm of a value. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which we are calculating the natural logarithm. </div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">log</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;ln(x)&lt;/c&gt;.</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-log_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Log(x)</div></div></div><div class="member-title"><a name="logBase&lt;FLOAT, A>"></a>logBase&lt;FLOAT, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-logBase_FLOAT_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates the logarithm of a value with respect to an arbitrary base. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which we are calculating the logarithm.</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">logBase</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;log b (x)&lt;/c&gt;.</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-logBase_FLOAT_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).LogBase(x, y)</div></div></div><div class="member-title"><a name="map&lt;FunctorAB, FA, FB, A, B>"></a>map&lt;FunctorAB, FA, FB, A, B&gt;(FA, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-map_FunctorAB_FA_FB_A_B_FA__ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">FA</span></div></div><div class="arg-desc">Functor value to map from </div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">Projection function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">FB</span> <span class="ident">map</span>&lt;<span class="ident">FunctorAB</span>, <span class="ident">FA</span>, <span class="ident">FB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">FA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">FB</span></div><div class="normal"><span >Mapped functor</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FunctorAB</span> : <span class="ident">Functor</span>&lt;<span class="ident">FA</span>, <span class="ident">FB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-map_FunctorAB_FA_FB_A_B_FA__ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            default(FunctorAB).Map(ma, f)</div></div></div><div class="member-title"><a name="matchAsync&lt;CHOICE, CH, A, B, R>"></a>matchAsync&lt;CHOICE, CH, A, B, R&gt;(CH, Func&lt;A, R&gt;, Func&lt;B, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchAsync_CHOICE_CH_A_B_R_CH__ma__Func_A_R_Choice1__Func_B_Task&lt;R>_Choice2_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Choice1</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Choice2</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchAsync</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Choice1, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Choice2)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-matchAsync_CHOICE_CH_A_B_R_CH__ma__Func_A_R_Choice1__Func_B_Task&lt;R>_Choice2_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: a =&gt; Task.FromResult(Choice1(a)),
                Choice2: b =&gt; Choice2(b))</div></div></div><div class="member-title"><a name="matchAsync&lt;CHOICE, CH, A, B, R>"></a>matchAsync&lt;CHOICE, CH, A, B, R&gt;(CH, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;B, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchAsync_CHOICE_CH_A_B_R_CH__ma__Func_A_Task&lt;R>_Choice1__Func_B_Task&lt;R>_Choice2_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Choice1</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Choice2</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchAsync</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Choice1, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Choice2)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-matchAsync_CHOICE_CH_A_B_R_CH__ma__Func_A_Task&lt;R>_Choice1__Func_B_Task&lt;R>_Choice2_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma, 
                Choice1: a =&gt; Choice1(a),
                Choice2: b =&gt; Choice2(b))</div></div></div><div class="member-title"><a name="matchObservable&lt;CHOICE, CH, A, B, R>"></a>matchObservable&lt;CHOICE, CH, A, B, R&gt;(CH, Func&lt;A, R&gt;, Func&lt;B, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchObservable_CHOICE_CH_A_B_R_CH__ma__Func_A_R_Choice1__Func_B_IObservable&lt;R>_Choice2_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Choice1</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Choice2</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchObservable</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Choice1, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Choice2)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-matchObservable_CHOICE_CH_A_B_R_CH__ma__Func_A_R_Choice1__Func_B_IObservable&lt;R>_Choice2_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: a =&gt; Observable.Return(Choice1(a)),
                Choice2: b =&gt; Choice2(b))</div></div></div><div class="member-title"><a name="matchObservable&lt;CHOICE, CH, A, B, R>"></a>matchObservable&lt;CHOICE, CH, A, B, R&gt;(CH, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;B, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchObservable_CHOICE_CH_A_B_R_CH__ma__Func_A_IObservable&lt;R>_Choice1__Func_B_IObservable&lt;R>_Choice2_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Choice1</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Choice2</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">matchObservable</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Choice1, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Choice2)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-matchObservable_CHOICE_CH_A_B_R_CH__ma__Func_A_IObservable&lt;R>_Choice1__Func_B_IObservable&lt;R>_Choice2_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: a =&gt; Choice1(a),
                Choice2: b =&gt; Choice2(b))</div></div></div><div class="member-title"><a name="matchUntyped&lt;CHOICE, CH, A, B, R>"></a>matchUntyped&lt;CHOICE, CH, A, B, R&gt;(CH, Func&lt;object, R&gt;, Func&lt;object, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchUntyped_CHOICE_CH_A_B_R_CH__ma__Func_object_R_Choice1__Func_object_R_Choice2__Func_R_Bottom_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match operation with an untyped value for Some. This can be useful for serialisation and dealing with the IOptional interface </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Choice1</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Choice2</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Bottom</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">matchUntyped</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="ident">CH</span> ma, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt; Choice1, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt; Choice2, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Bottom = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >The result of the match operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-matchUntyped_CHOICE_CH_A_B_R_CH__ma__Func_object_R_Choice1__Func_object_R_Choice2__Func_R_Bottom_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: x =&gt; Choice1(x),
                Choice2: y =&gt; Choice2(y),
                Bottom: Bottom)</div></div></div><div class="member-title"><a name="matchUntyped&lt;OPT, OA, A, R>"></a>matchUntyped&lt;OPT, OA, A, R&gt;(OA, Func&lt;object, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-matchUntyped_OPT_OA_A_R_OA__ma__Func_object_R_Some__Func_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match operation with an untyped value for Some. This can be useful for serialisation and dealing with the IOptional interface </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Operation to perform if the option is in a Some state</div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc">Operation to perform if the option is in a None state</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">R</span> <span class="ident">matchUntyped</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="ident">OA</span> ma, <span class="ident">Func</span>&lt;<span class="keyword">object</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">R</span></div><div class="normal"><span >The result of the match operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-matchUntyped_OPT_OA_A_R_OA__ma__Func_object_R_Some__Func_R_None_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).Match( ma,
                Some: x =&gt; Some(x),
                None: () =&gt; None()
            )</div></div></div><div class="member-title"><a name="mconcat&lt;MONOID, A>"></a>mconcat&lt;MONOID, A&gt;(IEnumerable&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mconcat_MONOID_A_IEnumerable_A_xs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold a list using the monoid. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">xs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">mconcat</span>&lt;<span class="ident">MONOID</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; xs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MONOID</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-mconcat_MONOID_A_IEnumerable_A_xs_"><div class="section_title">SOURCE</div><div class="code">
            xs.Fold(mempty&lt;MONOID, A&gt;(), (s, x) =&gt; append&lt;MONOID, A&gt;(s, x))</div></div></div><div class="member-title"><a name="mconcat&lt;MONOID, A>"></a>mconcat&lt;MONOID, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mconcat_MONOID_A_A__xs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fold a list using the monoid. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">xs</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">mconcat</span>&lt;<span class="ident">MONOID</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> xs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MONOID</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-mconcat_MONOID_A_A__xs_"><div class="section_title">SOURCE</div><div class="code">
            xs.Fold(mempty&lt;MONOID, A&gt;(), (s, x) =&gt; append&lt;MONOID, A&gt;(s, x))</div></div></div><div class="member-title"><a name="mempty&lt;MONOID, A>"></a>mempty&lt;MONOID, A&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mempty_MONOID_A_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">mempty</span>&lt;<span class="ident">MONOID</span>, <span class="ident">A</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MONOID</span> : <span class="keyword">struct</span> <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-mempty_MONOID_A_"><div class="section_title">SOURCE</div><div class="code">
            default(MONOID).Empty()</div></div></div><div class="member-title"><a name="mplus&lt;MPLUS, MA, A>"></a>mplus&lt;MPLUS, MA, A&gt;(MA, MA)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mplus_MPLUS_MA_A_MA__x__MA__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return monad x &#39;plus&#39; monad y<br/><br/> Note, this doesn&#39;t add the bound values, it works on the monad state itself.  <br/><br/> For example with Option:<br/><br/><div class='code-line'>     None   &#39;plus&#39; None   = None</div><div class='code-line'>     Some a &#39;plus&#39; None   = Some a</div><div class='code-line'>     None   &#39;plus&#39; Some b = Some b</div><div class='code-line'>     Some a &#39;plus&#39; Some b = Some a</div><br/><br/> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">MA</span></div></div><div class="arg-desc">Left hand side of the operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">MA</span></div></div><div class="arg-desc">Right hand side of the operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MA</span> <span class="ident">mplus</span>&lt;<span class="ident">MPLUS</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;(<span class="ident">MA</span> x, <span class="ident">MA</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"><span >x &#39;plus&#39; y </span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MPLUS</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-mplus_MPLUS_MA_A_MA__x__MA__y_"><div class="section_title">SOURCE</div><div class="code">
            default(MPLUS).Plus(x, y)</div></div></div><div class="member-title"><a name="msum&lt;MPLUS, MA, A>"></a>msum&lt;MPLUS, MA, A&gt;(MA)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-msum_MPLUS_MA_A_MA__xs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Performs the following fold operation: fold(xs, mzero, mplus) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">xs</div><div class="arg-type"><span class="ident">MA</span></div></div><div class="arg-desc">The monads to sum</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MA</span> <span class="ident">msum</span>&lt;<span class="ident">MPLUS</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;(<span class="ident">MA</span> xs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"><span >The summed monads</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MPLUS</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-msum_MPLUS_MA_A_MA__xs_"><div class="section_title">SOURCE</div><div class="code">
            xs.Fold(mzero&lt;MPLUS, MA, A&gt;(), (s, x) =&gt; mplus&lt;MPLUS, MA, A&gt;(s, x))</div></div></div><div class="member-title"><a name="msum&lt;MPLUS, MA, A>"></a>msum&lt;MPLUS, MA, A&gt;(IEnumerable&lt;MA&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-msum_MPLUS_MA_A_IEnumerable_MA_xs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Performs the following fold operation: fold(xs, mzero, mplus) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">xs</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">MA</span>&gt;</div></div><div class="arg-desc">The monads to sum</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MA</span> <span class="ident">msum</span>&lt;<span class="ident">MPLUS</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">MA</span>&gt; xs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"><span >The summed monads</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MPLUS</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-msum_MPLUS_MA_A_IEnumerable_MA_xs_"><div class="section_title">SOURCE</div><div class="code">
            xs.Fold(mzero&lt;MPLUS, MA, A&gt;(), (s, x) =&gt; mplus&lt;MPLUS, MA, A&gt;(s, x))</div></div></div><div class="member-title"><a name="mzero&lt;MPLUS, MA, A>"></a>mzero&lt;MPLUS, MA, A&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-mzero_MPLUS_MA_A_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return monad &#39;zero&#39;.  None for Option, [] for Lst, ... </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MA</span> <span class="ident">mzero</span>&lt;<span class="ident">MPLUS</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"><span >Zero for the structure</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MPLUS</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-mzero_MPLUS_MA_A_"><div class="section_title">SOURCE</div><div class="code">
            default(MPLUS).Zero()</div></div></div><div class="member-title"><a name="negate&lt;NUM, A>"></a>negate&lt;NUM, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-negate_NUM_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Negate the value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Value to negate</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">negate</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The negated source value</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-negate_NUM_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Negate(x)</div></div></div><div class="member-title"><a name="partition&lt;CHOICE, CH, A, B>"></a>partition&lt;CHOICE, CH, A, B&gt;(IEnumerable&lt;CH&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-partition_CHOICE_CH_A_B_IEnumerable_CH_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partitions a list of &#39;Either&#39; into two lists. All the &#39;Left&#39; elements are extracted, in order, to the first component of the output.  Similarly the &#39;Right&#39; elements are extracted to the second component of the output. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">CH</span>&gt;</div></div><div class="arg-desc">Choice list</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Tuple</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;&gt; <span class="ident">partition</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">IEnumerable</span>&lt;<span class="ident">CH</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Tuple</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >A tuple containing the an enumerable of L and an enumerable of R</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-partition_CHOICE_CH_A_B_IEnumerable_CH_ma_"><div class="section_title">SOURCE</div><div class="code">
            Tuple(choice1s&lt;CHOICE, CH, A, B&gt;(ma), choice2s&lt;CHOICE, CH, A, B&gt;(ma))</div></div></div><div class="member-title"><a name="pi&lt;FLOAT, A>"></a>pi&lt;FLOAT, A&gt;()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-pi_FLOAT_A_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns an approximation of pi. </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">pi</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >A reasonable approximation of pi in this type</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-pi_FLOAT_A_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Pi()</div></div></div><div class="member-title"><a name="plus&lt;NUM, A>"></a>plus&lt;NUM, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-plus_NUM_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the sum of two numbers </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">left hand side of the addition operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">right hand side of the addition operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">plus</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The sum of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-plus_NUM_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Plus(x, y)</div></div></div><div class="member-title"><a name="pow&lt;FLOAT, A>"></a>pow&lt;FLOAT, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-pow_FLOAT_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Raises x to the power y </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The base to be raised to y</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The exponent to which we are raising x</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">pow</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;x^y&lt;/c&gt;.</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-pow_FLOAT_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Pow(x, y)</div></div></div><div class="member-title"><a name="product&lt;NUM, A>"></a>product&lt;NUM, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product of two numbers </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">left hand side of the product operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">right hand side of the product operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Product(x, y)</div></div></div><div class="member-title"><a name="product&lt;NUM, FOLD, F, A>"></a>product&lt;NUM, FOLD, F, A&gt;(F)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-product_NUM_FOLD_F_A_F__fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The &#39;product&#39; function computes the product of the numbers of a structure. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">product</span>&lt;<span class="ident">NUM</span>, <span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Product of the numbers in the structure</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-product_NUM_FOLD_F_A_F__fa_"><div class="section_title">SOURCE</div><div class="code">
                default(FOLD).Fold(fa, fromInteger&lt;NUM, A&gt;(1), (s, x) =&gt; product&lt;NUM, A&gt;(s, x))(unit)</div></div></div><div class="member-title"><a name="Ratio&lt;A>"></a>Ratio&lt;A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Ratio_A_A__num__A__den_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Ratio constructor </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">num</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Numerator</div></div><div class="arg"><div class="arg-header"><div class="arg-name">den</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">Denominator</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Ratio</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Ratio</span>&lt;<span class="ident">A</span>&gt;(<span class="ident">A</span> num, <span class="ident">A</span> den)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Ratio</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Ratio struct</span></div></div></div><div style="display:none" id="code-Ratio_A_A__num__A__den_"><div class="section_title">SOURCE</div><div class="code">
            new Ratio&lt;A&gt;(num, den)</div></div></div><div class="member-title"><a name="Return&lt;MONAD, MA, A>"></a>Return&lt;MONAD, MA, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Return_MONAD_MA_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monad return </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The bound monad value</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MA</span> <span class="ident">Return</span>&lt;<span class="ident">MONAD</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"><span >Monad of A</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MONAD</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Return_MONAD_MA_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(MONAD).Return(_ =&gt; x)</div></div></div><div class="member-title"><a name="SelectMany&lt;MONADA, MA, A, B, C>"></a>SelectMany&lt;MONADA, MA, A, B, C&gt;(MA, Func&lt;A, IEnumerable&lt;B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_MONADA_MA_A_B_C_MA__self__Func_A_IEnumerable&lt;B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">MA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">C</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">MONADA</span>, <span class="ident">MA</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">MA</span> self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MONADA</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-SelectMany_MONADA_MA_A_B_C_MA__self__Func_A_IEnumerable&lt;B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
            default(MONADA).Bind&lt;MSeq&lt;C&gt;, IEnumerable&lt;C&gt;, C&gt;(self, a =&gt;
                bind(a).Select(b =&gt; project(a, b)))</div></div></div><div class="member-title"><a name="SelectMany&lt;MONADA, MONADB, MONADC, MA, MB, MC, A, B, C>"></a>SelectMany&lt;MONADA, MONADB, MONADC, MA, MB, MC, A, B, C&gt;(MA, Func&lt;A, MB&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_MONADA_MONADB_MONADC_MA_MB_MC_A_B_C_MA__self__Func_A_MB_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind and project </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">MA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MC</span> <span class="ident">SelectMany</span>&lt;<span class="ident">MONADA</span>, <span class="ident">MONADB</span>, <span class="ident">MONADC</span>, <span class="ident">MA</span>, <span class="ident">MB</span>, <span class="ident">MC</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="ident">MA</span> self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MC</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MONADA</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MA</span>, <span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MONADB</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MB</span>, <span class="ident">B</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MONADC</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">MC</span>, <span class="ident">C</span>&gt;</div></div><div style="display:none" id="code-SelectMany_MONADA_MONADB_MONADC_MA_MB_MC_A_B_C_MA__self__Func_A_MB_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
                default(MONADA).Bind&lt;MONADC, MC, C&gt;( self,    t =&gt; 
                default(MONADB).Bind&lt;MONADC, MC, C&gt;( bind(t), u =&gt; 
                default(MONADC).Return(_ =&gt; project(t, u))))</div></div></div><div class="member-title"><a name="signum&lt;NUM, A>"></a>signum&lt;NUM, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-signum_NUM_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the sign of x </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value to find the sign of</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">signum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >-1, 0, or +1</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-signum_NUM_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Signum(x)</div></div></div><div class="member-title"><a name="sin&lt;FLOAT, A>"></a>sin&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sin_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates the sine of an angle. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">An angle, in radians</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sin</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;sin(x)&lt;/c&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sin_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Sin(x)</div></div></div><div class="member-title"><a name="sinh&lt;FLOAT, A>"></a>sinh&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sinh_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates a hyperbolic sine. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which a hyperbolic sine is to be calculated</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sinh</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;sinh(x)&lt;/c&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sinh_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Sinh(x)</div></div></div><div class="member-title"><a name="Some&lt;OPT, OA, A, B>"></a>Some&lt;OPT, OA, A, B&gt;(OA, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some_OPT_OA_A_B_OA__ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fluent pattern matching.  Provide a Some handler and then follow on fluently with .None(...) to complete the matching operation. This is for returning a value from the match operation, to dispatch an action instead, use Some&lt;A&gt;(...) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div><div class="arg-desc">Option to match</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc">The Some(x) match operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SomeContext</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">Some</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">OA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SomeContext</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"><span >The result of the match operation</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Some_OPT_OA_A_B_OA__ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            new SomeContext&lt;OPT, OA, A, B&gt;(ma, f, default(OPT).IsUnsafe(ma))</div></div></div><div class="member-title"><a name="Some&lt;OPT, OA, A>"></a>Some&lt;OPT, OA, A&gt;(OA, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some_OPT_OA_A_OA__ma__Action_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Fluent pattern matching.  Provide a Some handler and then follow on fluently with .None(...) to complete the matching operation. This is for dispatching actions, use Some&lt;A,B&gt;(...) to return a value from the match operation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div><div class="arg-desc">Option to match</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc">The Some(x) match operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">SomeUnitContext</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt; <span class="ident">Some</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> ma, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">SomeUnitContext</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Some_OPT_OA_A_OA__ma__Action_A_f_"><div class="section_title">SOURCE</div><div class="code">
            new SomeUnitContext&lt;OPT, OA, A&gt;(ma, f, default(OPT).IsUnsafe(ma))</div></div></div><div class="member-title"><a name="sqrt&lt;FLOAT, A>"></a>sqrt&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sqrt_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates the square root of a value. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which we are calculating the square root.</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sqrt</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;sqrt(x)&lt;/c&gt;.</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sqrt_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Sqrt(x)</div></div></div><div class="member-title"><a name="subtract&lt;NUM, A>"></a>subtract&lt;NUM, A&gt;(A, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-subtract_NUM_A_A__x__A__y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract between two numbers </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">left hand side of the subtraction operation</div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">right hand side of the subtraction operation</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x, <span class="ident">A</span> y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The sum subtract between x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-subtract_NUM_A_A__x__A__y_"><div class="section_title">SOURCE</div><div class="code">
            default(NUM).Subtract(x, y)</div></div></div><div class="member-title"><a name="sum&lt;NUM, FOLD, F, A>"></a>sum&lt;NUM, FOLD, F, A&gt;(F)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-sum_NUM_FOLD_F_A_F__fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The &#39;sum&#39; function computes the sum of the numbers of a structure. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >Sum of the numbers in the structure</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-sum_NUM_FOLD_F_A_F__fa_"><div class="section_title">SOURCE</div><div class="code">
                default(FOLD).Fold(fa, fromInteger&lt;NUM, A&gt;(0), (s, x) =&gt; plus&lt;NUM, A&gt;(s, x))(unit)</div></div></div><div class="member-title"><a name="tan&lt;FLOAT, A>"></a>tan&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tan_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span ><div class='code-line'>     Calculates the tangent of an angle.</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">An angle, in radians</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">tan</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;tan(x)&lt;/c&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-tan_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Tan(x)</div></div></div><div class="member-title"><a name="tanh&lt;FLOAT, A>"></a>tanh&lt;FLOAT, A&gt;(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-tanh_FLOAT_A_A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Calculates a hyperbolic tangent. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div><div class="arg-desc">The value for which a hyperbolic tangent is to be calculated. </div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">tanh</span>&lt;<span class="ident">FLOAT</span>, <span class="ident">A</span>&gt;(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The value of &lt;c&gt;tanh(x)&lt;/c&gt;</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FLOAT</span> : <span class="keyword">struct</span> <span class="ident">Floating</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-tanh_FLOAT_A_A__x_"><div class="section_title">SOURCE</div><div class="code">
            default(FLOAT).Tanh(x)</div></div></div><div class="member-title"><a name="toArray&lt;CHOICE, CH, A, B>"></a>toArray&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toArray_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option to an enumerable of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div><div class="arg-desc">Option</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">B</span>&gt; <span class="ident">toArray</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >An enumerable of zero or one items</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-toArray_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: x =&gt; new B[0],
                Choice2: y =&gt; new B[1] { y },
                Bottom: () =&gt; new B[0])</div></div></div><div class="member-title"><a name="toArray&lt;OPT, OA, A>"></a>toArray&lt;OPT, OA, A&gt;(OA)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toArray_OPT_OA_A_OA__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option to an enumerable of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div><div class="arg-desc">Option</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt; <span class="ident">toArray</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An enumerable of zero or one items</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-toArray_OPT_OA_A_OA__ma_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).Match( ma,
                Some: x  =&gt; new A[1] {x}, 
                None: () =&gt; new A[0])</div></div></div><div class="member-title"><a name="toBiSeq&lt;FOLD, F, A, B>"></a>toBiSeq&lt;FOLD, F, A, B&gt;(F)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toBiSeq_FOLD_F_A_B_F__foldable_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turn any foldable into a sequence </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">foldable</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">toBiSeq</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">F</span> foldable)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"><span >Sequence of As</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="keyword">struct</span> <span class="ident">BiFoldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-toBiSeq_FOLD_F_A_B_F__foldable_"><div class="section_title">SOURCE</div><div class="code">
            biFoldBack&lt;FOLD, F, A, B, IEnumerable&lt;Either&lt;A, B&gt;&gt;&gt;(foldable, new Either&lt;A, B&gt;[0], (s, x) =&gt; Left&lt;A,B&gt;(x).Cons(s), (s, x) =&gt; Right&lt;A, B&gt;(x).Cons(s))</div></div></div><div class="member-title"><a name="toEither&lt;CHOICE, CH, A, B>"></a>toEither&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toEither_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">toEither</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-toEither_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: Left&lt;A, B&gt;,
                Choice2: Right&lt;A, B&gt;)</div></div></div><div class="member-title"><a name="toEither&lt;OPT, OA, L, A>"></a>toEither&lt;OPT, OA, L, A&gt;(OA, L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toEither_OPT_OA_L_A_OA__ma__L__defaultLeftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; <span class="ident">toEither</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> ma, <span class="ident">L</span> defaultLeftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-toEither_OPT_OA_L_A_OA__ma__L__defaultLeftValue_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).Match(ma,
                Some: x  =&gt; Right&lt;L, A&gt;(x),
                None: () =&gt; Left&lt;L, A&gt;(defaultLeftValue))</div></div></div><div class="member-title"><a name="toEither&lt;OPT, OA, L, A>"></a>toEither&lt;OPT, OA, L, A&gt;(OA, Func&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toEither_OPT_OA_L_A_OA__ma__Func_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an Either </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; <span class="ident">toEither</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-toEither_OPT_OA_L_A_OA__ma__Func_L_Left_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).Match(ma,
                Some: x =&gt;  Right&lt;L, A&gt;(x),
                None: () =&gt; Left&lt;L, A&gt;(Left()))</div></div></div><div class="member-title"><a name="toEitherUnsafe&lt;CHOICE, CH, A, B>"></a>toEitherUnsafe&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toEitherUnsafe_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an EitherUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; <span class="ident">toEitherUnsafe</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-toEitherUnsafe_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: LeftUnsafe&lt;A, B&gt;,
                Choice2: RightUnsafe&lt;A, B&gt;)</div></div></div><div class="member-title"><a name="toEitherUnsafe&lt;OPT, OA, L, A>"></a>toEitherUnsafe&lt;OPT, OA, L, A&gt;(OA, L)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toEitherUnsafe_OPT_OA_L_A_OA__ma__L__defaultLeftValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an EitherUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultLeftValue</div><div class="arg-type"><span class="ident">L</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; <span class="ident">toEitherUnsafe</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> ma, <span class="ident">L</span> defaultLeftValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-toEitherUnsafe_OPT_OA_L_A_OA__ma__L__defaultLeftValue_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).Match(ma,
                Some: x  =&gt; RightUnsafe&lt;L, A&gt;(x),
                None: () =&gt; LeftUnsafe&lt;L, A&gt;(defaultLeftValue))</div></div></div><div class="member-title"><a name="toEitherUnsafe&lt;OPT, OA, L, A>"></a>toEitherUnsafe&lt;OPT, OA, L, A&gt;(OA, Func&lt;L&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toEitherUnsafe_OPT_OA_L_A_OA__ma__Func_L_Left_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to an EitherUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Left</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">L</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt; <span class="ident">toEitherUnsafe</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">L</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">L</span>&gt; Left)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-toEitherUnsafe_OPT_OA_L_A_OA__ma__Func_L_Left_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).Match(ma,
                Some: x  =&gt; RightUnsafe&lt;L, A&gt;(x),
                None: () =&gt; LeftUnsafe&lt;L, A&gt;(Left()))</div></div></div><div class="member-title"><a name="toList&lt;CHOICE, CH, A, B>"></a>toList&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toList_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option to an immutable list of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div><div class="arg-desc">Option</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">B</span>&gt; <span class="ident">toList</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >An immutable list of zero or one items</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-toList_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            toList&lt;B&gt;(toArray&lt;CHOICE, CH, A, B&gt;(ma))</div></div></div><div class="member-title"><a name="toList&lt;OPT, OA, A>"></a>toList&lt;OPT, OA, A&gt;(OA)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toList_OPT_OA_A_OA__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option to an immutable list of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div><div class="arg-desc">Option</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt; <span class="ident">toList</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An immutable list of zero or one items</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-toList_OPT_OA_A_OA__ma_"><div class="section_title">SOURCE</div><div class="code">
            toList&lt;A&gt;(toArray&lt;OPT, OA, A&gt;(ma))</div></div></div><div class="member-title"><a name="toOption&lt;CHOICE, CH, A, B>"></a>toOption&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toOption_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to a Option </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; <span class="ident">toOption</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-toOption_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: _ =&gt; Option&lt;B&gt;.None,
                Choice2:      Option&lt;B&gt;.Some,
                Bottom: () =&gt; Option&lt;B&gt;.None)</div></div></div><div class="member-title"><a name="toOption&lt;OPT, OA, A>"></a>toOption&lt;OPT, OA, A&gt;(OA)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toOption_OPT_OA_A_OA__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to a Option </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">toOption</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-toOption_OPT_OA_A_OA__ma_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).Match(ma,
                Some: x  =&gt; Optional(x),
                None: () =&gt; Option&lt;A&gt;.None)</div></div></div><div class="member-title"><a name="toOptionUnsafe&lt;CHOICE, CH, A, B>"></a>toOptionUnsafe&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toOptionUnsafe_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to a OptionUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt; <span class="ident">toOptionUnsafe</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-toOptionUnsafe_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            default(CHOICE).Match(ma,
                Choice1: _ =&gt; OptionUnsafe&lt;B&gt;.None,
                Choice2:      OptionUnsafe&lt;B&gt;.Some,
                Bottom: () =&gt; OptionUnsafe&lt;B&gt;.None)</div></div></div><div class="member-title"><a name="toOptionUnsafe&lt;OPT, OA, A>"></a>toOptionUnsafe&lt;OPT, OA, A&gt;(OA)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toOptionUnsafe_OPT_OA_A_OA__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to a OptionUnsafe </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt; <span class="ident">toOptionUnsafe</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-toOptionUnsafe_OPT_OA_A_OA__ma_"><div class="section_title">SOURCE</div><div class="code">
            default(OPT).Match(ma,
                Some: x  =&gt; SomeUnsafe(x),
                None: () =&gt; OptionUnsafe&lt;A&gt;.None)</div></div></div><div class="member-title"><a name="toSeq&lt;CHOICE, CH, A, B>"></a>toSeq&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toSeq_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option to an enumerable sequence of zero or one items </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div><div class="arg-desc">Option</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt; <span class="ident">toSeq</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >An enumerable sequence of zero or one items</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-toSeq_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code">
            toArray&lt;CHOICE, CH, A, B&gt;(ma).AsEnumerable()</div></div></div><div class="member-title"><a name="toSeq&lt;FOLD, F, A>"></a>toSeq&lt;FOLD, F, A&gt;(F)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toSeq_FOLD_F_A_F__fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turn any foldable into a sequence </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">F</span></div></div><div class="arg-desc">Foldable</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; <span class="ident">toSeq</span>&lt;<span class="ident">FOLD</span>, <span class="ident">F</span>, <span class="ident">A</span>&gt;(<span class="ident">F</span> fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Sequence of As</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">FOLD</span> : <span class="ident">Foldable</span>&lt;<span class="ident">F</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-toSeq_FOLD_F_A_F__fa_"><div class="section_title">SOURCE</div><div class="code">
            default(FOLD).FoldBack(fa, new A[0].AsEnumerable(), (s, x) =&gt; x.Cons(s))(unit)</div></div></div><div class="member-title"><a name="toTryOption&lt;CHOICE, CH, A, B>"></a>toTryOption&lt;CHOICE, CH, A, B&gt;(CH)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toTryOption_CHOICE_CH_A_B_CH__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to a TryOption </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">CH</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt; <span class="ident">toTryOption</span>&lt;<span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">CH</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">CHOICE</span> : <span class="keyword">struct</span> <span class="ident">Choice</span>&lt;<span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-toTryOption_CHOICE_CH_A_B_CH__ma_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
                default(CHOICE).Match(ma,
                    Choice1: _ =&gt; Option&lt;B&gt;.None,
                    Choice2:      Option&lt;B&gt;.Some,
                    Bottom: () =&gt; Option&lt;B&gt;.None)</div></div></div><div class="member-title"><a name="toTryOption&lt;OPT, OA, A>"></a>toTryOption&lt;OPT, OA, A&gt;(OA)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-toTryOption_OPT_OA_A_OA__ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the structure to a TryOption </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OA</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt; <span class="ident">toTryOption</span>&lt;<span class="ident">OPT</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt;(<span class="ident">OA</span> ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">OPT</span> : <span class="keyword">struct</span> <span class="ident">Optional</span>&lt;<span class="ident">OA</span>, <span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-toTryOption_OPT_OA_A_OA__ma_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
                default(OPT).Match(ma, 
                    Some: x  =&gt; Option&lt;A&gt;.Some(x),
                    None: () =&gt; Option&lt;A&gt;.None)</div></div></div><div class="member-title"><a name="traverse&lt;Env, Out, MonadA, MonadB, MA, MB, A, B>"></a>traverse&lt;Env, Out, MonadA, MonadB, MA, MB, A, B&gt;(MA, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_Env_Out_MonadA_MonadB_MA_MB_A_B_MA__ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">MA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">MB</span>&gt; <span class="ident">traverse</span>&lt;<span class="ident">Env</span>, <span class="ident">Out</span>, <span class="ident">MonadA</span>, <span class="ident">MonadB</span>, <span class="ident">MA</span>, <span class="ident">MB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">MA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">MB</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonadA</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">Env</span>, <span class="ident">Out</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonadB</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">Env</span>, <span class="ident">Out</span>, <span class="ident">MB</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-traverse_Env_Out_MonadA_MonadB_MA_MB_A_B_MA__ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            default(MonadA).Fold(ma, default(MonadB).Zero(), (s, a) =&gt; default(MonadB).Plus(s, default(MonadB).Return(_ =&gt; f(a))))</div></div></div><div class="member-title"><a name="traverse&lt;Env, Out, MonadA, MonadB, MA, MB, A, B>"></a>traverse&lt;Env, Out, MonadA, MonadB, MA, MB, A, B&gt;(MA, Func&lt;A, MB&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_Env_Out_MonadA_MonadB_MA_MB_A_B_MA__ma__Func_A_MB_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">MA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">MB</span>&gt; <span class="ident">traverse</span>&lt;<span class="ident">Env</span>, <span class="ident">Out</span>, <span class="ident">MonadA</span>, <span class="ident">MonadB</span>, <span class="ident">MA</span>, <span class="ident">MB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">MA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">MB</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonadA</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">Env</span>, <span class="ident">Out</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonadB</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">Env</span>, <span class="ident">Out</span>, <span class="ident">MB</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-traverse_Env_Out_MonadA_MonadB_MA_MB_A_B_MA__ma__Func_A_MB_f_"><div class="section_title">SOURCE</div><div class="code">
            default(MonadA).Fold(ma, default(MonadB).Zero(), (s, a) =&gt; default(MonadB).Plus(s, f(a)))</div></div></div><div class="member-title"><a name="traverse&lt;MonadA, MonadB, MA, MB, A, B>"></a>traverse&lt;MonadA, MonadB, MA, MB, A, B&gt;(MA, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_MonadA_MonadB_MA_MB_A_B_MA__ma__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">MA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MB</span> <span class="ident">traverse</span>&lt;<span class="ident">MonadA</span>, <span class="ident">MonadB</span>, <span class="ident">MA</span>, <span class="ident">MB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">MA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MB</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonadA</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">Unit</span>, <span class="ident">Unit</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonadB</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">Unit</span>, <span class="ident">Unit</span>, <span class="ident">MB</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-traverse_MonadA_MonadB_MA_MB_A_B_MA__ma__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
            traverse&lt;Unit, Unit, MonadA, MonadB, MA, MB, A, B&gt;(ma, f)(unit)</div></div></div><div class="member-title"><a name="traverse&lt;MonadA, MonadB, MA, MB, A, B>"></a>traverse&lt;MonadA, MonadB, MA, MB, A, B&gt;(MA, Func&lt;A, MB&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-traverse_MonadA_MonadB_MA_MB_A_B_MA__ma__Func_A_MB_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">MA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">MB</span> <span class="ident">traverse</span>&lt;<span class="ident">MonadA</span>, <span class="ident">MonadB</span>, <span class="ident">MA</span>, <span class="ident">MB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="ident">MA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MB</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonadA</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">Unit</span>, <span class="ident">Unit</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;</div><div class="code"><span class="keyword">where</span> <span class="ident">MonadB</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">Unit</span>, <span class="ident">Unit</span>, <span class="ident">MB</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-traverse_MonadA_MonadB_MA_MB_A_B_MA__ma__Func_A_MB_f_"><div class="section_title">SOURCE</div><div class="code">
            traverse&lt;Unit, Unit, MonadA, MonadB, MA, MB, A, B&gt;(ma, f)(unit)</div></div></div><div class="member-title"><a name="trimap&lt;TriFunctorABC, FABC, FR, A, B, C, R>"></a>trimap&lt;TriFunctorABC, FABC, FR, A, B, C, R&gt;(FABC, Func&lt;A, R&gt;, Func&lt;B, R&gt;, Func&lt;B, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trimap_TriFunctorABC_FABC_FR_A_B_C_R_FABC__ma__Func_A_R_fa__Func_B_R_fb__Func_B_R_fc_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one tri-functor to another.  This operation should map only one of the items (A, B, or C).  The type R should match A, B, or C depending on which item is being  mapped. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">FABC</span></div></div><div class="arg-desc">Functor value to map from </div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Projection function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc">Projection function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">FR</span> <span class="ident">trimap</span>&lt;<span class="ident">TriFunctorABC</span>, <span class="ident">FABC</span>, <span class="ident">FR</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="ident">FABC</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R</span>&gt; fb, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R</span>&gt; fc)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">FR</span></div><div class="normal"><span >Mapped functor</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">TriFunctorABC</span> : <span class="ident">TriFunctor</span>&lt;<span class="ident">FABC</span>, <span class="ident">FR</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;</div></div><div style="display:none" id="code-trimap_TriFunctorABC_FABC_FR_A_B_C_R_FABC__ma__Func_A_R_fa__Func_B_R_fb__Func_B_R_fc_"><div class="section_title">SOURCE</div><div class="code">
            default(TriFunctorABC).TriMap(ma, fa, fb, fc)</div></div></div><div class="member-title"><a name="trimap&lt;TriFunctorABC, FABC, FTUV, A, B, C, T, U, V>"></a>trimap&lt;TriFunctorABC, FABC, FTUV, A, B, C, T, U, V&gt;(FABC, Func&lt;A, T&gt;, Func&lt;B, U&gt;, Func&lt;C, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-trimap_TriFunctorABC_FABC_FTUV_A_B_C_T_U_V_FABC__ma__Func_A_T_fa__Func_B_U_fb__Func_C_V_fc_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Projection from one value to another.  All three elements of the tri-functor can will be mapped to a new result value. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">FABC</span></div></div><div class="arg-desc">Functor value to map from </div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc">Projection function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">U</span>&gt;</div></div><div class="arg-desc">Projection function</div></div><div class="arg"><div class="arg-header"><div class="arg-name">fc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc">Projection function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">FTUV</span> <span class="ident">trimap</span>&lt;<span class="ident">TriFunctorABC</span>, <span class="ident">FABC</span>, <span class="ident">FTUV</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="ident">FABC</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">T</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">U</span>&gt; fb, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">V</span>&gt; fc)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">FTUV</span></div><div class="normal"><span >Mapped functor</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">TriFunctorABC</span> : <span class="ident">TriFunctor</span>&lt;<span class="ident">FABC</span>, <span class="ident">FTUV</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div><div style="display:none" id="code-trimap_TriFunctorABC_FABC_FTUV_A_B_C_T_U_V_FABC__ma__Func_A_T_fa__Func_B_U_fb__Func_C_V_fc_"><div class="section_title">SOURCE</div><div class="code">
            default(TriFunctorABC).TriMap(ma, fa, fb, fc)</div></div></div></div></body></html>