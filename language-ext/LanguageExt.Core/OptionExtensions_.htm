<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="..//index.htm"></a> \ <span class="nav-bar-link" href="OptionExtensions_.htm">OptionExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Action&lt;A, B>">Action&lt;A, B&gt;(Option&lt;A&gt;, Option&lt;B&gt;)</a><a class="nav-link" href="#Add&lt;NUM, A>">Add&lt;NUM, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Option&lt;Func&lt;A, B, C&gt;&gt;, Option&lt;A&gt;, Option&lt;B&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Option&lt;A&gt;, Option&lt;B&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Option&lt;Func&lt;A, B, C&gt;&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Option&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B>">Apply&lt;A, B&gt;(Option&lt;Func&lt;A, B&gt;&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B>">Apply&lt;A, B&gt;(Func&lt;A, B&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#Divide&lt;NUM, A>">Divide&lt;NUM, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(IEnumerable&lt;Option&lt;T&gt;&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;, Func&lt;IEnumerable&lt;R&gt;&gt;)</a><a class="nav-link" href="#Match&lt;T, R>">Match&lt;T, R&gt;(IEnumerable&lt;Option&lt;T&gt;&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;, IEnumerable&lt;R&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, B>">MatchObservable&lt;A, B&gt;(Option&lt;A&gt;, Func&lt;A, IObservable&lt;B&gt;&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, B>">MatchObservable&lt;A, B&gt;(Option&lt;A&gt;, Func&lt;A, IObservable&lt;B&gt;&gt;, Func&lt;IObservable&lt;B&gt;&gt;)</a><a class="nav-link" href="#Product&lt;NUM, A>">Product&lt;NUM, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#Somes&lt;A>">Somes&lt;A&gt;(IEnumerable&lt;Option&lt;A&gt;&gt;)</a><a class="nav-link" href="#Subtract&lt;NUM, A>">Subtract&lt;NUM, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)</a><a class="nav-link" href="#Sum">Sum(Option&lt;int&gt;)</a><a class="nav-link" href="#Sum&lt;NUM, A>">Sum&lt;NUM, A&gt;(Option&lt;A&gt;)</a><a class="nav-link" href="#ToNullable&lt;A>">ToNullable&lt;A&gt;(Option&lt;A&gt;)</a></div><div class="content-panel"><h1 >OptionExtensions Class</h1><p ><span >Extension methods for Option </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">OptionExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div></div></div><h2 >Methods</h2><div class="member-title"><a name="Action&lt;A, B>"></a>Action&lt;A, B&gt;(Option&lt;A&gt;, Option&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Action_A_B_Option_A_fa__Option_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type Option&lt;B&gt;</span></div></div></div><div style="display:none" id="code-Action_A_B_Option_A_fa__Option_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplOption&lt;A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="Add&lt;NUM, A>"></a>Add&lt;NUM, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Add_NUM_A_Option_A_x__Option_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound values of x and y, uses an Add type-class to provide the add operation for type A.  For example x.Add&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Add</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An option with y added to x</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Add_NUM_A_Option_A_x__Option_A_y_"><div class="section_title">SOURCE</div><div class="code">
        from a in x
        from b in y
        select plus&lt;NUM, A&gt;(a, b)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Option&lt;Func&lt;A, B, C&gt;&gt;, Option&lt;A&gt;, Option&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Option_Func&lt;A, B, C>_fabc__Option_A_fa__Option_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">C</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Option_Func&lt;A, B, C>_fabc__Option_A_fa__Option_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        from x in fabc
        from y in ApplOption&lt;A, B, C&gt;.Inst.Apply(curry(x), fa, fb)
        select y</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Option&lt;A&gt;, Option&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Func_A_B_C_fabc__Option_A_fa__Option_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">C</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Func_A_B_C_fabc__Option_A_fa__Option_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplOption&lt;A, B, C&gt;.Inst.Apply(curry(fabc), fa, fb)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Option&lt;Func&lt;A, B, C&gt;&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Option_Func&lt;A, B, C>_fabc__Option_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Option_Func&lt;A, B, C>_fabc__Option_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        from x in fabc
        from y in ApplOption&lt;A, B, C&gt;.Inst.Apply(curry(x), fa)
        select y</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Func_A_B_C_fabc__Option_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Func_A_B_C_fabc__Option_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplOption&lt;A, B, C&gt;.Inst.Apply(curry(fabc), fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Option&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Option_Func&lt;A, Func&lt;B, C>>_fabc__Option_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Option_Func&lt;A, Func&lt;B, C>>_fabc__Option_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplOption&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Option_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Option_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplOption&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B>"></a>Apply&lt;A, B&gt;(Option&lt;Func&lt;A, B&gt;&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_Option_Func&lt;A, B>_fab__Option_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-Apply_A_B_Option_Func&lt;A, B>_fab__Option_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplOption&lt;A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B>"></a>Apply&lt;A, B&gt;(Func&lt;A, B&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_Func_A_B_fab__Option_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-Apply_A_B_Func_A_B_fab__Option_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplOption&lt;A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="Divide&lt;NUM, A>"></a>Divide&lt;NUM, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Divide_NUM_A_Option_A_x__Option_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Divide the two bound values of x and y, uses a Divide type-class to provide the divide operation for type A.  For example x.Divide&lt;TDouble,double&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An option x / y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Divide_NUM_A_Option_A_x__Option_A_y_"><div class="section_title">SOURCE</div><div class="code">
        from a in x
        from b in y
        select divide&lt;NUM, A&gt;(a, b)</div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(IEnumerable&lt;Option&lt;T&gt;&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;, Func&lt;IEnumerable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_IEnumerable_Option&lt;T>_list__Func_T_IEnumerable&lt;R>_Some__Func_IEnumerable&lt;R>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match over a list of options </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc"><span >List of options to match against</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Operation to perform when an Option is in the Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Operation to perform when an Option is in the None state</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An enumerable of results of the match operations</span></div></div></div><div style="display:none" id="code-Match_T_R_IEnumerable_Option&lt;T>_list__Func_T_IEnumerable&lt;R>_Some__Func_IEnumerable&lt;R>_None_"><div class="section_title">SOURCE</div><div class="code">
        match(list, Some, None)</div></div></div><div class="member-title"><a name="Match&lt;T, R>"></a>Match&lt;T, R&gt;(IEnumerable&lt;Option&lt;T&gt;&gt;, Func&lt;T, IEnumerable&lt;R&gt;&gt;, IEnumerable&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_T_R_IEnumerable_Option&lt;T>_list__Func_T_IEnumerable&lt;R>_Some__IEnumerable_R_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match over a list of options </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div><div class="arg-desc"><span >List of options to match against</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Operation to perform when an Option is in the Some state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Default if the list is empty</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">T</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An enumerable of results of the match operations</span></div></div></div><div style="display:none" id="code-Match_T_R_IEnumerable_Option&lt;T>_list__Func_T_IEnumerable&lt;R>_Some__IEnumerable_R_None_"><div class="section_title">SOURCE</div><div class="code">
        match(list, Some, () =&gt; None)</div></div></div><div class="member-title"><a name="MatchObservable&lt;A, B>"></a>MatchObservable&lt;A, B&gt;(Option&lt;A&gt;, Func&lt;A, IObservable&lt;B&gt;&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_B_Option_A_ma__Func_A_IObservable&lt;B>_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option and return an observable stream of non-null Rs. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some handler.  Must not return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >None handler.  Must not return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >A stream of non-null Rs</span></div></div></div><div style="display:none" id="code-MatchObservable_A_B_Option_A_ma__Func_A_IObservable&lt;B>_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
        ma.IsSome
            ? Some(ma.Value).Select(CheckNullSomeReturn)
            : Observable.Return(CheckNullNoneReturn(None()))</div></div></div><div class="member-title"><a name="MatchObservable&lt;A, B>"></a>MatchObservable&lt;A, B&gt;(Option&lt;A&gt;, Func&lt;A, IObservable&lt;B&gt;&gt;, Func&lt;IObservable&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_B_Option_A_ma__Func_A_IObservable&lt;B>_Some__Func_IObservable&lt;B>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Match the two states of the Option and return an observable stream of non-null Rs. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Some handler.  Must not return null.</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >None handler.  Must not return null.</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >A stream of non-null Rs</span></div></div></div><div style="display:none" id="code-MatchObservable_A_B_Option_A_ma__Func_A_IObservable&lt;B>_Some__Func_IObservable&lt;B>_None_"><div class="section_title">SOURCE</div><div class="code">
        ma.IsSome
            ? Some(ma.Value).Select(CheckNullSomeReturn)
            : None().Select(CheckNullNoneReturn)</div></div></div><div class="member-title"><a name="Product&lt;NUM, A>"></a>Product&lt;NUM, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Product_NUM_A_Option_A_x__Option_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the product between the two bound values of x and y, uses a Product type-class  to provide the product operation for type A.  For example x.Product&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An option with the product of x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Product_NUM_A_Option_A_x__Option_A_y_"><div class="section_title">SOURCE</div><div class="code">
        from a in x
        from b in y
        select product&lt;NUM, A&gt;(a, b)</div></div></div><div class="member-title"><a name="Somes&lt;A>"></a>Somes&lt;A&gt;(IEnumerable&lt;Option&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Somes_A_IEnumerable_Option&lt;A>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Extracts from a list of &#39;Option&#39; all the &#39;Some&#39; elements. All the &#39;Some&#39; elements are extracted in order. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">IEnumerable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Somes</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">IEnumerable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Somes_A_IEnumerable_Option&lt;A>_self_"><div class="section_title">SOURCE</div><div class="code">
        foreach (var item in self)
        {
            if (item.IsSome)
            {
                yield return item.Value;
            }
        }
    </div></div></div><div class="member-title"><a name="Subtract&lt;NUM, A>"></a>Subtract&lt;NUM, A&gt;(Option&lt;A&gt;, Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subtract_NUM_A_Option_A_x__Option_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract between the two bound values of x and y, uses a Subtract type-class  to provide the subtract operation for type A.  For example x.Subtract&lt;TInteger,int&gt;(y) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >An option with the subtract between x and y</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Subtract_NUM_A_Option_A_x__Option_A_y_"><div class="section_title">SOURCE</div><div class="code">
        from a in x
        from b in y
        select subtract&lt;NUM, A&gt;(a, b)</div></div></div><div class="member-title"><a name="Sum"></a>Sum(Option&lt;int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum__Option_int_a_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="keyword">int</span>&gt;</div></div><div class="arg-desc"><span >Option of int</span></div></div><div class="section_title">REMARKS</div><span >This is a legacy method for backwards compatibility</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">Sum</span>(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="keyword">int</span>&gt; a)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >The bound value or 0 if None</span></div></div></div><div style="display:none" id="code-Sum__Option_int_a_"><div class="section_title">SOURCE</div><div class="code">
        a.IfNone(0)</div></div></div><div class="member-title"><a name="Sum&lt;NUM, A>"></a>Sum&lt;NUM, A&gt;(Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum_NUM_A_Option_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Sum the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Option of A that is from the type-class NUM</span></div></div><div class="section_title">REMARKS</div><span >This is a legacy method for backwards compatibility</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">Sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"><span >The bound value or 0 if None</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Sum_NUM_A_Option_A_self_"><div class="section_title">SOURCE</div><div class="code">
        sum&lt;NUM, MOption&lt;A&gt;, Option&lt;A&gt;, A&gt;(self)</div></div></div><div class="member-title"><a name="ToNullable&lt;A>"></a>ToNullable&lt;A&gt;(Option&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToNullable_A_Option_A_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the Option type to a Nullable of A </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Option to convert</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span>? <span class="ident">ToNullable</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span>?</div><div class="normal"><span >Nullable of A</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">A</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-ToNullable_A_Option_A_ma_"><div class="section_title">SOURCE</div><div class="code">
        ma.IsNone
            ? (A?)null
            : ma.Value</div></div></div></div></body></html>