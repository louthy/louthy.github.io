<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt.TypeClasses/index.htm">LanguageExt.TypeClasses</a> \ <span class="nav-bar-link" href="Monad_Env_Out_MA_A.htm">Monad&lt;Env, Out, MA, A&gt;</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Bind&lt;MONADB, MB, B>">Bind&lt;MONADB, MB, B&gt;(MA, Func&lt;A, MB&gt;)</a><a class="nav-link" href="#BindReturn">BindReturn(Out, MA)</a><a class="nav-link" href="#Fail">Fail(Exception)</a><a class="nav-link" href="#Fail">Fail(object)</a><a class="nav-link" href="#Id">Id(Func&lt;Env, MA&gt;)</a><a class="nav-link" href="#IdAsync">IdAsync(Func&lt;Env, Task&lt;MA&gt;&gt;)</a><a class="nav-link" href="#Plus">Plus(MA, MA)</a><a class="nav-link" href="#Return">Return(Func&lt;Env, A&gt;)</a><a class="nav-link" href="#Zero">Zero()</a></div><div class="content-panel"><h1 >Monad&lt;Env, Out, MA, A&gt; Interface</h1><p ><span >Monad type-class </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Typeclass]</div><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">Monad</span>&lt;<span class="ident">Env</span>, <span class="ident">Out</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Env</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt.TypeClasses</div></div><h2 >Methods</h2><div class="member-title"><a name="Bind&lt;MONADB, MB, B>"></a>Bind&lt;MONADB, MB, B&gt;(MA, Func&lt;A, MB&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_MONADB_MB_B_MA__ma__Func_A_MB_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">MA</span></div></div><div class="arg-desc"><span >Monad to bind</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt;</div></div><div class="arg-desc"><span >Bind function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">private</span> <span class="ident">MB</span> <span class="ident">Bind</span>&lt;<span class="ident">MONADB</span>, <span class="ident">MB</span>, <span class="ident">B</span>&gt;(<span class="ident">MA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MB</span></div><div class="normal"><span >Monad of type <span class='code-inline'>MB</span> derived from Monad of <span class='code-inline'>B</span></span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MONADB</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">Env</span>, <span class="ident">Out</span>, <span class="ident">MB</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-Bind_MONADB_MB_B_MA__ma__Func_A_MB_f_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="BindReturn"></a>BindReturn(Out, MA)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindReturn__Out__outputma__MA__mb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Used for double dispatch by the bind function for monadic types that need to construct an output value/state (like <span class='code-inline'>MState</span> and <span class='code-inline'>MWriter</span>).  For all other monad types just return <span class='code-inline'>mb</span>. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">outputma</div><div class="arg-type"><span class="ident">Out</span></div></div><div class="arg-desc"><span >Output from the first part of a monadic bind</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mb</div><div class="arg-type"><span class="ident">MA</span></div></div><div class="arg-desc"><span >Monadic to invoke.  Get the results from this to combine with <span class='code-inline'>outputma</span> and then re-wrap</span></div></div><div class="section_title">REMARKS</div><span >This is an example from the <span class='code-inline'>Writer</span> monad.  Note how the <span class='code-inline'>Output</span> argument for the <span class='code-inline'>Writer</span> monad is <span class='code-inline'>(W, bool)</span>.  <span class='code-inline'>W</span> is what the <span class='code-inline'>Writer</span> tells, and <span class='code-inline'>bool</span> is a flag stating whether it&#39;s faulted or not.  The <span class='code-inline'>Bind</span> function isn&#39;t able to combine the output from <span class='code-inline'>ma</span> and <span class='code-inline'>mb</span>, due  to limitations in the type-system&#39;s ability to explicitly constrain the return type of  <span class='code-inline'>Bind</span> to be a <span class='code-inline'>Writer</span> monad; the returned monad of <span class='code-inline'>MB</span> could be any monad, but it must be  compatible with the input type of <span class='code-inline'>Unit</span> and the output type of <span class='code-inline'>(W, bool)</span>.  It restricts  <span class='code-inline'>MB</span> to be:<br/><br/><div class='code-line'>     Monad&lt;Unit, (W, bool), MB, B&gt;</div><br/><br/> So the Writer&#39;s <span class='code-inline'>Bind</span> function calls <span class='code-inline'>BindReturn</span> which double dispatches the job to the  <span class='code-inline'>BindReturn</span> function on <span class='code-inline'>MONADB</span>.  This is very much like the Visitor pattern in OO land. <br/><br/><div class='code-line'>     public MB Bind&lt;MONADB, MB, B&gt;(Writer&lt;MonoidW, W, A&gt; ma, Func&lt;A, MB&gt; f) </div><div class='code-line'>         where MONADB : struct, Monad&lt;Unit, (W, bool), MB, B&gt; =&gt;</div><div class='code-line'>             default(MONADB).Id(_ =&gt;</div><div class='code-line'>             {</div><div class='code-line'>                 var(a, output1, faulted) = ma();</div><div class='code-line'>                     return faulted</div><div class='code-line'>                         ? default(MONADB).Fail()</div><div class='code-line'>                     :    default(MONADB).BindReturn((output1, faulted), f(a));</div><div class='code-line'>             });</div><br/><br/> Usually <span class='code-inline'>MONADB</span> would be another <span class='code-inline'>Writer</span> instance, because you would normally bind a <span class='code-inline'>Writer</span> with a <span class='code-inline'>Writer</span>, but it could be any monad that has the same input and output arguments. The <span class='code-inline'>BindReturn</span> function is then able to invoke <span class='code-inline'>mb</span>, because it knows its own context and combine the output from <span class='code-inline'>ma()</span> and the output of <span class='code-inline'>mb</span>.<br/><br/><div class='code-line'>     public Writer&lt;MonoidW, W, A&gt; BindReturn((W, bool) output, Writer&lt;MonoidW, W, A&gt; mb)</div><div class='code-line'>     {</div><div class='code-line'>         var (b, output2, faulted) = mb();</div><div class='code-line'>         return () =&gt; faulted</div><div class='code-line'>             ? (default(A), default(MonoidW).Empty(), true)</div><div class='code-line'>             : (b, default(MonoidW).Append(output.Item1, output2), false);</div><div class='code-line'>     }</div><br/><br/> The effect of this with the monadic types in Language-Ext is that Writers are only bindable to Writers.  However simpler monads like <span class='code-inline'>Option</span> can be bound to <span class='code-inline'>Either</span>, <span class='code-inline'>Try</span>, etc.  Because their <span class='code-inline'>BindReturn</span> function looks like this:<br/><br/><div class='code-line'>     public Option&lt;A&gt; BindReturn(Unit _, Option&lt;A&gt; mb) =&gt;</div><div class='code-line'>         mb;</div><br/><br/> The <span class='code-inline'>Bind</span> function for <span class='code-inline'>Option</span> doesn&#39;t call <span class='code-inline'>BindReturn</span> at all:<br/><br/><div class='code-line'>     public MB Bind&lt;MONADB, MB, B&gt;(Option&lt;A&gt; ma, Func&lt;A, MB&gt; f) </div><div class='code-line'>         where MONADB : struct, Monad&lt;Unit, Unit, MB, B&gt; =&gt;</div><div class='code-line'>             ma.IsSome &amp;&amp; f != null</div><div class='code-line'>                 ? f(ma.Value)</div><div class='code-line'>                 : default(MONADB).Fail();</div><br/><br/> So why implement it?  If someone tries to return an <span class='code-inline'>Option</span> from a <span class='code-inline'>Bind</span> call with the source monad of another type, it may call <span class='code-inline'>BindReturn</span>.  And the <span class='code-inline'>Option</span> respose would be to just return itself.<br/><br/> So <span class='code-inline'>Bind</span> and <span class='code-inline'>BindReturn</span> should be seen as two halves of the same function.  They&#39;re there to make use of the instances knowledge about itself, but not its generic return types. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">BindReturn</span>(<span class="ident">Out</span> outputma, <span class="ident">MA</span> mb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"><span >Monad with the combined output</span></div></div></div><div style="display:none" id="code-BindReturn__Out__outputma__MA__mb_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="Fail"></a>Fail(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fail__Exception__err_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Produce a monad of <span class='code-inline'>MA</span> in it&#39;s failed state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">err</div><div class="arg-type"><span class="ident">Exception</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">Fail</span>(<span class="ident">Exception</span> err = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Fail__Exception__err_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="Fail"></a>Fail(object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fail__object__err_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Produce a monad of <span class='code-inline'>MA</span> in it&#39;s failed state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">err</div><div class="arg-type"><span class="keyword">object</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">Fail</span>(<span class="keyword">object</span> err)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Fail__object__err_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="Id"></a>Id(Func&lt;Env, MA&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Id__Func_Env_MA_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The <span class='code-inline'>Id</span> function allows the <span class='code-inline'>Bind</span> function to construct a monad from a function rather than <span class='code-inline'>MA</span>.  It&#39;s a form of double-dispatch like the <span class='code-inline'>BindReturn</span> function.  It hands context to the type that knows how to construct.  This facilitates the unification of Monads that  take arguments (like <span class='code-inline'>Reader</span>, <span class='code-inline'>State</span>, etc.) with ones that don&#39;t (<span class='code-inline'>Option</span>, <span class='code-inline'>Try</span>, <span class='code-inline'>Writer</span>, <span class='code-inline'>Lst</span>,  <span class='code-inline'>Either</span>, etc.) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">MA</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >For monads that don&#39;t take arguments, they will have an input type of <span class='code-inline'>Unit</span>.  And so implementing <span class='code-inline'>Id</span> is as simple as (for <span class='code-inline'>Option&lt;A&gt;</span>):<br/><br/><div class='code-line'>     public Option&lt;A&gt; Id(Func&lt;Unit, Option&lt;A&gt;&gt; ma) =&gt;</div><div class='code-line'>         ma(unit);</div><br/><br/> The most complex example is the <span class='code-inline'>State</span> monad.  It takes a type <span class='code-inline'>S</span> which is the input state:<br/><br/><div class='code-line'>     public State&lt;S, A&gt; Id(Func&lt;S, State&lt;S, A&gt;&gt; ma) =&gt; </div><div class='code-line'>         state =&gt; ma(state)(state);</div><br/><br/> That appears to be ignoring the return state of <span class='code-inline'>ma(state)</span>, but if you look at the <span class='code-inline'>Bind</span> and <span class='code-inline'>BindReturn</span> functions for <span class='code-inline'>MState</span>:<br/><br/><div class='code-line'>     public MB Bind&lt;MONADB, MB, B&gt;(State&lt;S, A&gt; ma, Func&lt;A, MB&gt; f) </div><div class='code-line'>         where MONADB : struct, Monad&lt;S, (S State, bool IsFaulted), MB, B&gt; =&gt;</div><div class='code-line'>             default(MONADB).Id(state =&gt;</div><div class='code-line'>             {</div><div class='code-line'>                 var (a, sa, faulted) = ma(state);</div><div class='code-line'>                 return faulted</div><div class='code-line'>                     ? default(MONADB).Fail()</div><div class='code-line'>                     : default(MONADB).BindReturn((sa, faulted), f(a));</div><div class='code-line'>             });</div><br/><br/><div class='code-line'>     public State&lt;S, A&gt; BindReturn((S State, bool IsFaulted) output, State&lt;S, A&gt; mb) =&gt;</div><div class='code-line'>         _ =&gt; mb(output.State);</div><br/><br/> It should be clear that <span class='code-inline'>Id</span> accepts the state (the first <span class='code-inline'>state</span> in <span class='code-inline'>ma(state)(state)</span>), and it&#39;s result is the return value of <span class='code-inline'>BindReturn</span> which ignores its incoming state so that it can bind the output of the call to <span class='code-inline'>ma(state)</span> in the <span class='code-inline'>Bind</span> function.<br/><br/> Simple monads that don&#39;t take parameters simply ignore this in thier <span class='code-inline'>Bind</span> functions:<br/><br/><div class='code-line'>     public MB Bind&lt;MONADB, MB, B&gt;(Option&lt;A&gt; ma, Func&lt;A, MB&gt; f) </div><div class='code-line'>         where MONADB : struct, Monad&lt;Unit, Unit, MB, B&gt; =&gt;</div><div class='code-line'>             ma.IsSome &amp;&amp; f != null</div><div class='code-line'>                 ? f(ma.Value)</div><div class='code-line'>                 : default(MONADB).Fail();</div><br/><br/> The <span class='code-inline'>Id</span> function would allow two monads of different types to be bound as long as their input and output types are the same. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">Id</span>(<span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">MA</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Id__Func_Env_MA_ma_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="IdAsync"></a>IdAsync(Func&lt;Env, Task&lt;MA&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IdAsync__Func_Env_Task&lt;MA>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The <span class='code-inline'>IdAsync</span> function allows the <span class='code-inline'>Bind</span> function to asynchronously construct a monad from a function  that returns a <span class='code-inline'>Task&lt;MA&gt;</span> rather than <span class='code-inline'>MA</span>.  It&#39;s a form of double-dispatch like the <span class='code-inline'>BindReturn</span>  function.  It hands context to the type that knows how to construct.  This facilitates the  unification of Monads that are asynchronous in nature (like <span class='code-inline'>TryAsync</span>, <span class='code-inline'>TryOptionAsync</span>, <span class='code-inline'>Task</span>) with ones that arent&#39;t (<span class='code-inline'>State</span>, <span class='code-inline'>Reader</span>, <span class='code-inline'>Writer</span>, <span class='code-inline'>Option</span>, <span class='code-inline'>Try</span>, <span class='code-inline'>Lst</span>, <span class='code-inline'>Either</span>, etc.) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">Task</span>&lt;<span class="ident">MA</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >This is the async version of <span class='code-inline'>Id(ma)</span>.  It allows the asynchronous type to return without waiting for a result.  For example, <span class='code-inline'>TryAsync</span>:<br/><br/><div class='code-line'>     public TryAsync&lt;A&gt; IdAsync(Func&lt;Unit, Task&lt;TryAsync&lt;A&gt;&gt;&gt; ma) =&gt;</div><div class='code-line'>         new TryAsync&lt;A&gt;(() =&gt;</div><div class='code-line'>             from a in ma(unit)</div><div class='code-line'>             let b = a()</div><div class='code-line'>             from c in b</div><div class='code-line'>             select c);</div><br/><br/> The LINQ expression is using the <span class='code-inline'>Task&lt;A&gt;</span> <span class='code-inline'>Select</span> and <span class='code-inline'>SelectMany</span> overloads.  So the result is  asynchronous.<br/><br/> If you look at <span class='code-inline'>IdAsync</span> for <span class='code-inline'>Option</span>, which is not an asynchronous type, you&#39;ll see it waits for the Result:<br/><br/><div class='code-line'>     public Option&lt;A&gt; IdAsync(Func&lt;Unit, Task&lt;Option&lt;A&gt;&gt;&gt; ma) =&gt;</div><div class='code-line'>         ma(unit).Result;</div><br/><br/> That means you can bind asynchronous and synchronous monads together, but the result will be synchronous. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">IdAsync</span>(<span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">Task</span>&lt;<span class="ident">MA</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div></div><div style="display:none" id="code-IdAsync__Func_Env_Task&lt;MA>_ma_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="Plus"></a>Plus(MA, MA)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Plus__MA__a__MA__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">MA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">MA</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">Plus</span>(<span class="ident">MA</span> a, <span class="ident">MA</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Plus__MA__a__MA__b_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="Return"></a>Return(Func&lt;Env, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Return__Func_Env_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lazy monad constructor function.  Provide the bound value <span class='code-inline'>A</span> to construct  a new monad of type <span class='code-inline'>MA</span>.  This varies from the &#39;standard&#39; construction of monadic types in that it takes an input parameter.  This function allows monadics that take parameters (like <span class='code-inline'>Reader</span> and <span class='code-inline'>State</span>) to be unified with  non-parametric monads like (<span class='code-inline'>Option</span>, <span class='code-inline'>Either</span>, etc.), which take <span class='code-inline'>Unit</span> as their input argument. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >Any instance of this interface must be a <span class='code-inline'>struct</span> to use the <span class='code-inline'>Return</span> function  effectively. Then the instance can be used as a generic argument constrained  to:<br/><br/><div class='code-line'>     where MonadA : struct, Monad&lt;Env, Out, MA, A&gt;</div><br/><br/> And any consumer of the argument can call:<br/><br/><div class='code-line'>     MA monad = default(MonadA).Return(a);</div><br/><br/> To construct a monad of type <span class='code-inline'>MA</span>.   </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">Return</span>(<span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"><span >Monad of type <span class='code-inline'>MA</span></span></div></div></div><div style="display:none" id="code-Return__Func_Env_A_f_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="Zero"></a>Zero()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Zero__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Neutral element (<span class='code-inline'>None</span> in <span class='code-inline'>Option</span> for example) </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">Zero</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Zero__"><div class="section_title">SOURCE</div><div class="code"></div></div></div></div></body></html>