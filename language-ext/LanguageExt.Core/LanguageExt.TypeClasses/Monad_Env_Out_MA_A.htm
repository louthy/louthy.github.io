<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt.TypeClasses/index.htm">LanguageExt.TypeClasses</a> \ <span class="nav-bar-link" href="Monad_Env_Out_MA_A.htm">Monad&lt;Env, Out, MA, A&gt;</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Bind&lt;MONADB, MB, B>">Bind&lt;MONADB, MB, B&gt;(MA, Func&lt;A, MB&gt;)</a><a class="nav-link" href="#BindReturn">BindReturn(Out, MA)</a><a class="nav-link" href="#Fail">Fail(Exception)</a><a class="nav-link" href="#Fail">Fail(object)</a><a class="nav-link" href="#Id">Id(Func&lt;Env, MA&gt;)</a><a class="nav-link" href="#IdAsync">IdAsync(Func&lt;Env, Task&lt;MA&gt;&gt;)</a><a class="nav-link" href="#Plus">Plus(MA, MA)</a><a class="nav-link" href="#Return">Return(Func&lt;Env, A&gt;)</a><a class="nav-link" href="#Zero">Zero()</a></div><div class="content-panel"><h1 >Monad&lt;Env, Out, MA, A&gt; Interface</h1><p ><span >Monad type-class </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Typeclass]</div><span class="keyword">public</span> <span class="keyword">interface</span> <span class="ident">Monad</span>&lt;<span class="ident">Env</span>, <span class="ident">Out</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Env</span>, <span class="ident">MA</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt.TypeClasses</div></div><h2 >Methods</h2><div class="member-title"><a name="Bind&lt;MONADB, MB, B>"></a>Bind&lt;MONADB, MB, B&gt;(MA, Func&lt;A, MB&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_MONADB_MB_B_MA__ma__Func_A_MB_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Monadic bind </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">MA</span></div></div><div class="arg-desc">Monad to bind</div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt;</div></div><div class="arg-desc">Bind function</div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">private</span> <span class="ident">MB</span> <span class="ident">Bind</span>&lt;<span class="ident">MONADB</span>, <span class="ident">MB</span>, <span class="ident">B</span>&gt;(<span class="ident">MA</span> ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MB</span></div><div class="normal"><span >Monad of type MB derived from Monad of B</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MONADB</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">Env</span>, <span class="ident">Out</span>, <span class="ident">MB</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-Bind_MONADB_MB_B_MA__ma__Func_A_MB_f_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="BindReturn"></a>BindReturn(Out, MA)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindReturn__Out__outputma__MA__mb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Used for double dispatch by the bind function for monadic types that need to construct an output value/state (like MState and MWriter).  For all other monad types just return mb. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">outputma</div><div class="arg-type"><span class="ident">Out</span></div></div><div class="arg-desc">Output from the first part of a monadic bind</div></div><div class="arg"><div class="arg-header"><div class="arg-name">mb</div><div class="arg-type"><span class="ident">MA</span></div></div><div class="arg-desc">Monadic to invoke.  Get the results from this to combine with maOutput and then re-wrap</div></div><div class="section_title">REMARKS</div><span >This is an example from the Writer monad.  Note how the Output argument for the Writer monad is (W, bool).  W is what the Writer tells, and bool is a flag stating whether it&#39;s faulted or not.  The Bind function isn&#39;t able to combine the output from ma and mb, due  to limitations in the type-system&#39;s ability to explicitly constrain the return type of  Bind to be a Writer monad; the returned monad of MB could be any monad, but it must be  compatible with the input type of Unit and the output type of (W, bool).  It restricts  MB to be:<br/><br/>     Monad&lt;Unit, (W, bool), MB, B&gt;<br/><br/> So the Writer&#39;s Bind function calls BindReturn which &#39;double dispatches&#39; the job to the  BindReturn function on MONADB.  This is very much like the Visitor pattern in OO land. <br/><br/>     public MB Bind&lt;MONADB, MB, B&gt;(Writer&lt;MonoidW, W, A&gt; ma, Func&lt;A, MB&gt; f) where MONADB : struct, Monad&lt;Unit, (W, bool), MB, B&gt; =&gt;         default(MONADB).Id(_ =&gt;         {             var(a, output1, faulted) = ma();                 return faulted                     ? default(MONADB).Fail()                     : default(MONADB).BindReturn((output1, faulted), f(a));         });<br/><br/> Usually MONADB would be another Writer instance, because you would normally bind a Writer with a Writer, but it could be any monad that has the same input and output arguments. The BindReturn function is then able to invoke mb, because it knows its own context and combine the output from ma() and the output of mb.  <br/><br/>     public Writer&lt;MonoidW, W, A&gt; BindReturn((W, bool) output, Writer&lt;MonoidW, W, A&gt; mb)     {         var (b, output2, faulted) = mb();         return () =&gt; faulted             ? (default(A), default(MonoidW).Empty(), true)             : (b, default(MonoidW).Append(output.Item1, output2), false);     }<br/><br/> The effect of this with the monadic types in Language-Ext is that Writers are only bindable to Writers.  However simpler monads like Option can be bound to Either, Try, etc.  Because their BindReturn function looks like this:<br/><br/>     public Option&lt;A&gt; BindReturn(Unit _, Option&lt;A&gt; mb) =&gt;         mb;<br/><br/> The Bind function for Option doesn&#39;t call BindReturn at all:<br/><br/>     public MB Bind&lt;MONADB, MB, B&gt;(Option&lt;A&gt; ma, Func&lt;A, MB&gt; f) where MONADB : struct, Monad&lt;Unit, Unit, MB, B&gt; =&gt;         ma.IsSome &amp;&amp; f != null             ? f(ma.Value)             : default(MONADB).Fail();<br/><br/> So why implement it?  If someone tries to return an Option from a Bind call with the source monad of another type, it may call BindReturn.  And the Option respose would be to just return itself.<br/><br/> So Bind and BindReturn should be seen as two halves of the same function.  They&#39;re there to make use of the instances knowledge about itself, but not its generic return types. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">BindReturn</span>(<span class="ident">Out</span> outputma, <span class="ident">MA</span> mb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"><span >Monad with the combined output</span></div></div></div><div style="display:none" id="code-BindReturn__Out__outputma__MA__mb_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="Fail"></a>Fail(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fail__Exception__err_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Produce a monad of MA in it&#39;s failed state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">err</div><div class="arg-type"><span class="ident">Exception</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">Fail</span>(<span class="ident">Exception</span> err = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Fail__Exception__err_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="Fail"></a>Fail(object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fail__object__err_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Produce a monad of MA in it&#39;s failed state </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">err</div><div class="arg-type"><span class="keyword">object</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">Fail</span>(<span class="keyword">object</span> err)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Fail__object__err_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="Id"></a>Id(Func&lt;Env, MA&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Id__Func_Env_MA_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The Id function allows the Bind function to construct a monad from a function rather than MA.  It&#39;s a form of double-dispatch like the BindReturn function.  It hands context to the type that knows how to construct.  This facilitates the unification of Monads that  take arguments (like Reader, State, etc.) with ones that don&#39;t (Option, Try, Writer, Lst,  Either, etc.) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">MA</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >For Monads that don&#39;t take arguments, they will have an input type of Unit.  And so implementing Id is as simple as (for Option&lt;A&gt;):<br/><br/>     public Option&lt;A&gt; Id(Func&lt;Unit, Option&lt;A&gt;&gt; ma) =&gt;         ma(unit);<br/><br/> The most complex example is the State monad.  It takes a type S which is the input state:<br/><br/>     public State&lt;S, A&gt; Id(Func&lt;S, State&lt;S, A&gt;&gt; ma) =&gt;          state =&gt; ma(state)(state);<br/><br/> That appears to be ignoring the return state of ma(state), but if you look at the Bind and BindReturn functions for MState:<br/><br/>     public MB Bind&lt;MONADB, MB, B&gt;(State&lt;S, A&gt; ma, Func&lt;A, MB&gt; f) where MONADB : struct, Monad&lt;S, (S State, bool IsFaulted), MB, B&gt; =&gt;         default(MONADB).Id(state =&gt;         {             var (a, sa, faulted) = ma(state);             return faulted                 ? default(MONADB).Fail()                 : default(MONADB).BindReturn((sa, faulted), f(a));         });<br/><br/>     public State&lt;S, A&gt; BindReturn((S State, bool IsFaulted) output, State&lt;S, A&gt; mb) =&gt;         _ =&gt; mb(output.State);<br/><br/> It should be clear that Id accepts the state (the first &#39;state&#39; in ma(state)(state)), and it&#39;s result is the return value of BindReturn which ignores its incoming state so that it can bind the output of the call to ma(state) in the Bind function.<br/><br/> Simple monads that don&#39;t take parameters simply ignore this in thier Bind functions:<br/><br/>     public MB Bind&lt;MONADB, MB, B&gt;(Option&lt;A&gt; ma, Func&lt;A, MB&gt; f) where MONADB : struct, Monad&lt;Unit, Unit, MB, B&gt; =&gt;         ma.IsSome &amp;&amp; f != null             ? f(ma.Value)             : default(MONADB).Fail();<br/><br/> The Id function would allow two monads of different types to be bound as long as their input and output types are the same. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">Id</span>(<span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">MA</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Id__Func_Env_MA_ma_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="IdAsync"></a>IdAsync(Func&lt;Env, Task&lt;MA&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IdAsync__Func_Env_Task&lt;MA>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The Id function allows the Bind function to asynchronously construct a monad from a function  that returns a Task&lt;AM&gt; rather than MA.  It&#39;s a form of double-dispatch like the BindReturn  function.  It hands context to the type that knows how to construct.  This facilitates the  unification of Monads that are asynchronous in nature (like TryAsync, TryOptionAsync, Task) with ones that arent&#39;t (State, Reader, Writer, Option, Try, Lst, Either, etc.) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">Task</span>&lt;<span class="ident">MA</span>&gt;&gt;</div></div></div><div class="section_title">REMARKS</div><span >This is the async version of Id(ma).  It allows the asynchronous type to return without waiting for a result.  For example, TryAsync:<br/><br/>     public TryAsync&lt;A&gt; IdAsync(Func&lt;Unit, Task&lt;TryAsync&lt;A&gt;&gt;&gt; ma) =&gt;         new TryAsync&lt;A&gt;(() =&gt;             from a in ma(unit)             let b = a()             from c in b             select c);<br/><br/> The LINQ expression is using the Task Select and SelectMany overloads.  So the result is  asynchronous.<br/><br/> If you look at IdAsync for Option, which is not an asynchronous type, you&#39;ll see it waits for the Result:<br/><br/>     public Option&lt;A&gt; IdAsync(Func&lt;Unit, Task&lt;Option&lt;A&gt;&gt;&gt; ma) =&gt;         ma(unit).Result;<br/><br/> That means you can bind asynchronous and synchronous monads together, but the result will be synchronous. </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">IdAsync</span>(<span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">Task</span>&lt;<span class="ident">MA</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div></div><div style="display:none" id="code-IdAsync__Func_Env_Task&lt;MA>_ma_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="Plus"></a>Plus(MA, MA)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Plus__MA__a__MA__b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Associative binary operation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">MA</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">MA</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">Plus</span>(<span class="ident">MA</span> a, <span class="ident">MA</span> b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Plus__MA__a__MA__b_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="Return"></a>Return(Func&lt;Env, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Return__Func_Env_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Lazy monad constructor function.  Provide the bound value A to construct  a new monad of type MA.  This varies from the &#39;standard&#39; construction of monadic types in that it takes an input parameter.  This function allows monadics that take parameters (like Reader and State) to be unified with  non-parametric monads like (Option, Either, etc.), which take Unit as their input argument. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >Any instance of this interface must be a struct to use the Return function  effectively. Then the instance can be used as a generic argument constrained  to:<br/><br/>     where MonadA : struct, Monad&lt;Env, Out, MA, A&gt;<br/><br/> And any consumer of the argument can call:<br/><br/>     MA monad = default(MonadA).Return(a);<br/><br/> To construct a monad of type MA.   </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">Return</span>(<span class="ident">Func</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"><span >Monad of type MA</span></div></div></div><div style="display:none" id="code-Return__Func_Env_A_f_"><div class="section_title">SOURCE</div><div class="code"></div></div></div><div class="member-title"><a name="Zero"></a>Zero()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Zero__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Neutral element (None in Option for example) </span></p></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">private</span> <span class="ident">MA</span> <span class="ident">Zero</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MA</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Zero__"><div class="section_title">SOURCE</div><div class="code"></div></div></div></div></body></html>