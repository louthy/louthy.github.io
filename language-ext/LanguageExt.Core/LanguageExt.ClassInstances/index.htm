<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <span class="nav-bar-link" href="../LanguageExt.ClassInstances/index.htm">LanguageExt.ClassInstances</span></div><div class="nav-panel"><h3 >STRUCTS</h3><a class="nav-link" href="#All_">All</a><a class="nav-link" href="#Any_">Any</a><a class="nav-link" href="#ApplOptional_OptionFAB_OptionFA_OptionFB_FAB_FA_FB_A_B">ApplOptional&lt;OptionFAB, OptionFA, OptionFB, FAB, FA, FB, A, B&gt;</a><a class="nav-link" href="#ApplOptional_OptionFABC_OptionFBC_OptionFA_OptionFB_OptionFC_FABC_FBC_FA_FB_FC_A_B_C">ApplOptional&lt;OptionFABC, OptionFBC, OptionFA, OptionFB, OptionFC, FABC, FBC, FA, FB, FC, A, B, C&gt;</a><a class="nav-link" href="#ChoiceResult_A">ChoiceResult&lt;A&gt;</a><a class="nav-link" href="#EqArr_EQ_A">EqArr&lt;EQ, A&gt;</a><a class="nav-link" href="#EqArray_EQ_A">EqArray&lt;EQ, A&gt;</a><a class="nav-link" href="#EqBigInt_">EqBigInt</a><a class="nav-link" href="#EqBool_">EqBool</a><a class="nav-link" href="#EqChar_">EqChar</a><a class="nav-link" href="#EqChoice_EQA_EQB_CHOICE_CH_A_B">EqChoice&lt;EQA, EQB, CHOICE, CH, A, B&gt;</a><a class="nav-link" href="#EqChoice_EQB_CHOICE_CH_A_B">EqChoice&lt;EQB, CHOICE, CH, A, B&gt;</a><a class="nav-link" href="#EqDateTime_">EqDateTime</a><a class="nav-link" href="#EqDecimal_">EqDecimal</a><a class="nav-link" href="#EqDefault_A">EqDefault&lt;A&gt;</a><a class="nav-link" href="#EqDouble_">EqDouble</a><a class="nav-link" href="#EqFloat_">EqFloat</a><a class="nav-link" href="#EqGuid_">EqGuid</a><a class="nav-link" href="#EqHashSet_EQ_A">EqHashSet&lt;EQ, A&gt;</a><a class="nav-link" href="#EqInt_">EqInt</a><a class="nav-link" href="#EqLong_">EqLong</a><a class="nav-link" href="#EqLst_EQ_A">EqLst&lt;EQ, A&gt;</a><a class="nav-link" href="#EqNewType_NEWTYPE_EQ_A_PRED">EqNewType&lt;NEWTYPE, EQ, A, PRED&gt;</a><a class="nav-link" href="#EqNewType_NEWTYPE_EQ_A">EqNewType&lt;NEWTYPE, EQ, A&gt;</a><a class="nav-link" href="#EqNumType_NUMTYPE_NUM_A_PRED">EqNumType&lt;NUMTYPE, NUM, A, PRED&gt;</a><a class="nav-link" href="#EqNumType_NUMTYPE_NUM_A">EqNumType&lt;NUMTYPE, NUM, A&gt;</a><a class="nav-link" href="#EqOpt_EQ_OPTION_OA_A">EqOpt&lt;EQ, OPTION, OA, A&gt;</a><a class="nav-link" href="#EqQue_EQ_A">EqQue&lt;EQ, A&gt;</a><a class="nav-link" href="#EqSeq_EQ_A">EqSeq&lt;EQ, A&gt;</a><a class="nav-link" href="#EqSet_EQ_A">EqSet&lt;EQ, A&gt;</a><a class="nav-link" href="#EqShort_">EqShort</a><a class="nav-link" href="#EqStck_EQ_A">EqStck&lt;EQ, A&gt;</a><a class="nav-link" href="#EqString_">EqString</a><a class="nav-link" href="#EqStringCurrentCulture_">EqStringCurrentCulture</a><a class="nav-link" href="#EqStringCurrentCultureIgnoreCase_">EqStringCurrentCultureIgnoreCase</a><a class="nav-link" href="#EqStringOrdinal_">EqStringOrdinal</a><a class="nav-link" href="#EqStringOrdinalIgnoreCase_">EqStringOrdinalIgnoreCase</a><a class="nav-link" href="#EqTry_EQ_A">EqTry&lt;EQ, A&gt;</a><a class="nav-link" href="#EqTryOpt_EQ_A">EqTryOpt&lt;EQ, A&gt;</a><a class="nav-link" href="#FArr_A_B_C">FArr&lt;A, B, C&gt;</a><a class="nav-link" href="#FArr_A_B">FArr&lt;A, B&gt;</a><a class="nav-link" href="#FArr_A">FArr&lt;A&gt;</a><a class="nav-link" href="#FArray_A_B_C">FArray&lt;A, B, C&gt;</a><a class="nav-link" href="#FArray_A_B">FArray&lt;A, B&gt;</a><a class="nav-link" href="#FArray_A">FArray&lt;A&gt;</a><a class="nav-link" href="#FEither_L_A_B_C">FEither&lt;L, A, B, C&gt;</a><a class="nav-link" href="#FEither_L_R_R2">FEither&lt;L, R, R2&gt;</a><a class="nav-link" href="#FEitherBi_L_R_L2_R2">FEitherBi&lt;L, R, L2, R2&gt;</a><a class="nav-link" href="#FEitherUnsafe_L_A_B_C">FEitherUnsafe&lt;L, A, B, C&gt;</a><a class="nav-link" href="#FEitherUnsafe_L_R_R2">FEitherUnsafe&lt;L, R, R2&gt;</a><a class="nav-link" href="#FEitherUnsafeBi_L_R_L2_R2">FEitherUnsafeBi&lt;L, R, L2, R2&gt;</a><a class="nav-link" href="#FHashMap_EqK_K_A_B">FHashMap&lt;EqK, K, A, B&gt;</a><a class="nav-link" href="#FHashMap_K_A_B">FHashMap&lt;K, A, B&gt;</a><a class="nav-link" href="#FHashSet_A_B_C">FHashSet&lt;A, B, C&gt;</a><a class="nav-link" href="#FHashSet_A_B">FHashSet&lt;A, B&gt;</a><a class="nav-link" href="#FHashSet_A">FHashSet&lt;A&gt;</a><a class="nav-link" href="#FHashSet_OrdFAAA_OrdFAA_OrdA_A">FHashSet&lt;OrdFAAA, OrdFAA, OrdA, A&gt;</a><a class="nav-link" href="#FHashSet_OrdFAB_OrdA_OrdB_A_B">FHashSet&lt;OrdFAB, OrdA, OrdB, A, B&gt;</a><a class="nav-link" href="#FHashSet_OrdFABC_OrdFBC_OrdA_OrdB_OrdC_A_B_C">FHashSet&lt;OrdFABC, OrdFBC, OrdA, OrdB, OrdC, A, B, C&gt;</a><a class="nav-link" href="#FLst_A_B_C">FLst&lt;A, B, C&gt;</a><a class="nav-link" href="#FLst_A_B">FLst&lt;A, B&gt;</a><a class="nav-link" href="#FLst_A">FLst&lt;A&gt;</a><a class="nav-link" href="#FMap_K_A_B">FMap&lt;K, A, B&gt;</a><a class="nav-link" href="#FMap_OrdK_K_A_B">FMap&lt;OrdK, K, A, B&gt;</a><a class="nav-link" href="#FNullable_A_B">FNullable&lt;A, B&gt;</a><a class="nav-link" href="#FoldTuple_A">FoldTuple&lt;A&gt;</a><a class="nav-link" href="#FOption_A_B_C">FOption&lt;A, B, C&gt;</a><a class="nav-link" href="#FOption_A_B">FOption&lt;A, B&gt;</a><a class="nav-link" href="#FOptional_OptionalA_OptionalB_OA_OB_A_B">FOptional&lt;OptionalA, OptionalB, OA, OB, A, B&gt;</a><a class="nav-link" href="#FOptionUnsafe_A_B_C">FOptionUnsafe&lt;A, B, C&gt;</a><a class="nav-link" href="#FOptionUnsafe_A_B">FOptionUnsafe&lt;A, B&gt;</a><a class="nav-link" href="#FQue_A_B">FQue&lt;A, B&gt;</a><a class="nav-link" href="#FSeq_A_B_C">FSeq&lt;A, B, C&gt;</a><a class="nav-link" href="#FSeq_A_B">FSeq&lt;A, B&gt;</a><a class="nav-link" href="#FSeq_A">FSeq&lt;A&gt;</a><a class="nav-link" href="#FSet_A_B_C">FSet&lt;A, B, C&gt;</a><a class="nav-link" href="#FSet_A_B">FSet&lt;A, B&gt;</a><a class="nav-link" href="#FSet_A">FSet&lt;A&gt;</a><a class="nav-link" href="#FSet_OrdFAAA_OrdFAA_OrdA_A">FSet&lt;OrdFAAA, OrdFAA, OrdA, A&gt;</a><a class="nav-link" href="#FSet_OrdFAB_OrdA_OrdB_A_B">FSet&lt;OrdFAB, OrdA, OrdB, A, B&gt;</a><a class="nav-link" href="#FSet_OrdFABC_OrdFBC_OrdA_OrdB_OrdC_A_B_C">FSet&lt;OrdFABC, OrdFBC, OrdA, OrdB, OrdC, A, B, C&gt;</a><a class="nav-link" href="#FStck_A_B">FStck&lt;A, B&gt;</a><a class="nav-link" href="#FTask_A_B_C">FTask&lt;A, B, C&gt;</a><a class="nav-link" href="#FTask_A_B">FTask&lt;A, B&gt;</a><a class="nav-link" href="#FTask_A">FTask&lt;A&gt;</a><a class="nav-link" href="#FTry_A_B_C">FTry&lt;A, B, C&gt;</a><a class="nav-link" href="#FTry_A_B">FTry&lt;A, B&gt;</a><a class="nav-link" href="#FTry_A">FTry&lt;A&gt;</a><a class="nav-link" href="#FTryAsync_A_B_C">FTryAsync&lt;A, B, C&gt;</a><a class="nav-link" href="#FTryAsync_A_B">FTryAsync&lt;A, B&gt;</a><a class="nav-link" href="#FTryAsync_A">FTryAsync&lt;A&gt;</a><a class="nav-link" href="#FTryOption_A_B_C">FTryOption&lt;A, B, C&gt;</a><a class="nav-link" href="#FTryOption_A_B">FTryOption&lt;A, B&gt;</a><a class="nav-link" href="#FTryOption_A">FTryOption&lt;A&gt;</a><a class="nav-link" href="#FTryOptionAsync_A_B_C">FTryOptionAsync&lt;A, B, C&gt;</a><a class="nav-link" href="#FTryOptionAsync_A_B">FTryOptionAsync&lt;A, B&gt;</a><a class="nav-link" href="#FTryOptionAsync_A">FTryOptionAsync&lt;A&gt;</a><a class="nav-link" href="#FTupleBi_A_B_U_V">FTupleBi&lt;A, B, U, V&gt;</a><a class="nav-link" href="#FTupleFst_A_B_C_R">FTupleFst&lt;A, B, C, R&gt;</a><a class="nav-link" href="#FTupleFst_A_B_R">FTupleFst&lt;A, B, R&gt;</a><a class="nav-link" href="#FTupleSnd_A_B_C_R">FTupleSnd&lt;A, B, C, R&gt;</a><a class="nav-link" href="#FTupleSnd_A_B_R">FTupleSnd&lt;A, B, R&gt;</a><a class="nav-link" href="#FTupleThrd_A_B_C_R">FTupleThrd&lt;A, B, C, R&gt;</a><a class="nav-link" href="#FTupleTri_A_B_C_T_U_V">FTupleTri&lt;A, B, C, T, U, V&gt;</a><a class="nav-link" href="#MArr_A">MArr&lt;A&gt;</a><a class="nav-link" href="#MArray_A">MArray&lt;A&gt;</a><a class="nav-link" href="#Max_ORD_A">Max&lt;ORD, A&gt;</a><a class="nav-link" href="#MEither_L_R">MEither&lt;L, R&gt;</a><a class="nav-link" href="#MEitherUnsafe_L_R">MEitherUnsafe&lt;L, R&gt;</a><a class="nav-link" href="#MHashMap_K_V">MHashMap&lt;K, V&gt;</a><a class="nav-link" href="#MHashSet_A">MHashSet&lt;A&gt;</a><a class="nav-link" href="#MIdentity_A">MIdentity&lt;A&gt;</a><a class="nav-link" href="#Min_ORD_A">Min&lt;ORD, A&gt;</a><a class="nav-link" href="#MLst_A">MLst&lt;A&gt;</a><a class="nav-link" href="#MMap_K_V">MMap&lt;K, V&gt;</a><a class="nav-link" href="#MNullable_A">MNullable&lt;A&gt;</a><a class="nav-link" href="#MOption_A">MOption&lt;A&gt;</a><a class="nav-link" href="#MOptionUnsafe_A">MOptionUnsafe&lt;A&gt;</a><a class="nav-link" href="#MQue_A">MQue&lt;A&gt;</a><a class="nav-link" href="#MReader_Env_A">MReader&lt;Env, A&gt;</a><a class="nav-link" href="#MSeq_A">MSeq&lt;A&gt;</a><a class="nav-link" href="#MSet_A">MSet&lt;A&gt;</a><a class="nav-link" href="#MState_S_A">MState&lt;S, A&gt;</a><a class="nav-link" href="#MStck_A">MStck&lt;A&gt;</a><a class="nav-link" href="#MTask_A">MTask&lt;A&gt;</a><a class="nav-link" href="#MTry_A">MTry&lt;A&gt;</a><a class="nav-link" href="#MTryAsync_A">MTryAsync&lt;A&gt;</a><a class="nav-link" href="#MTryOption_A">MTryOption&lt;A&gt;</a><a class="nav-link" href="#MTryOptionAsync_A">MTryOptionAsync&lt;A&gt;</a><a class="nav-link" href="#MUnit_">MUnit</a><a class="nav-link" href="#MWriter_MonoidW_W_A">MWriter&lt;MonoidW, W, A&gt;</a><a class="nav-link" href="#OrdArr_ORD_A">OrdArr&lt;ORD, A&gt;</a><a class="nav-link" href="#OrdArray_ORD_A">OrdArray&lt;ORD, A&gt;</a><a class="nav-link" href="#OrdBigInt_">OrdBigInt</a><a class="nav-link" href="#OrdBool_">OrdBool</a><a class="nav-link" href="#OrdChar_">OrdChar</a><a class="nav-link" href="#OrdChoice_ORD_CHOICE_CH_A_B">OrdChoice&lt;ORD, CHOICE, CH, A, B&gt;</a><a class="nav-link" href="#OrdChoice_ORDA_ORDB_CHOICE_CH_A_B">OrdChoice&lt;ORDA, ORDB, CHOICE, CH, A, B&gt;</a><a class="nav-link" href="#OrdDateTime_">OrdDateTime</a><a class="nav-link" href="#OrdDecimal_">OrdDecimal</a><a class="nav-link" href="#OrdDefault_A">OrdDefault&lt;A&gt;</a><a class="nav-link" href="#OrdDouble_">OrdDouble</a><a class="nav-link" href="#OrdFloat_">OrdFloat</a><a class="nav-link" href="#OrdGuid_">OrdGuid</a><a class="nav-link" href="#OrdInt_">OrdInt</a><a class="nav-link" href="#OrdLong_">OrdLong</a><a class="nav-link" href="#OrdLst_ORD_A">OrdLst&lt;ORD, A&gt;</a><a class="nav-link" href="#OrdNewType_NEWTYPE_ORD_A_PRED">OrdNewType&lt;NEWTYPE, ORD, A, PRED&gt;</a><a class="nav-link" href="#OrdNewType_NEWTYPE_ORD_A">OrdNewType&lt;NEWTYPE, ORD, A&gt;</a><a class="nav-link" href="#OrdNumType_NUMTYPE_NUM_A_PRED">OrdNumType&lt;NUMTYPE, NUM, A, PRED&gt;</a><a class="nav-link" href="#OrdNumType_NUMTYPE_NUM_A">OrdNumType&lt;NUMTYPE, NUM, A&gt;</a><a class="nav-link" href="#OrdOpt_ORD_OPTION_OA_A">OrdOpt&lt;ORD, OPTION, OA, A&gt;</a><a class="nav-link" href="#OrdQue_ORD_A">OrdQue&lt;ORD, A&gt;</a><a class="nav-link" href="#OrdSeq_ORD_A">OrdSeq&lt;ORD, A&gt;</a><a class="nav-link" href="#OrdSet_ORD_A">OrdSet&lt;ORD, A&gt;</a><a class="nav-link" href="#OrdShort_">OrdShort</a><a class="nav-link" href="#OrdStck_ORD_A">OrdStck&lt;ORD, A&gt;</a><a class="nav-link" href="#OrdString_">OrdString</a><a class="nav-link" href="#OrdStringCurrentCulture_">OrdStringCurrentCulture</a><a class="nav-link" href="#OrdStringCurrentCultureIgnoreCase_">OrdStringCurrentCultureIgnoreCase</a><a class="nav-link" href="#OrdStringOrdinal_">OrdStringOrdinal</a><a class="nav-link" href="#OrdStringOrdinalIgnoreCase_">OrdStringOrdinalIgnoreCase</a><a class="nav-link" href="#Product_NUM_A">Product&lt;NUM, A&gt;</a><a class="nav-link" href="#Sum_NUM_A">Sum&lt;NUM, A&gt;</a><a class="nav-link" href="#TArr_A">TArr&lt;A&gt;</a><a class="nav-link" href="#TArray_A">TArray&lt;A&gt;</a><a class="nav-link" href="#TBigInt_">TBigInt</a><a class="nav-link" href="#TChar_">TChar</a><a class="nav-link" href="#TDecimal_">TDecimal</a><a class="nav-link" href="#TDouble_">TDouble</a><a class="nav-link" href="#TFloat_">TFloat</a><a class="nav-link" href="#TInt_">TInt</a><a class="nav-link" href="#TLong_">TLong</a><a class="nav-link" href="#TLst_A">TLst&lt;A&gt;</a><a class="nav-link" href="#TNumericChar_">TNumericChar</a><a class="nav-link" href="#TShort_">TShort</a><a class="nav-link" href="#TString_">TString</a><a class="nav-link" href="#TStringCurrentCulture_">TStringCurrentCulture</a><a class="nav-link" href="#TStringCurrentCultureIgnoreCase_">TStringCurrentCultureIgnoreCase</a><a class="nav-link" href="#TStringOrdinal_">TStringOrdinal</a><a class="nav-link" href="#TStringOrdinalIgnoreCase_">TStringOrdinalIgnoreCase</a></div><div class="content-panel"><h1 >LanguageExt.ClassInstances Namespace</h1><h2 >STRUCTS</h2><div class="doc-ns-type"><a name="All_"></a><div class="left"><p ><a class="type-name" href="All_.htm">All</a></p><p ><span >Booleans form a monoid under disjunctions. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">All</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="keyword">bool</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="Any_"></a><div class="left"><p ><a class="type-name" href="Any_.htm">Any</a></p><p ><span >Booleans form a monoid under conjunction. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Any</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="keyword">bool</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="ApplOptional_OptionFAB_OptionFA_OptionFB_FAB_FA_FB_A_B"></a><div class="left"><p ><a class="type-name" href="ApplOptional_OptionFAB_OptionFA_OptionFB_FAB_FA_FB_A_B.htm">ApplOptional&lt;OptionFAB, OptionFA, OptionFB, FAB, FA, FB, A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">ApplOptional</span>&lt;<span class="ident">OptionFAB</span>, <span class="ident">OptionFA</span>, <span class="ident">OptionFB</span>, <span class="ident">FAB</span>, <span class="ident">FA</span>, <span class="ident">FB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">FAB</span>, <span class="ident">FA</span>, <span class="ident">FB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="ApplOptional_OptionFABC_OptionFBC_OptionFA_OptionFB_OptionFC_FABC_FBC_FA_FB_FC_A_B_C"></a><div class="left"><p ><a class="type-name" href="ApplOptional_OptionFABC_OptionFBC_OptionFA_OptionFB_OptionFC_FABC_FBC_FA_FB_FC_A_B_C.htm">ApplOptional&lt;OptionFABC, OptionFBC, OptionFA, OptionFB, OptionFC, FABC, FBC, FA, FB, FC, A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">ApplOptional</span>&lt;<span class="ident">OptionFABC</span>, <span class="ident">OptionFBC</span>, <span class="ident">OptionFA</span>, <span class="ident">OptionFB</span>, <span class="ident">OptionFC</span>, <span class="ident">FABC</span>, <span class="ident">FBC</span>, <span class="ident">FA</span>, <span class="ident">FB</span>, <span class="ident">FC</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">FABC</span>, <span class="ident">FBC</span>, <span class="ident">FA</span>, <span class="ident">FB</span>, <span class="ident">FC</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="ChoiceResult_A"></a><div class="left"><p ><a class="type-name" href="ChoiceResult_A.htm">ChoiceResult&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">ChoiceResult</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Choice</span>&lt;<span class="ident">Result</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Exception</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqArr_EQ_A"></a><div class="left"><p ><a class="type-name" href="EqArr_EQ_A.htm">EqArr&lt;EQ, A&gt;</a></p><p ><span >Array equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqArr</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqArray_EQ_A"></a><div class="left"><p ><a class="type-name" href="EqArray_EQ_A.htm">EqArray&lt;EQ, A&gt;</a></p><p ><span >Array equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqArray</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqBigInt_"></a><div class="left"><p ><a class="type-name" href="EqBigInt_.htm">EqBigInt</a></p><p ><span >Integer equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqBigInt</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">BigInteger</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqBool_"></a><div class="left"><p ><a class="type-name" href="EqBool_.htm">EqBool</a></p><p ><span >Boolean equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqBool</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">bool</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqChar_"></a><div class="left"><p ><a class="type-name" href="EqChar_.htm">EqChar</a></p><p ><span >Char equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqChar</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">char</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqChoice_EQA_EQB_CHOICE_CH_A_B"></a><div class="left"><p ><a class="type-name" href="EqChoice_EQA_EQB_CHOICE_CH_A_B.htm">EqChoice&lt;EQA, EQB, CHOICE, CH, A, B&gt;</a></p><p ><span >Compare the equality of any type in the Either type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqChoice</span>&lt;<span class="ident">EQA</span>, <span class="ident">EQB</span>, <span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">CH</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqChoice_EQB_CHOICE_CH_A_B"></a><div class="left"><p ><a class="type-name" href="EqChoice_EQB_CHOICE_CH_A_B.htm">EqChoice&lt;EQB, CHOICE, CH, A, B&gt;</a></p><p ><span >Compare the equality of any type in the Either type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqChoice</span>&lt;<span class="ident">EQB</span>, <span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">CH</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqDateTime_"></a><div class="left"><p ><a class="type-name" href="EqDateTime_.htm">EqDateTime</a></p><p ><span >DateTime equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqDateTime</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">DateTime</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqDecimal_"></a><div class="left"><p ><a class="type-name" href="EqDecimal_.htm">EqDecimal</a></p><p ><span >Floating point equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqDecimal</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">decimal</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqDefault_A"></a><div class="left"><p ><a class="type-name" href="EqDefault_A.htm">EqDefault&lt;A&gt;</a></p><p ><span >Uses the standard .NET EqualityComparer&lt;A&gt;.Default.Equals(a,b) method to provide equality testing. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqDefault</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqDouble_"></a><div class="left"><p ><a class="type-name" href="EqDouble_.htm">EqDouble</a></p><p ><span >Floating point equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqDouble</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">double</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqFloat_"></a><div class="left"><p ><a class="type-name" href="EqFloat_.htm">EqFloat</a></p><p ><span >Floating point equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqFloat</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">float</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqGuid_"></a><div class="left"><p ><a class="type-name" href="EqGuid_.htm">EqGuid</a></p><p ><span >Guid equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqGuid</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Guid</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqHashSet_EQ_A"></a><div class="left"><p ><a class="type-name" href="EqHashSet_EQ_A.htm">EqHashSet&lt;EQ, A&gt;</a></p><p ><span >HashSet&lt;T&gt; equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqHashSet</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqInt_"></a><div class="left"><p ><a class="type-name" href="EqInt_.htm">EqInt</a></p><p ><span >Integer equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqInt</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">int</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqLong_"></a><div class="left"><p ><a class="type-name" href="EqLong_.htm">EqLong</a></p><p ><span >Integer equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqLong</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">long</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqLst_EQ_A"></a><div class="left"><p ><a class="type-name" href="EqLst_EQ_A.htm">EqLst&lt;EQ, A&gt;</a></p><p ><span >Equality test </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqLst</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqNewType_NEWTYPE_EQ_A_PRED"></a><div class="left"><p ><a class="type-name" href="EqNewType_NEWTYPE_EQ_A_PRED.htm">EqNewType&lt;NEWTYPE, EQ, A, PRED&gt;</a></p><p ><span >Compare the equality of any type in the NewType type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqNewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">EQ</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqNewType_NEWTYPE_EQ_A"></a><div class="left"><p ><a class="type-name" href="EqNewType_NEWTYPE_EQ_A.htm">EqNewType&lt;NEWTYPE, EQ, A&gt;</a></p><p ><span >Compare the equality of any type in the NewType type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqNewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">EQ</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqNumType_NUMTYPE_NUM_A_PRED"></a><div class="left"><p ><a class="type-name" href="EqNumType_NUMTYPE_NUM_A_PRED.htm">EqNumType&lt;NUMTYPE, NUM, A, PRED&gt;</a></p><p ><span >Compare the equality of any type in the NumType type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqNumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqNumType_NUMTYPE_NUM_A"></a><div class="left"><p ><a class="type-name" href="EqNumType_NUMTYPE_NUM_A.htm">EqNumType&lt;NUMTYPE, NUM, A&gt;</a></p><p ><span >Compare the equality of any type in the NumType type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqNumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqOpt_EQ_OPTION_OA_A"></a><div class="left"><p ><a class="type-name" href="EqOpt_EQ_OPTION_OA_A.htm">EqOpt&lt;EQ, OPTION, OA, A&gt;</a></p><p ><span >Compare the equality of any type in the Optional type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqOpt</span>&lt;<span class="ident">EQ</span>, <span class="ident">OPTION</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">OA</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqQue_EQ_A"></a><div class="left"><p ><a class="type-name" href="EqQue_EQ_A.htm">EqQue&lt;EQ, A&gt;</a></p><p ><span >Equality test </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqQue</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Que</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqSeq_EQ_A"></a><div class="left"><p ><a class="type-name" href="EqSeq_EQ_A.htm">EqSeq&lt;EQ, A&gt;</a></p><p ><span >Equality test </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqSeq</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqSet_EQ_A"></a><div class="left"><p ><a class="type-name" href="EqSet_EQ_A.htm">EqSet&lt;EQ, A&gt;</a></p><p ><span >Set&lt;T&gt; equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqSet</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqShort_"></a><div class="left"><p ><a class="type-name" href="EqShort_.htm">EqShort</a></p><p ><span >Integer equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqShort</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">short</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqStck_EQ_A"></a><div class="left"><p ><a class="type-name" href="EqStck_EQ_A.htm">EqStck&lt;EQ, A&gt;</a></p><p ><span >Equality test </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqStck</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqString_"></a><div class="left"><p ><a class="type-name" href="EqString_.htm">EqString</a></p><p ><span >String equality </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqString</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqStringCurrentCulture_"></a><div class="left"><p ><a class="type-name" href="EqStringCurrentCulture_.htm">EqStringCurrentCulture</a></p><p ><span >String equality (current culture) </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqStringCurrentCulture</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqStringCurrentCultureIgnoreCase_"></a><div class="left"><p ><a class="type-name" href="EqStringCurrentCultureIgnoreCase_.htm">EqStringCurrentCultureIgnoreCase</a></p><p ><span >String equality (current culture, ignore case) </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqStringCurrentCultureIgnoreCase</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqStringOrdinal_"></a><div class="left"><p ><a class="type-name" href="EqStringOrdinal_.htm">EqStringOrdinal</a></p><p ><span >String equality (ordinal) </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqStringOrdinal</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqStringOrdinalIgnoreCase_"></a><div class="left"><p ><a class="type-name" href="EqStringOrdinalIgnoreCase_.htm">EqStringOrdinalIgnoreCase</a></p><p ><span >String equality (ordinal, ignore case) </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqStringOrdinalIgnoreCase</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqTry_EQ_A"></a><div class="left"><p ><a class="type-name" href="EqTry_EQ_A.htm">EqTry&lt;EQ, A&gt;</a></p><p ><span >Compare the equality of any values bound by the Try monad </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqTry</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="EqTryOpt_EQ_A"></a><div class="left"><p ><a class="type-name" href="EqTryOpt_EQ_A.htm">EqTryOpt&lt;EQ, A&gt;</a></p><p ><span >Compare the equality of any type in the TryOption type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">EqTryOpt</span>&lt;<span class="ident">EQ</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="FArr_A_B_C"></a><div class="left"><p ><a class="type-name" href="FArr_A_B_C.htm">FArr&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FArr</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">Arr</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Arr</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Arr</span>&lt;<span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FArr_A_B"></a><div class="left"><p ><a class="type-name" href="FArr_A_B.htm">FArr&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FArr</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Arr</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Arr</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FArr_A"></a><div class="left"><p ><a class="type-name" href="FArr_A.htm">FArr&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FArr</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">Arr</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FArray_A_B_C"></a><div class="left"><p ><a class="type-name" href="FArray_A_B_C.htm">FArray&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FArray</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FArray_A_B"></a><div class="left"><p ><a class="type-name" href="FArray_A_B.htm">FArray&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FArray</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FArray_A"></a><div class="left"><p ><a class="type-name" href="FArray_A.htm">FArray&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FArray</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FEither_L_A_B_C"></a><div class="left"><p ><a class="type-name" href="FEither_L_A_B_C.htm">FEither&lt;L, A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FEither</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FEither_L_R_R2"></a><div class="left"><p ><a class="type-name" href="FEither_L_R_R2.htm">FEither&lt;L, R, R2&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FEither</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;, <span class="ident">R</span>, <span class="ident">R2</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;, <span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt;&gt;, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;, <span class="ident">R</span>, <span class="ident">R2</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FEitherBi_L_R_L2_R2"></a><div class="left"><p ><a class="type-name" href="FEitherBi_L_R_L2_R2.htm">FEitherBi&lt;L, R, L2, R2&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FEitherBi</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">L2</span>, <span class="ident">R2</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">Either</span>&lt;<span class="ident">L2</span>, <span class="ident">R2</span>&gt;, <span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">L2</span>, <span class="ident">R2</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt;&gt;, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;, <span class="ident">R</span>, <span class="ident">R2</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FEitherUnsafe_L_A_B_C"></a><div class="left"><p ><a class="type-name" href="FEitherUnsafe_L_A_B_C.htm">FEitherUnsafe&lt;L, A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FEitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">A</span>&gt;, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">B</span>&gt;, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FEitherUnsafe_L_R_R2"></a><div class="left"><p ><a class="type-name" href="FEitherUnsafe_L_R_R2.htm">FEitherUnsafe&lt;L, R, R2&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FEitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;, <span class="ident">R</span>, <span class="ident">R2</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;, <span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">R2</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt;&gt;, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;, <span class="ident">R</span>, <span class="ident">R2</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FEitherUnsafeBi_L_R_L2_R2"></a><div class="left"><p ><a class="type-name" href="FEitherUnsafeBi_L_R_L2_R2.htm">FEitherUnsafeBi&lt;L, R, L2, R2&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FEitherUnsafeBi</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">L2</span>, <span class="ident">R2</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L2</span>, <span class="ident">R2</span>&gt;, <span class="ident">L</span>, <span class="ident">R</span>, <span class="ident">L2</span>, <span class="ident">R2</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">Func</span>&lt;<span class="ident">R</span>, <span class="ident">R2</span>&gt;&gt;, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R2</span>&gt;, <span class="ident">R</span>, <span class="ident">R2</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FHashMap_EqK_K_A_B"></a><div class="left"><p ><a class="type-name" href="FHashMap_EqK_K_A_B.htm">FHashMap&lt;EqK, K, A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FHashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">A</span>&gt;, <span class="ident">HashMap</span>&lt;<span class="ident">EqK</span>, <span class="ident">K</span>, <span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FHashMap_K_A_B"></a><div class="left"><p ><a class="type-name" href="FHashMap_K_A_B.htm">FHashMap&lt;K, A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FHashMap</span>&lt;<span class="ident">K</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">A</span>&gt;, <span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FHashSet_A_B_C"></a><div class="left"><p ><a class="type-name" href="FHashSet_A_B_C.htm">FHashSet&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FHashSet</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FHashSet_A_B"></a><div class="left"><p ><a class="type-name" href="FHashSet_A_B.htm">FHashSet&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FHashSet</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FHashSet_A"></a><div class="left"><p ><a class="type-name" href="FHashSet_A.htm">FHashSet&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FHashSet</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FHashSet_OrdFAAA_OrdFAA_OrdA_A"></a><div class="left"><p ><a class="type-name" href="FHashSet_OrdFAAA_OrdFAA_OrdA_A.htm">FHashSet&lt;OrdFAAA, OrdFAA, OrdA, A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FHashSet</span>&lt;<span class="ident">OrdFAAA</span>, <span class="ident">OrdFAA</span>, <span class="ident">OrdA</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">OrdFAA</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">OrdFAAA</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdFAA</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FHashSet_OrdFAB_OrdA_OrdB_A_B"></a><div class="left"><p ><a class="type-name" href="FHashSet_OrdFAB_OrdA_OrdB_A_B.htm">FHashSet&lt;OrdFAB, OrdA, OrdB, A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FHashSet</span>&lt;<span class="ident">OrdFAB</span>, <span class="ident">OrdA</span>, <span class="ident">OrdB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdB</span>, <span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">OrdFAB</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdB</span>, <span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FHashSet_OrdFABC_OrdFBC_OrdA_OrdB_OrdC_A_B_C"></a><div class="left"><p ><a class="type-name" href="FHashSet_OrdFABC_OrdFBC_OrdA_OrdB_OrdC_A_B_C.htm">FHashSet&lt;OrdFABC, OrdFBC, OrdA, OrdB, OrdC, A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FHashSet</span>&lt;<span class="ident">OrdFABC</span>, <span class="ident">OrdFBC</span>, <span class="ident">OrdA</span>, <span class="ident">OrdB</span>, <span class="ident">OrdC</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">OrdFABC</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdFBC</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdB</span>, <span class="ident">B</span>&gt;, <span class="ident">HashSet</span>&lt;<span class="ident">OrdC</span>, <span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FLst_A_B_C"></a><div class="left"><p ><a class="type-name" href="FLst_A_B_C.htm">FLst&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FLst</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">Lst</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Lst</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Lst</span>&lt;<span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FLst_A_B"></a><div class="left"><p ><a class="type-name" href="FLst_A_B.htm">FLst&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FLst</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Lst</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Lst</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FLst_A"></a><div class="left"><p ><a class="type-name" href="FLst_A.htm">FLst&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FLst</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">Lst</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FMap_K_A_B"></a><div class="left"><p ><a class="type-name" href="FMap_K_A_B.htm">FMap&lt;K, A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FMap</span>&lt;<span class="ident">K</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">A</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FMap_OrdK_K_A_B"></a><div class="left"><p ><a class="type-name" href="FMap_OrdK_K_A_B.htm">FMap&lt;OrdK, K, A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FMap</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">A</span>&gt;, <span class="ident">Map</span>&lt;<span class="ident">OrdK</span>, <span class="ident">K</span>, <span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FNullable_A_B"></a><div class="left"><p ><a class="type-name" href="FNullable_A_B.htm">FNullable&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FNullable</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">A</span>?, <span class="ident">B</span>?, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">A</span>?, <span class="ident">B</span>?, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FoldTuple_A"></a><div class="left"><p ><a class="type-name" href="FoldTuple_A.htm">FoldTuple&lt;A&gt;</a></p><p ><span >Tuple foldable instance Supports tuples up to 7 elements where each element is of the same type A </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FoldTuple</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FOption_A_B_C"></a><div class="left"><p ><a class="type-name" href="FOption_A_B_C.htm">FOption&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FOption</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Option</span>&lt;<span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FOption_A_B"></a><div class="left"><p ><a class="type-name" href="FOption_A_B.htm">FOption&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FOption</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FOptional_OptionalA_OptionalB_OA_OB_A_B"></a><div class="left"><p ><a class="type-name" href="FOptional_OptionalA_OptionalB_OA_OB_A_B.htm">FOptional&lt;OptionalA, OptionalB, OA, OB, A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FOptional</span>&lt;<span class="ident">OptionalA</span>, <span class="ident">OptionalB</span>, <span class="ident">OA</span>, <span class="ident">OB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">OA</span>, <span class="ident">OB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">OA</span>, <span class="ident">OB</span>, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FOptionUnsafe_A_B_C"></a><div class="left"><p ><a class="type-name" href="FOptionUnsafe_A_B_C.htm">FOptionUnsafe&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FOptionUnsafe</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FOptionUnsafe_A_B"></a><div class="left"><p ><a class="type-name" href="FOptionUnsafe_A_B.htm">FOptionUnsafe&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FOptionUnsafe</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">OptionUnsafe</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FQue_A_B"></a><div class="left"><p ><a class="type-name" href="FQue_A_B.htm">FQue&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FQue</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Que</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Que</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FSeq_A_B_C"></a><div class="left"><p ><a class="type-name" href="FSeq_A_B_C.htm">FSeq&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FSeq</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FSeq_A_B"></a><div class="left"><p ><a class="type-name" href="FSeq_A_B.htm">FSeq&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FSeq</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FSeq_A"></a><div class="left"><p ><a class="type-name" href="FSeq_A.htm">FSeq&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FSeq</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FSet_A_B_C"></a><div class="left"><p ><a class="type-name" href="FSet_A_B_C.htm">FSet&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FSet</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">Set</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FSet_A_B"></a><div class="left"><p ><a class="type-name" href="FSet_A_B.htm">FSet&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FSet</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FSet_A"></a><div class="left"><p ><a class="type-name" href="FSet_A.htm">FSet&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FSet</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">Set</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FSet_OrdFAAA_OrdFAA_OrdA_A"></a><div class="left"><p ><a class="type-name" href="FSet_OrdFAAA_OrdFAA_OrdA_A.htm">FSet&lt;OrdFAAA, OrdFAA, OrdA, A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FSet</span>&lt;<span class="ident">OrdFAAA</span>, <span class="ident">OrdFAA</span>, <span class="ident">OrdA</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">OrdFAA</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">OrdFAAA</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdFAA</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FSet_OrdFAB_OrdA_OrdB_A_B"></a><div class="left"><p ><a class="type-name" href="FSet_OrdFAB_OrdA_OrdB_A_B.htm">FSet&lt;OrdFAB, OrdA, OrdB, A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FSet</span>&lt;<span class="ident">OrdFAB</span>, <span class="ident">OrdA</span>, <span class="ident">OrdB</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdB</span>, <span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">OrdFAB</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdB</span>, <span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FSet_OrdFABC_OrdFBC_OrdA_OrdB_OrdC_A_B_C"></a><div class="left"><p ><a class="type-name" href="FSet_OrdFABC_OrdFBC_OrdA_OrdB_OrdC_A_B_C.htm">FSet&lt;OrdFABC, OrdFBC, OrdA, OrdB, OrdC, A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FSet</span>&lt;<span class="ident">OrdFABC</span>, <span class="ident">OrdFBC</span>, <span class="ident">OrdA</span>, <span class="ident">OrdB</span>, <span class="ident">OrdC</span>, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">OrdFABC</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdFBC</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdA</span>, <span class="ident">A</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdB</span>, <span class="ident">B</span>&gt;, <span class="ident">Set</span>&lt;<span class="ident">OrdC</span>, <span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FStck_A_B"></a><div class="left"><p ><a class="type-name" href="FStck_A_B.htm">FStck&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FStck</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Stck</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTask_A_B_C"></a><div class="left"><p ><a class="type-name" href="FTask_A_B_C.htm">FTask&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTask</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">Task</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTask_A_B"></a><div class="left"><p ><a class="type-name" href="FTask_A_B.htm">FTask&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTask</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTask_A"></a><div class="left"><p ><a class="type-name" href="FTask_A.htm">FTask&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTask</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">Task</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTry_A_B_C"></a><div class="left"><p ><a class="type-name" href="FTry_A_B_C.htm">FTry&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTry</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Try</span>&lt;<span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTry_A_B"></a><div class="left"><p ><a class="type-name" href="FTry_A_B.htm">FTry&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTry</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Try</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTry_A"></a><div class="left"><p ><a class="type-name" href="FTry_A.htm">FTry&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTry</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">Try</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTryAsync_A_B_C"></a><div class="left"><p ><a class="type-name" href="FTryAsync_A_B_C.htm">FTryAsync&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTryAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTryAsync_A_B"></a><div class="left"><p ><a class="type-name" href="FTryAsync_A_B.htm">FTryAsync&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTryAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTryAsync_A"></a><div class="left"><p ><a class="type-name" href="FTryAsync_A.htm">FTryAsync&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTryAsync</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTryOption_A_B_C"></a><div class="left"><p ><a class="type-name" href="FTryOption_A_B_C.htm">FTryOption&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTryOption</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTryOption_A_B"></a><div class="left"><p ><a class="type-name" href="FTryOption_A_B.htm">FTryOption&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTryOption</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTryOption_A"></a><div class="left"><p ><a class="type-name" href="FTryOption_A.htm">FTryOption&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTryOption</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTryOptionAsync_A_B_C"></a><div class="left"><p ><a class="type-name" href="FTryOptionAsync_A_B_C.htm">FTryOptionAsync&lt;A, B, C&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTryOptionAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTryOptionAsync_A_B"></a><div class="left"><p ><a class="type-name" href="FTryOptionAsync_A_B.htm">FTryOptionAsync&lt;A, B&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTryOptionAsync</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTryOptionAsync_A"></a><div class="left"><p ><a class="type-name" href="FTryOptionAsync_A.htm">FTryOptionAsync&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTryOptionAsync</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTupleBi_A_B_U_V"></a><div class="left"><p ><a class="type-name" href="FTupleBi_A_B_U_V.htm">FTupleBi&lt;A, B, U, V&gt;</a></p><p ><span >Maps the first item in a tuple 2 </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTupleBi</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;, <span class="ident">Tuple</span>&lt;<span class="ident">U</span>, <span class="ident">V</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;, <span class="ident">ValueTuple</span>&lt;<span class="ident">U</span>, <span class="ident">V</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTupleFst_A_B_C_R"></a><div class="left"><p ><a class="type-name" href="FTupleFst_A_B_C_R.htm">FTupleFst&lt;A, B, C, R&gt;</a></p><p ><span >Maps the first item in a tuple 3 </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTupleFst</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">Tuple</span>&lt;<span class="ident">R</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">ValueTuple</span>&lt;<span class="ident">R</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">A</span>, <span class="ident">R</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTupleFst_A_B_R"></a><div class="left"><p ><a class="type-name" href="FTupleFst_A_B_R.htm">FTupleFst&lt;A, B, R&gt;</a></p><p ><span >Maps the first item in a tuple 2 </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTupleFst</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;, <span class="ident">Tuple</span>&lt;<span class="ident">R</span>, <span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;, <span class="ident">ValueTuple</span>&lt;<span class="ident">R</span>, <span class="ident">B</span>&gt;, <span class="ident">A</span>, <span class="ident">R</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTupleSnd_A_B_C_R"></a><div class="left"><p ><a class="type-name" href="FTupleSnd_A_B_C_R.htm">FTupleSnd&lt;A, B, C, R&gt;</a></p><p ><span >Maps the second item in a tuple 3 </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTupleSnd</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>, <span class="ident">C</span>&gt;, <span class="ident">B</span>, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>, <span class="ident">C</span>&gt;, <span class="ident">B</span>, <span class="ident">R</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTupleSnd_A_B_R"></a><div class="left"><p ><a class="type-name" href="FTupleSnd_A_B_R.htm">FTupleSnd&lt;A, B, R&gt;</a></p><p ><span >Maps the second item in a tuple 2 </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTupleSnd</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;, <span class="ident">B</span>, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;, <span class="ident">B</span>, <span class="ident">R</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTupleThrd_A_B_C_R"></a><div class="left"><p ><a class="type-name" href="FTupleThrd_A_B_C_R.htm">FTupleThrd&lt;A, B, C, R&gt;</a></p><p ><span >Maps the third item in a tuple 3 </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTupleThrd</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;, <span class="ident">C</span>, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;, <span class="ident">C</span>, <span class="ident">R</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="FTupleTri_A_B_C_T_U_V"></a><div class="left"><p ><a class="type-name" href="FTupleTri_A_B_C_T_U_V.htm">FTupleTri&lt;A, B, C, T, U, V&gt;</a></p><p ><span >Maps the first item in a tuple 2 </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTupleTri</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">TriFunctor</span>&lt;<span class="ident">Tuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">Tuple</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">TriFunctor</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;, <span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;, <span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MArr_A"></a><div class="left"><p ><a class="type-name" href="MArr_A.htm">MArr&lt;A&gt;</a></p><p ><span >Array type-class instance </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MArr</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="MArray_A"></a><div class="left"><p ><a class="type-name" href="MArray_A.htm">MArray&lt;A&gt;</a></p><p ><span >Array type-class instance </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MArray</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="Max_ORD_A"></a><div class="left"><p ><a class="type-name" href="Max_ORD_A.htm">Max&lt;ORD, A&gt;</a></p><p ><span >Ordered values form a semigroup under maximum. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Max</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MEither_L_R"></a><div class="left"><p ><a class="type-name" href="MEither_L_R.htm">MEither&lt;L, R&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MEither</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Choice</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">L</span>, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Optional</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFoldable</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">L</span>, <span class="ident">R</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MEitherUnsafe_L_R"></a><div class="left"><p ><a class="type-name" href="MEitherUnsafe_L_R.htm">MEitherUnsafe&lt;L, R&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MEitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Choice</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">L</span>, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Optional</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">R</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFoldable</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">L</span>, <span class="ident">R</span>&gt;, <span class="ident">L</span>, <span class="ident">R</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MHashMap_K_V"></a><div class="left"><p ><a class="type-name" href="MHashMap_K_V.htm">MHashMap&lt;K, V&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MHashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">HashMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="MHashSet_A"></a><div class="left"><p ><a class="type-name" href="MHashSet_A.htm">MHashSet&lt;A&gt;</a></p><p ><span >Hash set type-class instance </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MHashSet</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">HashSet</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="MIdentity_A"></a><div class="left"><p ><a class="type-name" href="MIdentity_A.htm">MIdentity&lt;A&gt;</a></p><p ><span ><br/><br/> </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MIdentity</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Identity</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="Min_ORD_A"></a><div class="left"><p ><a class="type-name" href="Min_ORD_A.htm">Min&lt;ORD, A&gt;</a></p><p ><span >Ordered values form a semigroup under minimum. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Min</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MLst_A"></a><div class="left"><p ><a class="type-name" href="MLst_A.htm">MLst&lt;A&gt;</a></p><p ><span >MLst type-class instance </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MLst</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="MMap_K_V"></a><div class="left"><p ><a class="type-name" href="MMap_K_V.htm">MMap&lt;K, V&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MMap</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;, <span class="ident">V</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Map</span>&lt;<span class="ident">K</span>, <span class="ident">V</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="MNullable_A"></a><div class="left"><p ><a class="type-name" href="MNullable_A.htm">MNullable&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MNullable</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Optional</span>&lt;<span class="ident">A</span>?, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">A</span>?, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">A</span>?, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFoldable</span>&lt;<span class="ident">A</span>?, <span class="ident">Unit</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MOption_A"></a><div class="left"><p ><a class="type-name" href="MOption_A.htm">MOption&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MOption</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Choice</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Optional</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFoldable</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MOptionUnsafe_A"></a><div class="left"><p ><a class="type-name" href="MOptionUnsafe_A.htm">MOptionUnsafe&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MOptionUnsafe</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Choice</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Optional</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFoldable</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MQue_A"></a><div class="left"><p ><a class="type-name" href="MQue_A.htm">MQue&lt;A&gt;</a></p><p ><span >MQue type-class instance </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MQue</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Que</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Que</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Que</span>&lt;<span class="ident">A</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">Que</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="MReader_Env_A"></a><div class="left"><p ><a class="type-name" href="MReader_Env_A.htm">MReader&lt;Env, A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MReader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">MonadReader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Env</span>, <span class="ident">Unit</span>, <span class="ident">Reader</span>&lt;<span class="ident">Env</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MSeq_A"></a><div class="left"><p ><a class="type-name" href="MSeq_A.htm">MSeq&lt;A&gt;</a></p><p ><span >Enumerable type-class instance </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MSeq</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="MSet_A"></a><div class="left"><p ><a class="type-name" href="MSet_A.htm">MSet&lt;A&gt;</a></p><p ><span >Set type-class instance </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MSet</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="MState_S_A"></a><div class="left"><p ><a class="type-name" href="MState_S_A.htm">MState&lt;S, A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MState</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">MonadState</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">S</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;, <span class="ident">State</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MStck_A"></a><div class="left"><p ><a class="type-name" href="MStck_A.htm">MStck&lt;A&gt;</a></p><p ><span >MStack type-class instance </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MStck</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">A</span>&gt;&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="MTask_A"></a><div class="left"><p ><a class="type-name" href="MTask_A.htm">MTask&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MTask</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Optional</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFoldable</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MTry_A"></a><div class="left"><p ><a class="type-name" href="MTry_A.htm">MTry&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MTry</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Optional</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFoldable</span>&lt;<span class="ident">Try</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MTryAsync_A"></a><div class="left"><p ><a class="type-name" href="MTryAsync_A.htm">MTryAsync&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MTryAsync</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Optional</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFoldable</span>&lt;<span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MTryOption_A"></a><div class="left"><p ><a class="type-name" href="MTryOption_A.htm">MTryOption&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MTryOption</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Optional</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFoldable</span>&lt;<span class="ident">TryOption</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MTryOptionAsync_A"></a><div class="left"><p ><a class="type-name" href="MTryOptionAsync_A.htm">MTryOptionAsync&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MTryOptionAsync</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Optional</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Foldable</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFoldable</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MUnit_"></a><div class="left"><p ><a class="type-name" href="MUnit_.htm">MUnit</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MUnit</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">Unit</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="MWriter_MonoidW_W_A"></a><div class="left"><p ><a class="type-name" href="MWriter_MonoidW_W_A.htm">MWriter&lt;MonoidW, W, A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MWriter</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">MonadWriter</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Unit</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">W</span>, <span class="keyword">bool</span>&gt;, <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdArr_ORD_A"></a><div class="left"><p ><a class="type-name" href="OrdArr_ORD_A.htm">OrdArr&lt;ORD, A&gt;</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdArr</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdArray_ORD_A"></a><div class="left"><p ><a class="type-name" href="OrdArray_ORD_A.htm">OrdArray&lt;ORD, A&gt;</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdArray</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdBigInt_"></a><div class="left"><p ><a class="type-name" href="OrdBigInt_.htm">OrdBigInt</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdBigInt</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">BigInteger</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdBool_"></a><div class="left"><p ><a class="type-name" href="OrdBool_.htm">OrdBool</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdBool</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">bool</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdChar_"></a><div class="left"><p ><a class="type-name" href="OrdChar_.htm">OrdChar</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdChar</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">char</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdChoice_ORD_CHOICE_CH_A_B"></a><div class="left"><p ><a class="type-name" href="OrdChoice_ORD_CHOICE_CH_A_B.htm">OrdChoice&lt;ORD, CHOICE, CH, A, B&gt;</a></p><p ><span >Compare the equality of any type in the Choice type-class.  Taking into account only the &#39;success bound value&#39; of B. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdChoice</span>&lt;<span class="ident">ORD</span>, <span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">CH</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdChoice_ORDA_ORDB_CHOICE_CH_A_B"></a><div class="left"><p ><a class="type-name" href="OrdChoice_ORDA_ORDB_CHOICE_CH_A_B.htm">OrdChoice&lt;ORDA, ORDB, CHOICE, CH, A, B&gt;</a></p><p ><span >Compare the equality of any type in the Choice type-class.  Taking into account the ordering of both possible bound values. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdChoice</span>&lt;<span class="ident">ORDA</span>, <span class="ident">ORDB</span>, <span class="ident">CHOICE</span>, <span class="ident">CH</span>, <span class="ident">A</span>, <span class="ident">B</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">CH</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdDateTime_"></a><div class="left"><p ><a class="type-name" href="OrdDateTime_.htm">OrdDateTime</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdDateTime</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">DateTime</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdDecimal_"></a><div class="left"><p ><a class="type-name" href="OrdDecimal_.htm">OrdDecimal</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdDecimal</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">decimal</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdDefault_A"></a><div class="left"><p ><a class="type-name" href="OrdDefault_A.htm">OrdDefault&lt;A&gt;</a></p><p ><span >Uses the standard .NET  Comparer&lt;A&gt;.Default.Compare(a,b) method to provide equality testing. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdDefault</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdDouble_"></a><div class="left"><p ><a class="type-name" href="OrdDouble_.htm">OrdDouble</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdDouble</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">double</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdFloat_"></a><div class="left"><p ><a class="type-name" href="OrdFloat_.htm">OrdFloat</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdFloat</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">float</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdGuid_"></a><div class="left"><p ><a class="type-name" href="OrdGuid_.htm">OrdGuid</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdGuid</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">Guid</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdInt_"></a><div class="left"><p ><a class="type-name" href="OrdInt_.htm">OrdInt</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdInt</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">int</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdLong_"></a><div class="left"><p ><a class="type-name" href="OrdLong_.htm">OrdLong</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdLong</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">long</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdLst_ORD_A"></a><div class="left"><p ><a class="type-name" href="OrdLst_ORD_A.htm">OrdLst&lt;ORD, A&gt;</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdLst</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdNewType_NEWTYPE_ORD_A_PRED"></a><div class="left"><p ><a class="type-name" href="OrdNewType_NEWTYPE_ORD_A_PRED.htm">OrdNewType&lt;NEWTYPE, ORD, A, PRED&gt;</a></p><p ><span >Compare the equality and ordering of any type in the NewType type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdNewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">ORD</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdNewType_NEWTYPE_ORD_A"></a><div class="left"><p ><a class="type-name" href="OrdNewType_NEWTYPE_ORD_A.htm">OrdNewType&lt;NEWTYPE, ORD, A&gt;</a></p><p ><span >Compare the equality and ordering of any type in the NewType type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdNewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">ORD</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">NewType</span>&lt;<span class="ident">NEWTYPE</span>, <span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdNumType_NUMTYPE_NUM_A_PRED"></a><div class="left"><p ><a class="type-name" href="OrdNumType_NUMTYPE_NUM_A_PRED.htm">OrdNumType&lt;NUMTYPE, NUM, A, PRED&gt;</a></p><p ><span >Compare the equality and ordering of any type in the NumType type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdNumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>, <span class="ident">PRED</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdNumType_NUMTYPE_NUM_A"></a><div class="left"><p ><a class="type-name" href="OrdNumType_NUMTYPE_NUM_A.htm">OrdNumType&lt;NUMTYPE, NUM, A&gt;</a></p><p ><span >Compare the equality and ordering of any type in the NumType type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdNumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">NumType</span>&lt;<span class="ident">NUMTYPE</span>, <span class="ident">NUM</span>, <span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdOpt_ORD_OPTION_OA_A"></a><div class="left"><p ><a class="type-name" href="OrdOpt_ORD_OPTION_OA_A.htm">OrdOpt&lt;ORD, OPTION, OA, A&gt;</a></p><p ><span >Compare the equality and ordering of any type in the Optional type-class </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdOpt</span>&lt;<span class="ident">ORD</span>, <span class="ident">OPTION</span>, <span class="ident">OA</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">OA</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdQue_ORD_A"></a><div class="left"><p ><a class="type-name" href="OrdQue_ORD_A.htm">OrdQue&lt;ORD, A&gt;</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdQue</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">Que</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdSeq_ORD_A"></a><div class="left"><p ><a class="type-name" href="OrdSeq_ORD_A.htm">OrdSeq&lt;ORD, A&gt;</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdSeq</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">IEnumerable</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdSet_ORD_A"></a><div class="left"><p ><a class="type-name" href="OrdSet_ORD_A.htm">OrdSet&lt;ORD, A&gt;</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdSet</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">Set</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdShort_"></a><div class="left"><p ><a class="type-name" href="OrdShort_.htm">OrdShort</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdShort</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">short</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdStck_ORD_A"></a><div class="left"><p ><a class="type-name" href="OrdStck_ORD_A.htm">OrdStck&lt;ORD, A&gt;</a></p><p ><span >Equality and ordering </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdStck</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="ident">Stck</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdString_"></a><div class="left"><p ><a class="type-name" href="OrdString_.htm">OrdString</a></p><p ><span >String comparison </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdString</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdStringCurrentCulture_"></a><div class="left"><p ><a class="type-name" href="OrdStringCurrentCulture_.htm">OrdStringCurrentCulture</a></p><p ><span >String comparison (current culture) </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdStringCurrentCulture</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdStringCurrentCultureIgnoreCase_"></a><div class="left"><p ><a class="type-name" href="OrdStringCurrentCultureIgnoreCase_.htm">OrdStringCurrentCultureIgnoreCase</a></p><p ><span >String comparison (current culture, ignore case) </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdStringCurrentCultureIgnoreCase</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdStringOrdinal_"></a><div class="left"><p ><a class="type-name" href="OrdStringOrdinal_.htm">OrdStringOrdinal</a></p><p ><span >String comparison (ordinal) </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdStringOrdinal</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="OrdStringOrdinalIgnoreCase_"></a><div class="left"><p ><a class="type-name" href="OrdStringOrdinalIgnoreCase_.htm">OrdStringOrdinalIgnoreCase</a></p><p ><span >String comparison (ordinal, ignore case) </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">OrdStringOrdinalIgnoreCase</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="Product_NUM_A"></a><div class="left"><p ><a class="type-name" href="Product_NUM_A.htm">Product&lt;NUM, A&gt;</a></p><p ><span >Numbers form a monoid under addition. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="Sum_NUM_A"></a><div class="left"><p ><a class="type-name" href="Sum_NUM_A.htm">Sum&lt;NUM, A&gt;</a></p><p ><span >Numbers form a monoid under addition. </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">Sum</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TArr_A"></a><div class="left"><p ><a class="type-name" href="TArr_A.htm">TArr&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TArr</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="TArray_A"></a><div class="left"><p ><a class="type-name" href="TArray_A.htm">TArray&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TArray</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">A</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TBigInt_"></a><div class="left"><p ><a class="type-name" href="TBigInt_.htm">TBigInt</a></p><p ><span >Integer number  </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TBigInt</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Num</span>&lt;<span class="ident">BigInteger</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">BigInteger</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TChar_"></a><div class="left"><p ><a class="type-name" href="TChar_.htm">TChar</a></p><p ><span >Integer number  </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TChar</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">char</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">char</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="keyword">char</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Arithmetic</span>&lt;<span class="keyword">char</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TDecimal_"></a><div class="left"><p ><a class="type-name" href="TDecimal_.htm">TDecimal</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TDecimal</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">decimal</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Floating</span>&lt;<span class="keyword">decimal</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TDouble_"></a><div class="left"><p ><a class="type-name" href="TDouble_.htm">TDouble</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TDouble</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">double</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Floating</span>&lt;<span class="keyword">double</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TFloat_"></a><div class="left"><p ><a class="type-name" href="TFloat_.htm">TFloat</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TFloat</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">float</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Floating</span>&lt;<span class="keyword">float</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TInt_"></a><div class="left"><p ><a class="type-name" href="TInt_.htm">TInt</a></p><p ><span >Integer number  </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TInt</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Num</span>&lt;<span class="keyword">int</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="keyword">int</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TLong_"></a><div class="left"><p ><a class="type-name" href="TLong_.htm">TLong</a></p><p ><span >Long integer number </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TLong</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Num</span>&lt;<span class="keyword">long</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TLst_A"></a><div class="left"><p ><a class="type-name" href="TLst_A.htm">TLst&lt;A&gt;</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TLst</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt;</span></div></div></div><div class="doc-ns-type"><a name="TNumericChar_"></a><div class="left"><p ><a class="type-name" href="TNumericChar_.htm">TNumericChar</a></p><p ><span >Integer number  </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TNumericChar</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Eq</span>&lt;<span class="keyword">char</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">char</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="keyword">char</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Arithmetic</span>&lt;<span class="keyword">char</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TShort_"></a><div class="left"><p ><a class="type-name" href="TShort_.htm">TShort</a></p><p ><span >Short integer number </span></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TShort</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Num</span>&lt;<span class="keyword">short</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TString_"></a><div class="left"><p ><a class="type-name" href="TString_.htm">TString</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TString</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">string</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TStringCurrentCulture_"></a><div class="left"><p ><a class="type-name" href="TStringCurrentCulture_.htm">TStringCurrentCulture</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TStringCurrentCulture</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">string</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TStringCurrentCultureIgnoreCase_"></a><div class="left"><p ><a class="type-name" href="TStringCurrentCultureIgnoreCase_.htm">TStringCurrentCultureIgnoreCase</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TStringCurrentCultureIgnoreCase</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">string</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TStringOrdinal_"></a><div class="left"><p ><a class="type-name" href="TStringOrdinal_.htm">TStringOrdinal</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TStringOrdinal</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">string</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div><div class="doc-ns-type"><a name="TStringOrdinalIgnoreCase_"></a><div class="left"><p ><a class="type-name" href="TStringOrdinalIgnoreCase_.htm">TStringOrdinalIgnoreCase</a></p><p ></p></div><div class="right"><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">TStringOrdinalIgnoreCase</span> :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Ord</span>&lt;<span class="keyword">string</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monoid</span>&lt;<span class="keyword">string</span>&gt;</span></div></div></div></div></body></html>