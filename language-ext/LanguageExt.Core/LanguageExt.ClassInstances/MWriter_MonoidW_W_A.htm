<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt.ClassInstances/index.htm">LanguageExt.ClassInstances</a> \ <span class="nav-bar-link" href="MWriter_MonoidW_W_A.htm">MWriter&lt;MonoidW, W, A&gt;</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Bind&lt;MONADB, MB, B>">Bind&lt;MONADB, MB, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, MB&gt;)</a><a class="nav-link" href="#BindReturn">BindReturn(ValueTuple&lt;W, bool&gt;, Writer&lt;MonoidW, W, A&gt;)</a><a class="nav-link" href="#Count">Count(Writer&lt;MonoidW, W, A&gt;)</a><a class="nav-link" href="#Fail">Fail(Exception)</a><a class="nav-link" href="#Fail">Fail(object)</a><a class="nav-link" href="#Fold&lt;S>">Fold&lt;S&gt;(Writer&lt;MonoidW, W, A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBack&lt;S>">FoldBack&lt;S&gt;(Writer&lt;MonoidW, W, A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#Id">Id(Func&lt;Unit, Writer&lt;MonoidW, W, A&gt;&gt;)</a><a class="nav-link" href="#IdAsync">IdAsync(Func&lt;Unit, Task&lt;Writer&lt;MonoidW, W, A&gt;&gt;&gt;)</a><a class="nav-link" href="#Listen&lt;B>">Listen&lt;B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, B&gt;)</a><a class="nav-link" href="#Plus">Plus(Writer&lt;MonoidW, W, A&gt;, Writer&lt;MonoidW, W, A&gt;)</a><a class="nav-link" href="#Return">Return(Func&lt;Unit, A&gt;)</a><a class="nav-link" href="#Tell">Tell(W)</a><a class="nav-link" href="#Writer">Writer(A, W)</a><a class="nav-link" href="#Zero">Zero()</a></div><div class="content-panel"><h1 >MWriter&lt;MonoidW, W, A&gt; Struct</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MWriter</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">MonadWriter</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">Unit</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">W</span>, <span class="keyword">bool</span>&gt;, <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt.ClassInstances</div></div><h2 >Methods</h2><div class="member-title"><a name="Bind&lt;MONADB, MB, B>"></a>Bind&lt;MONADB, MB, B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;A, MB&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_MONADB_MB_B_Writer_MonoidW_W_A_ma__Func_A_MB_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">MB</span> <span class="ident">Bind</span>&lt;<span class="ident">MONADB</span>, <span class="ident">MB</span>, <span class="ident">B</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MB</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MONADB</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">Unit</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">W</span>, <span class="keyword">bool</span>&gt;, <span class="ident">MB</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-Bind_MONADB_MB_B_Writer_MonoidW_W_A_ma__Func_A_MB_f_"><div class="section_title">SOURCE</div><div class="code">
            default(MONADB).Id(_ =&gt;
            {
                var (a, output1, faulted) = ma();
                return faulted
                    ? default(MONADB).Fail()
                    : default(MONADB).BindReturn((output1, faulted), f(a));
            })</div></div></div><div class="member-title"><a name="BindReturn"></a>BindReturn(ValueTuple&lt;W, bool&gt;, Writer&lt;MonoidW, W, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindReturn__ValueTuple_W_bool_output__Writer_MonoidW_W_A_mb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">output</div><div class="arg-type"><span class="ident">ValueTuple</span>&lt;<span class="ident">W</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mb</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">BindReturn</span>(<span class="ident">ValueTuple</span>&lt;<span class="ident">W</span>, <span class="keyword">bool</span>&gt; output, <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; mb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindReturn__ValueTuple_W_bool_output__Writer_MonoidW_W_A_mb_"><div class="section_title">SOURCE</div><div class="code">
            var (b, output2, faulted) = mb();
            return () =&gt; faulted
                ? (default(A), default(MonoidW).Empty(), true)
                : (b, default(MonoidW).Append(output.Item1, output2), false);
        </div></div></div><div class="member-title"><a name="Count"></a>Count(Writer&lt;MonoidW, W, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count__Writer_MonoidW_W_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">int</span>&gt; <span class="ident">Count</span>(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Count__Writer_MonoidW_W_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            Fold(fa, 0, (s,x) =&gt; 1)</div></div></div><div class="member-title"><a name="Fail"></a>Fail(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fail__Exception__err_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">err</div><div class="arg-type"><span class="ident">Exception</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">Fail</span>(<span class="ident">Exception</span> err = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Fail__Exception__err_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt; (default(A), default(MonoidW).Empty(), true)</div></div></div><div class="member-title"><a name="Fail"></a>Fail(object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fail__object__err_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">err</div><div class="arg-type"><span class="keyword">object</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">Fail</span>(<span class="keyword">object</span> err)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Fail__object__err_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt; (default(A), default(MonoidW).Empty(), true)</div></div></div><div class="member-title"><a name="Fold&lt;S>"></a>Fold&lt;S&gt;(Writer&lt;MonoidW, W, A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_Writer_MonoidW_W_A_fa__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">S</span>&gt; <span class="ident">Fold</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; fa, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Fold_S_Writer_MonoidW_W_A_fa__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code"> _ =&gt;
        {
            var (a, output, faulted) = fa();
            return faulted
                ? state
                : f(state, a);
        }</div></div></div><div class="member-title"><a name="FoldBack&lt;S>"></a>FoldBack&lt;S&gt;(Writer&lt;MonoidW, W, A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBack_S_Writer_MonoidW_W_A_fa__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">S</span>&gt; <span class="ident">FoldBack</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; fa, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldBack_S_Writer_MonoidW_W_A_fa__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            Fold(fa, state, f)</div></div></div><div class="member-title"><a name="Id"></a>Id(Func&lt;Unit, Writer&lt;MonoidW, W, A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Id__Func_Unit_Writer&lt;MonoidW, W, A>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">Id</span>(<span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Id__Func_Unit_Writer&lt;MonoidW, W, A>_f_"><div class="section_title">SOURCE</div><div class="code">
            f(unit)</div></div></div><div class="member-title"><a name="IdAsync"></a>IdAsync(Func&lt;Unit, Task&lt;Writer&lt;MonoidW, W, A&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IdAsync__Func_Unit_Task&lt;Writer&lt;MonoidW, W, A>>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">IdAsync</span>(<span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IdAsync__Func_Unit_Task&lt;Writer&lt;MonoidW, W, A>>_ma_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            ma(unit).Result()</div></div></div><div class="member-title"><a name="Listen&lt;B>"></a>Listen&lt;B&gt;(Writer&lt;MonoidW, W, A&gt;, Func&lt;W, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Listen_B_Writer_MonoidW_W_A_ma__Func_W_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >&#39;listen&#39; is an action that executes the monad and adds its output to the value of the computation. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; <span class="ident">Listen</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">W</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">ValueTuple</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Listen_B_Writer_MonoidW_W_A_ma__Func_W_B_f_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            var (a, output, faulted) = ma();
            if (faulted) return (default((A, B)), default(MonoidW).Empty(), true);
            return ((a, f(output)), output, false);
        }</div></div></div><div class="member-title"><a name="Plus"></a>Plus(Writer&lt;MonoidW, W, A&gt;, Writer&lt;MonoidW, W, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Plus__Writer_MonoidW_W_A_ma__Writer_MonoidW_W_A_mb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mb</div><div class="arg-type"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">Plus</span>(<span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; ma, <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; mb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Plus__Writer_MonoidW_W_A_ma__Writer_MonoidW_W_A_mb_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
        {
            var (a, output, faulted) = ma();
            return faulted
                ? mb()
                : (a, output, faulted);
        }</div></div></div><div class="member-title"><a name="Return"></a>Return(Func&lt;Unit, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Return__Func_Unit_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">Return</span>(<span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Return__Func_Unit_A_f_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt; (f(unit), default(MonoidW).Empty(), false)</div></div></div><div class="member-title"><a name="Tell"></a>Tell(W)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tell__W__what_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tells the monad what you want it to hear.  The monad carries this &#39;packet&#39; upwards, merging it if needed (hence the Monoid requirement). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">what</div><div class="arg-type"><span class="ident">W</span></div></div><div class="arg-desc"><span >The value to tell</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">Unit</span>&gt; <span class="ident">Tell</span>(<span class="ident">W</span> what)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">Unit</span>&gt;</div><div class="normal"><span >Updated writer monad</span></div></div></div><div style="display:none" id="code-Tell__W__what_"><div class="section_title">SOURCE</div><div class="code"> () =&gt;
            (unit, what, false)</div></div></div><div class="member-title"><a name="Writer"></a>Writer(A, W)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Writer__A__value__W__output_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">value</div><div class="arg-type"><span class="ident">A</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">output</div><div class="arg-type"><span class="ident">W</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">Writer</span>(<span class="ident">A</span> value, <span class="ident">W</span> output)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Writer__A__value__W__output_"><div class="section_title">SOURCE</div><div class="code">
            () =&gt; (value, output, false)</div></div></div><div class="member-title"><a name="Zero"></a>Zero()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Zero__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt; <span class="ident">Zero</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Writer</span>&lt;<span class="ident">MonoidW</span>, <span class="ident">W</span>, <span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Zero__"><div class="section_title">SOURCE</div><div class="code">
            () =&gt; (default(A), default(MonoidW).Empty(), true)</div></div></div></div></body></html>