<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt.ClassInstances/index.htm">LanguageExt.ClassInstances</a> \ <span class="nav-bar-link" href="FTryOptionAsync_A.htm">FTryOptionAsync&lt;A&gt;</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#Inst">Inst</a><h3 >METHODS</h3><a class="nav-link" href="#Action">Action(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Apply">Apply(TryOptionAsync&lt;Func&lt;A, A&gt;&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Apply">Apply(TryOptionAsync&lt;Func&lt;A, Func&lt;A, A&gt;&gt;&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Apply">Apply(TryOptionAsync&lt;Func&lt;A, Func&lt;A, A&gt;&gt;&gt;, TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#BiMap">BiMap(TryOptionAsync&lt;A&gt;, Func&lt;Unit, A&gt;, Func&lt;A, A&gt;)</a><a class="nav-link" href="#Map">Map(TryOptionAsync&lt;A&gt;, Func&lt;A, A&gt;)</a><a class="nav-link" href="#Pure">Pure(A)</a></div><div class="content-panel"><h1 >FTryOptionAsync&lt;A&gt; Struct</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">FTryOptionAsync</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Functor</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFunctor</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Applicative</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">A</span>, <span class="ident">A</span>&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt.ClassInstances</div></div><h2 >Fields</h2><div class="member-title"><a name="Inst"></a>Inst</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">FTryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Inst</span></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Action"></a>Action(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Action__TryOptionAsync_A_fa__TryOptionAsync_A_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Action</span>(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Action__TryOptionAsync_A_fa__TryOptionAsync_A_fb_"><div class="section_title">SOURCE</div><div class="code">
            async () =&gt;
            {
                var a = fa.Try();
                var b = fb.Try();

                await Task.WhenAll(a, b);

                if (a.IsFaulted || a.Result.IsFaultedOrNone) return new OptionalResult&lt;A&gt;(a.Exception);
                if (b.IsFaulted || b.Result.IsFaultedOrNone) return new OptionalResult&lt;A&gt;(b.Exception);

                return new OptionalResult&lt;A&gt;(b.Result.Value);
            }</div></div></div><div class="member-title"><a name="Apply"></a>Apply(TryOptionAsync&lt;Func&lt;A, A&gt;&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply__TryOptionAsync_Func&lt;A, A>_fab__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Apply</span>(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt; fab, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Apply__TryOptionAsync_Func&lt;A, A>_fab__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            async () =&gt;
            {
                var f = fab.Try();
                var a = fa.Try();

                await Task.WhenAll(f, a);

                if (f.IsFaulted || f.Result.IsFaultedOrNone) return new OptionalResult&lt;A&gt;(f.Exception);
                if (a.IsFaulted || a.Result.IsFaultedOrNone) return new OptionalResult&lt;A&gt;(a.Exception);

                return new OptionalResult&lt;A&gt;(f.Result.Value.Value(a.Result.Value.Value));
            }</div></div></div><div class="member-title"><a name="Apply"></a>Apply(TryOptionAsync&lt;Func&lt;A, Func&lt;A, A&gt;&gt;&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply__TryOptionAsync_Func&lt;A, Func&lt;A, A>>_fabc__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt; <span class="ident">Apply</span>(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Apply__TryOptionAsync_Func&lt;A, Func&lt;A, A>>_fabc__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
            async () =&gt;
            {
                var f = fabc.Try();
                var a = fa.Try();

                await Task.WhenAll(f, a);

                if (f.IsFaulted || f.Result.IsFaultedOrNone) return new OptionalResult&lt;Func&lt;A, A&gt;&gt;(f.Exception);
                if (a.IsFaulted || a.Result.IsFaultedOrNone) return new OptionalResult&lt;Func&lt;A, A&gt;&gt;(a.Exception);

                return new OptionalResult&lt;Func&lt;A, A&gt;&gt;(f.Result.Value.Value(a.Result.Value.Value));
            }</div></div></div><div class="member-title"><a name="Apply"></a>Apply(TryOptionAsync&lt;Func&lt;A, Func&lt;A, A&gt;&gt;&gt;, TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply__TryOptionAsync_Func&lt;A, Func&lt;A, A>>_fabc__TryOptionAsync_A_fa__TryOptionAsync_A_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Apply</span>(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;&gt;&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Apply__TryOptionAsync_Func&lt;A, Func&lt;A, A>>_fabc__TryOptionAsync_A_fa__TryOptionAsync_A_fb_"><div class="section_title">SOURCE</div><div class="code">
            async () =&gt;
            {
                var f = fabc.Try();
                var a = fa.Try();
                var b = fb.Try();

                await Task.WhenAll(f, a, b);

                if (f.IsFaulted || f.Result.IsFaultedOrNone) return new OptionalResult&lt;A&gt;(f.Exception);
                if (a.IsFaulted || a.Result.IsFaultedOrNone) return new OptionalResult&lt;A&gt;(a.Exception);
                if (b.IsFaulted || b.Result.IsFaultedOrNone) return new OptionalResult&lt;A&gt;(b.Exception);

                return new OptionalResult&lt;A&gt;(f.Result.Value.Value(a.Result.Value.Value)(b.Result.Value.Value));
            }</div></div></div><div class="member-title"><a name="BiMap"></a>BiMap(TryOptionAsync&lt;A&gt;, Func&lt;Unit, A&gt;, Func&lt;A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMap__TryOptionAsync_A_ma__Func_Unit_A_fa__Func_A_A_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">BiMap</span>(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">A</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiMap__TryOptionAsync_A_ma__Func_Unit_A_fa__Func_A_A_fb_"><div class="section_title">SOURCE</div><div class="code">
            FOptional&lt;MTryOptionAsync&lt;A&gt;, MTryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;, A, A&gt;.Inst.BiMap(ma, fa, fb)</div></div></div><div class="member-title"><a name="Map"></a>Map(TryOptionAsync&lt;A&gt;, Func&lt;A, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map__TryOptionAsync_A_ma__Func_A_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Map</span>(<span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Map__TryOptionAsync_A_ma__Func_A_A_f_"><div class="section_title">SOURCE</div><div class="code">
            FOptional&lt;MTryOptionAsync&lt;A&gt;, MTryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;, A, A&gt;.Inst.Map(ma, f)</div></div></div><div class="member-title"><a name="Pure"></a>Pure(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Pure__A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Pure</span>(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Pure__A__x_"><div class="section_title">SOURCE</div><div class="code">
            MTryOptionAsync&lt;A&gt;.Inst.Return(x)</div></div></div></div></body></html>