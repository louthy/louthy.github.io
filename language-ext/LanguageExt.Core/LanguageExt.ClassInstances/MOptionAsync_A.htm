<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="../LanguageExt.ClassInstances/index.htm">LanguageExt.ClassInstances</a> \ <span class="nav-bar-link" href="MOptionAsync_A.htm">MOptionAsync&lt;A&gt;</span></div><div class="nav-panel"><h3 >FIELDS</h3><a class="nav-link" href="#Inst">Inst</a><h3 >PROPERTIES</h3><a class="nav-link" href="#NoneAsync">NoneAsync</a><h3 >METHODS</h3><a class="nav-link" href="#Append">Append(OptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;)</a><a class="nav-link" href="#BiFold&lt;S>">BiFold&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;S>">BiFoldAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;S>">BiFoldAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;S>">BiFoldAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Unit, S&gt;)</a><a class="nav-link" href="#BiFoldAsync&lt;S>">BiFoldAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Unit, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiFoldBack&lt;S>">BiFoldBack&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)</a><a class="nav-link" href="#BiFoldBackAsync&lt;S>">BiFoldBackAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)</a><a class="nav-link" href="#BiFoldBackAsync&lt;S>">BiFoldBackAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiFoldBackAsync&lt;S>">BiFoldBackAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Unit, S&gt;)</a><a class="nav-link" href="#BiFoldBackAsync&lt;S>">BiFoldBackAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Unit, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#Bind&lt;MonadB, MB, B>">Bind&lt;MonadB, MB, B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, MB&gt;)</a><a class="nav-link" href="#BindReturn">BindReturn(Unit, OptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Count">Count(OptionAsync&lt;A&gt;)</a><a class="nav-link" href="#CountAsync">CountAsync(OptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Empty">Empty()</a><a class="nav-link" href="#Fail">Fail(object)</a><a class="nav-link" href="#Fail">Fail(Exception)</a><a class="nav-link" href="#Fold&lt;S>">Fold&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldAsync&lt;S>">FoldAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldAsync&lt;S>">FoldAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#FoldBack&lt;S>">FoldBack&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackAsync&lt;S>">FoldBackAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#FoldBackAsync&lt;S>">FoldBackAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#Id">Id(Func&lt;Unit, OptionAsync&lt;A&gt;&gt;)</a><a class="nav-link" href="#IdAsync">IdAsync(Func&lt;Unit, Task&lt;OptionAsync&lt;A&gt;&gt;&gt;)</a><a class="nav-link" href="#IsNoneAsync">IsNoneAsync(OptionAsync&lt;A&gt;)</a><a class="nav-link" href="#IsSomeAsync">IsSomeAsync(OptionAsync&lt;A&gt;)</a><a class="nav-link" href="#IsUnsafeAsync">IsUnsafeAsync(OptionAsync&lt;A&gt;)</a><a class="nav-link" href="#MatchAsync">MatchAsync(OptionAsync&lt;A&gt;, Action&lt;A&gt;, Action)</a><a class="nav-link" href="#MatchAsync&lt;B>">MatchAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#MatchAsync&lt;B>">MatchAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#MatchAsync&lt;B>">MatchAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#MatchAsync&lt;B>">MatchAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#MatchUnsafeAsync&lt;B>">MatchUnsafeAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#MatchUnsafeAsync&lt;B>">MatchUnsafeAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#MatchUnsafeAsync&lt;B>">MatchUnsafeAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#MatchUnsafeAsync&lt;B>">MatchUnsafeAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#OptionalAsync">OptionalAsync(A)</a><a class="nav-link" href="#Plus">Plus(OptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Return">Return(Func&lt;Unit, A&gt;)</a><a class="nav-link" href="#Return">Return(A)</a><a class="nav-link" href="#SomeAsync">SomeAsync(A)</a><a class="nav-link" href="#Zero">Zero()</a></div><div class="content-panel"><h1 >MOptionAsync&lt;A&gt; Struct</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="ident">MOptionAsync</span>&lt;<span class="ident">A</span>&gt; :
<span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Alternative</span>&lt;<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">Unit</span>, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">OptionalAsync</span>&lt;<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">Monad</span>&lt;<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFoldable</span>&lt;<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">Unit</span>&gt;</span>,<br/><span Method="LanguageExt.Lst`1[BestForm.DomElement] &lt;text>b__0(System.Object)" Target="BestForm.Html+&lt;>c__DisplayClass4_0">    <span class="ident">BiFoldableAsync</span>&lt;<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;, <span class="ident">A</span>, <span class="ident">Unit</span>&gt;</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div>LanguageExt.ClassInstances</div></div><h2 >Fields</h2><div class="member-title"><a name="Inst"></a>Inst</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="ident">MOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Inst</span></div></div></div><h2 >Properties</h2><div class="member-title"><a name="NoneAsync"></a>NoneAsync</div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">NoneAsync</span>  { <span class="keyword">get</span>; }</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div></div><h2 >Methods</h2><div class="member-title"><a name="Append"></a>Append(OptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append__OptionAsync_A_x__OptionAsync_A_y_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">y</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Append</span>(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; x, <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; y)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Append__OptionAsync_A_x__OptionAsync_A_y_"><div class="section_title">SOURCE</div><div class="code">
            Plus(x, y)</div></div></div><div class="member-title"><a name="BiFold&lt;S>"></a>BiFold&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFold_S_OptionAsync_A_ma__S__state__Func_S_A_S_fa__Func_S_Unit_S_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">BiFold</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-BiFold_S_OptionAsync_A_ma__S__state__Func_S_A_S_fa__Func_S_Unit_S_fb_"><div class="section_title">SOURCE</div><div class="code">
            BiFoldAsync(ma, state, fa, fb).Result</div></div></div><div class="member-title"><a name="BiFoldAsync&lt;S>"></a>BiFoldAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_S_OptionAsync_A_ma__S__state__Func_S_A_S_fa__Func_S_Unit_S_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiFoldAsync_S_OptionAsync_A_ma__S__state__Func_S_A_S_fa__Func_S_Unit_S_fb_"><div class="section_title">SOURCE</div><div class="code">
            if (state.IsNull()) throw new ArgumentNullException(nameof(state));
            if (fa == null) throw new ArgumentNullException(nameof(fa));
            if (fb == null) throw new ArgumentNullException(nameof(fb));
            return Check.NullReturn(await ma.IsNone
                ? fa(state, await ma.Value)
                : fb(state, unit));
        </div></div></div><div class="member-title"><a name="BiFoldAsync&lt;S>"></a>BiFoldAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_S_OptionAsync_A_ma__S__state__Func_S_A_S_fa__Func_S_Unit_Task&lt;S>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiFoldAsync_S_OptionAsync_A_ma__S__state__Func_S_A_S_fa__Func_S_Unit_Task&lt;S>_fb_"><div class="section_title">SOURCE</div><div class="code">
            if (state.IsNull()) throw new ArgumentNullException(nameof(state));
            if (fa == null) throw new ArgumentNullException(nameof(fa));
            if (fb == null) throw new ArgumentNullException(nameof(fb));
            return Check.NullReturn(await ma.IsNone
                ? fa(state, await ma.Value)
                : await fb(state, unit));
        </div></div></div><div class="member-title"><a name="BiFoldAsync&lt;S>"></a>BiFoldAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Unit, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_S_OptionAsync_A_ma__S__state__Func_S_A_Task&lt;S>_fa__Func_S_Unit_S_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiFoldAsync_S_OptionAsync_A_ma__S__state__Func_S_A_Task&lt;S>_fa__Func_S_Unit_S_fb_"><div class="section_title">SOURCE</div><div class="code">
            if (state.IsNull()) throw new ArgumentNullException(nameof(state));
            if (fa == null) throw new ArgumentNullException(nameof(fa));
            if (fb == null) throw new ArgumentNullException(nameof(fb));
            return Check.NullReturn(await ma.IsNone
                ? await fa(state, await ma.Value)
                : fb(state, unit));
        </div></div></div><div class="member-title"><a name="BiFoldAsync&lt;S>"></a>BiFoldAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Unit, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldAsync_S_OptionAsync_A_ma__S__state__Func_S_A_Task&lt;S>_fa__Func_S_Unit_Task&lt;S>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldAsync</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiFoldAsync_S_OptionAsync_A_ma__S__state__Func_S_A_Task&lt;S>_fa__Func_S_Unit_Task&lt;S>_fb_"><div class="section_title">SOURCE</div><div class="code">
            if (state.IsNull()) throw new ArgumentNullException(nameof(state));
            if (fa == null) throw new ArgumentNullException(nameof(fa));
            if (fb == null) throw new ArgumentNullException(nameof(fb));
            return Check.NullReturn(await ma.IsNone
                ? await fa(state, await ma.Value)
                : await fb(state, unit));
        </div></div></div><div class="member-title"><a name="BiFoldBack&lt;S>"></a>BiFoldBack&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldBack_S_OptionAsync_A_ma__S__state__Func_S_A_S_fa__Func_S_Unit_S_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">S</span> <span class="ident">BiFoldBack</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"></div></div></div><div style="display:none" id="code-BiFoldBack_S_OptionAsync_A_ma__S__state__Func_S_A_S_fa__Func_S_Unit_S_fb_"><div class="section_title">SOURCE</div><div class="code">
            BiFoldBackAsync(ma, state, fa, fb).Result</div></div></div><div class="member-title"><a name="BiFoldBackAsync&lt;S>"></a>BiFoldBackAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldBackAsync_S_OptionAsync_A_ma__S__state__Func_S_A_S_fa__Func_S_Unit_S_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldBackAsync</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiFoldBackAsync_S_OptionAsync_A_ma__S__state__Func_S_A_S_fa__Func_S_Unit_S_fb_"><div class="section_title">SOURCE</div><div class="code">
            BiFoldAsync(ma, state, fa, fb)</div></div></div><div class="member-title"><a name="BiFoldBackAsync&lt;S>"></a>BiFoldBackAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Unit, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldBackAsync_S_OptionAsync_A_ma__S__state__Func_S_A_S_fa__Func_S_Unit_Task&lt;S>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldBackAsync</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiFoldBackAsync_S_OptionAsync_A_ma__S__state__Func_S_A_S_fa__Func_S_Unit_Task&lt;S>_fb_"><div class="section_title">SOURCE</div><div class="code">
            BiFoldAsync(ma, state, fa, fb)</div></div></div><div class="member-title"><a name="BiFoldBackAsync&lt;S>"></a>BiFoldBackAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Unit, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldBackAsync_S_OptionAsync_A_ma__S__state__Func_S_A_Task&lt;S>_fa__Func_S_Unit_S_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldBackAsync</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">S</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiFoldBackAsync_S_OptionAsync_A_ma__S__state__Func_S_A_Task&lt;S>_fa__Func_S_Unit_S_fb_"><div class="section_title">SOURCE</div><div class="code">
            BiFoldAsync(ma, state, fa, fb)</div></div></div><div class="member-title"><a name="BiFoldBackAsync&lt;S>"></a>BiFoldBackAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Unit, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFoldBackAsync_S_OptionAsync_A_ma__S__state__Func_S_A_Task&lt;S>_fa__Func_S_Unit_Task&lt;S>_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFoldBackAsync</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; fa, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiFoldBackAsync_S_OptionAsync_A_ma__S__state__Func_S_A_Task&lt;S>_fa__Func_S_Unit_Task&lt;S>_fb_"><div class="section_title">SOURCE</div><div class="code">
            BiFoldAsync(ma, state, fa, fb)</div></div></div><div class="member-title"><a name="Bind&lt;MonadB, MB, B>"></a>Bind&lt;MonadB, MB, B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, MB&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_MonadB_MB_B_OptionAsync_A_ma__Func_A_MB_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">MB</span> <span class="ident">Bind</span>&lt;<span class="ident">MonadB</span>, <span class="ident">MB</span>, <span class="ident">B</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">MB</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">MB</span></div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">MonadB</span> : <span class="keyword">struct</span> <span class="ident">Monad</span>&lt;<span class="ident">Unit</span>, <span class="ident">Unit</span>, <span class="ident">MB</span>, <span class="ident">B</span>&gt;</div></div><div style="display:none" id="code-Bind_MonadB_MB_B_OptionAsync_A_ma__Func_A_MB_f_"><div class="section_title">SOURCE</div><div class="code">
            ma.IsLazy
                ? default(MonadB).Id(_ =&gt;
                  {
                      return default(MonadB).IdAsync(async __ =&gt;
                      {
                          if (await ma.IsSome)
                          {
                              return f(await ma.Value);
                          }
                          else
                          {
                              return default(MonadB).Fail();
                          }
                      });
                  })
                : default(MonadB).IdAsync(async _ =&gt;
                  {
                      if(await ma.IsSome)
                      {
                          return f(await ma.Value);
                      }
                      else
                      {
                          return default(MonadB).Fail();
                      }
                  })</div></div></div><div class="member-title"><a name="BindReturn"></a>BindReturn(Unit, OptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BindReturn__Unit_____OptionAsync_A_mb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">_</div><div class="arg-type"><span class="ident">Unit</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">mb</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">BindReturn</span>(<span class="ident">Unit</span> _, <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; mb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BindReturn__Unit_____OptionAsync_A_mb_"><div class="section_title">SOURCE</div><div class="code">
            mb</div></div></div><div class="member-title"><a name="Count"></a>Count(OptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count__OptionAsync_A_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">int</span>&gt; <span class="ident">Count</span>(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Count__OptionAsync_A_ma_"><div class="section_title">SOURCE</div><div class="code"> _ =&gt;
            default(MOptionAsync&lt;A&gt;).CountAsync(ma)(_).Result</div></div></div><div class="member-title"><a name="CountAsync"></a>CountAsync(OptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-CountAsync__OptionAsync_A_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="ident">CountAsync</span>(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-CountAsync__OptionAsync_A_ma_"><div class="section_title">SOURCE</div><div class="code"> async _ =&gt;
            await ma.IsSome
                ? 1
                : 0</div></div></div><div class="member-title"><a name="Empty"></a>Empty()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Empty__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Empty</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Empty__"><div class="section_title">SOURCE</div><div class="code">
            None</div></div></div><div class="member-title"><a name="Fail"></a>Fail(object)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fail__object__err_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">err</div><div class="arg-type"><span class="keyword">object</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Fail</span>(<span class="keyword">object</span> err)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Fail__object__err_"><div class="section_title">SOURCE</div><div class="code">
            OptionAsync&lt;A&gt;.None</div></div></div><div class="member-title"><a name="Fail"></a>Fail(Exception)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fail__Exception__err_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">err</div><div class="arg-type"><span class="ident">Exception</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Fail</span>(<span class="ident">Exception</span> err = null)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Fail__Exception__err_"><div class="section_title">SOURCE</div><div class="code">
            OptionAsync&lt;A&gt;.None</div></div></div><div class="member-title"><a name="Fold&lt;S>"></a>Fold&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_S_OptionAsync_A_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">S</span>&gt; <span class="ident">Fold</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Fold_S_OptionAsync_A_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code"> _ =&gt;
            default(MOptionAsync&lt;A&gt;).FoldAsync(ma, state, f)(_).Result</div></div></div><div class="member-title"><a name="FoldAsync&lt;S>"></a>FoldAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldAsync_S_OptionAsync_A_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; <span class="ident">FoldAsync</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldAsync_S_OptionAsync_A_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code"> async _ =&gt; 
        {
            if (state.IsNull()) throw new ArgumentNullException(nameof(state));
            if (f == null) throw new ArgumentNullException(nameof(f));
            return Check.NullReturn(await ma.IsSome
                ? f(state, await ma.Value)
                : state);
        }</div></div></div><div class="member-title"><a name="FoldAsync&lt;S>"></a>FoldAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldAsync_S_OptionAsync_A_ma__S__state__Func_S_A_Task&lt;S>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; <span class="ident">FoldAsync</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldAsync_S_OptionAsync_A_ma__S__state__Func_S_A_Task&lt;S>_f_"><div class="section_title">SOURCE</div><div class="code"> async _ =&gt;
        {
            if (state.IsNull()) throw new ArgumentNullException(nameof(state));
            if (f == null) throw new ArgumentNullException(nameof(f));
            return Check.NullReturn(await ma.IsSome
                ? await f(state, await ma.Value)
                : state);
        }</div></div></div><div class="member-title"><a name="FoldBack&lt;S>"></a>FoldBack&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBack_S_OptionAsync_A_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">S</span>&gt; <span class="ident">FoldBack</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">S</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldBack_S_OptionAsync_A_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code"> _ =&gt;
            default(MOptionAsync&lt;A&gt;).FoldBackAsync(ma, state, f)(_).Result</div></div></div><div class="member-title"><a name="FoldBackAsync&lt;S>"></a>FoldBackAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackAsync_S_OptionAsync_A_ma__S__state__Func_S_A_S_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; <span class="ident">FoldBackAsync</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldBackAsync_S_OptionAsync_A_ma__S__state__Func_S_A_S_f_"><div class="section_title">SOURCE</div><div class="code">
            FoldAsync(ma, state, f)</div></div></div><div class="member-title"><a name="FoldBackAsync&lt;S>"></a>FoldBackAsync&lt;S&gt;(OptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackAsync_S_OptionAsync_A_ma__S__state__Func_S_A_Task&lt;S>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; <span class="ident">FoldBackAsync</span>&lt;<span class="ident">S</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; ma, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-FoldBackAsync_S_OptionAsync_A_ma__S__state__Func_S_A_Task&lt;S>_f_"><div class="section_title">SOURCE</div><div class="code"> 
            FoldAsync(ma, state, f)</div></div></div><div class="member-title"><a name="Id"></a>Id(Func&lt;Unit, OptionAsync&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Id__Func_Unit_OptionAsync&lt;A>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Id</span>(<span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Id__Func_Unit_OptionAsync&lt;A>_ma_"><div class="section_title">SOURCE</div><div class="code">
            new OptionAsync&lt;A&gt;(OptionDataAsync.Lazy(async () =&gt;
            {
                var a = ma(unit);
                return await a.IsSome
                    ? new Result&lt;A&gt;(await a.Value)
                    : Result&lt;A&gt;.None;
            }))</div></div></div><div class="member-title"><a name="IdAsync"></a>IdAsync(Func&lt;Unit, Task&lt;OptionAsync&lt;A&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IdAsync__Func_Unit_Task&lt;OptionAsync&lt;A>>_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IdAsync</span>(<span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">Task</span>&lt;<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;&gt;&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IdAsync__Func_Unit_Task&lt;OptionAsync&lt;A>>_ma_"><div class="section_title">SOURCE</div><div class="code">
            new OptionAsync&lt;A&gt;(OptionDataAsync.Lazy(async () =&gt;
            {
                var a = await ma(unit);
                return await a.IsSome
                    ? new Result&lt;A&gt;(await a.Value)
                    : Result&lt;A&gt;.None;
            }))</div></div></div><div class="member-title"><a name="IsNoneAsync"></a>IsNoneAsync(OptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IsNoneAsync__OptionAsync_A_opt_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">IsNoneAsync</span>(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; opt)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IsNoneAsync__OptionAsync_A_opt_"><div class="section_title">SOURCE</div><div class="code">
            opt.IsNone</div></div></div><div class="member-title"><a name="IsSomeAsync"></a>IsSomeAsync(OptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IsSomeAsync__OptionAsync_A_opt_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">IsSomeAsync</span>(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; opt)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IsSomeAsync__OptionAsync_A_opt_"><div class="section_title">SOURCE</div><div class="code">
            opt.IsSome</div></div></div><div class="member-title"><a name="IsUnsafeAsync"></a>IsUnsafeAsync(OptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IsUnsafeAsync__OptionAsync_A_opt_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">IsUnsafeAsync</span>(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; opt)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IsUnsafeAsync__OptionAsync_A_opt_"><div class="section_title">SOURCE</div><div class="code">
            Task.FromResult(false)</div></div></div><div class="member-title"><a name="MatchAsync"></a>MatchAsync(OptionAsync&lt;A&gt;, Action&lt;A&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync__OptionAsync_A_opt__Action_A_Some__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">MatchAsync</span>(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; opt, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span> None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync__OptionAsync_A_opt__Action_A_Some__Action__None_"><div class="section_title">SOURCE</div><div class="code">
            if (Some == null) throw new ArgumentNullException(nameof(Some));
            if (None == null) throw new ArgumentNullException(nameof(None));
            if (await opt.IsSome) Some(await opt.Value); else None();
            return Unit.Default;
        </div></div></div><div class="member-title"><a name="MatchAsync&lt;B>"></a>MatchAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_B_OptionAsync_A_opt__Func_A_B_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; opt, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_B_OptionAsync_A_opt__Func_A_B_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
            if (Some == null) throw new ArgumentNullException(nameof(Some));
            if (None == null) throw new ArgumentNullException(nameof(None));
            return await opt.IsSome
                ? Check.NullReturn(Some(await opt.Value))
                : Check.NullReturn(None());
        </div></div></div><div class="member-title"><a name="MatchAsync&lt;B>"></a>MatchAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_B_OptionAsync_A_opt__Func_A_Task&lt;B>_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; opt, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_B_OptionAsync_A_opt__Func_A_Task&lt;B>_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
            if (Some == null) throw new ArgumentNullException(nameof(Some));
            if (None == null) throw new ArgumentNullException(nameof(None));
            return await opt.IsSome
                ? Check.NullReturn(await Some(await opt.Value))
                : Check.NullReturn(None());
        </div></div></div><div class="member-title"><a name="MatchAsync&lt;B>"></a>MatchAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_B_OptionAsync_A_opt__Func_A_B_Some__Func_Task&lt;B>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; opt, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_B_OptionAsync_A_opt__Func_A_B_Some__Func_Task&lt;B>_None_"><div class="section_title">SOURCE</div><div class="code">
            if (Some == null) throw new ArgumentNullException(nameof(Some));
            if (None == null) throw new ArgumentNullException(nameof(None));
            return await opt.IsSome
                ? Check.NullReturn(Some(await opt.Value))
                : Check.NullReturn(await None());
        </div></div></div><div class="member-title"><a name="MatchAsync&lt;B>"></a>MatchAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchAsync_B_OptionAsync_A_opt__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchAsync</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; opt, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchAsync_B_OptionAsync_A_opt__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None_"><div class="section_title">SOURCE</div><div class="code">
            if (Some == null) throw new ArgumentNullException(nameof(Some));
            if (None == null) throw new ArgumentNullException(nameof(None));
            return await opt.IsSome
                ? Check.NullReturn(await Some(await opt.Value))
                : Check.NullReturn(await None());
        </div></div></div><div class="member-title"><a name="MatchUnsafeAsync&lt;B>"></a>MatchUnsafeAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUnsafeAsync_B_OptionAsync_A_opt__Func_A_B_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchUnsafeAsync</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; opt, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchUnsafeAsync_B_OptionAsync_A_opt__Func_A_B_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
            if (Some == null) throw new ArgumentNullException(nameof(Some));
            if (None == null) throw new ArgumentNullException(nameof(None));
            return await opt.IsSome
                ? Some(await opt.Value)
                : None();
        </div></div></div><div class="member-title"><a name="MatchUnsafeAsync&lt;B>"></a>MatchUnsafeAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUnsafeAsync_B_OptionAsync_A_opt__Func_A_Task&lt;B>_Some__Func_B_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchUnsafeAsync</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; opt, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchUnsafeAsync_B_OptionAsync_A_opt__Func_A_Task&lt;B>_Some__Func_B_None_"><div class="section_title">SOURCE</div><div class="code">
            if (Some == null) throw new ArgumentNullException(nameof(Some));
            if (None == null) throw new ArgumentNullException(nameof(None));
            return await opt.IsSome
                ? await Some(await opt.Value)
                : None();
        </div></div></div><div class="member-title"><a name="MatchUnsafeAsync&lt;B>"></a>MatchUnsafeAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUnsafeAsync_B_OptionAsync_A_opt__Func_A_B_Some__Func_Task&lt;B>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchUnsafeAsync</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; opt, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchUnsafeAsync_B_OptionAsync_A_opt__Func_A_B_Some__Func_Task&lt;B>_None_"><div class="section_title">SOURCE</div><div class="code">
            if (Some == null) throw new ArgumentNullException(nameof(Some));
            if (None == null) throw new ArgumentNullException(nameof(None));
            return await opt.IsSome
                ? Some(await opt.Value)
                : await None();
        </div></div></div><div class="member-title"><a name="MatchUnsafeAsync&lt;B>"></a>MatchUnsafeAsync&lt;B&gt;(OptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchUnsafeAsync_B_OptionAsync_A_opt__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">opt</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchUnsafeAsync</span>&lt;<span class="ident">B</span>&gt;(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; opt, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-MatchUnsafeAsync_B_OptionAsync_A_opt__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None_"><div class="section_title">SOURCE</div><div class="code">
            if (Some == null) throw new ArgumentNullException(nameof(Some));
            if (None == null) throw new ArgumentNullException(nameof(None));
            return await opt.IsSome
                ? await Some(await opt.Value)
                : await None();
        </div></div></div><div class="member-title"><a name="OptionalAsync"></a>OptionalAsync(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-OptionalAsync__A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">OptionalAsync</span>(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-OptionalAsync__A__x_"><div class="section_title">SOURCE</div><div class="code">
            new OptionAsync&lt;A&gt;(OptionDataAsync.Optional(x))</div></div></div><div class="member-title"><a name="Plus"></a>Plus(OptionAsync&lt;A&gt;, OptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Plus__OptionAsync_A_a__OptionAsync_A_b_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">a</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">b</div><div class="arg-type"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Plus</span>(<span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; a, <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; b)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Plus__OptionAsync_A_a__OptionAsync_A_b_"><div class="section_title">SOURCE</div><div class="code">
            a.IsLazy
                ? default(MOptionAsync&lt;A&gt;).Id(_ =&gt;
                    default(MOptionAsync&lt;A&gt;).IdAsync(async __ =&gt; 
                        await a.IsSome
                            ? a
                            : b))
                : default(MOptionAsync&lt;A&gt;).IdAsync(async __ =&gt;
                        await a.IsSome
                            ? a
                            : b)</div></div></div><div class="member-title"><a name="Return"></a>Return(Func&lt;Unit, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Return__Func_Unit_A_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Return</span>(<span class="ident">Func</span>&lt;<span class="ident">Unit</span>, <span class="ident">A</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Return__Func_Unit_A_f_"><div class="section_title">SOURCE</div><div class="code">
            new OptionAsync&lt;A&gt;(OptionDataAsync.Lazy(() =&gt;
                Task.Run(() =&gt;
                {
                    var a = f(unit);
                    return a.IsNull()
                        ? new Result&lt;A&gt;()
                        : new Result&lt;A&gt;(a);
                })))</div></div></div><div class="member-title"><a name="Return"></a>Return(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Return__A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Return</span>(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Return__A__x_"><div class="section_title">SOURCE</div><div class="code">
            OptionalAsync(x)</div></div></div><div class="member-title"><a name="SomeAsync"></a>SomeAsync(A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SomeAsync__A__x_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">SomeAsync</span>(<span class="ident">A</span> x)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SomeAsync__A__x_"><div class="section_title">SOURCE</div><div class="code">
            x.IsNull()
                ? throw new ArgumentNullException(&quot;Option doesn&#39;t support null values.  Use OptionUnsafe if this is desired behaviour&quot;)
                : new OptionAsync&lt;A&gt;(OptionDataAsync.Some(x))</div></div></div><div class="member-title"><a name="Zero"></a>Zero()<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Zero__&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Zero</span>()</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">OptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Zero__"><div class="section_title">SOURCE</div><div class="code">
            OptionAsync&lt;A&gt;.None</div></div></div></div></body></html>