<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="..//index.htm"></a> \ <span class="nav-bar-link" href="SeqExtensions_.htm">SeqExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Action&lt;A, B>">Action&lt;A, B&gt;(Seq&lt;A&gt;, Seq&lt;B&gt;)</a><a class="nav-link" href="#Append&lt;T>">Append&lt;T&gt;(Seq&lt;T&gt;, Seq&lt;T&gt;)</a><a class="nav-link" href="#Append&lt;T>">Append&lt;T&gt;(Seq&lt;T&gt;, Seq&lt;Seq&lt;T&gt;&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, B, C&gt;&gt;, Seq&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Seq&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, B, C&gt;&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Seq&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Seq&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)</a><a class="nav-link" href="#Apply&lt;A, B>">Apply&lt;A, B&gt;(Seq&lt;Func&lt;A, B&gt;&gt;, Seq&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B>">Apply&lt;A, B&gt;(Func&lt;A, B&gt;, Seq&lt;A&gt;)</a><a class="nav-link" href="#Choose&lt;A, B>">Choose&lt;A, B&gt;(Seq&lt;A&gt;, Func&lt;A, Option&lt;B&gt;&gt;)</a><a class="nav-link" href="#Choose&lt;A, B>">Choose&lt;A, B&gt;(Seq&lt;A&gt;, Func&lt;int, A, Option&lt;B&gt;&gt;)</a><a class="nav-link" href="#Count&lt;A>">Count&lt;A&gt;(ISeq&lt;A&gt;)</a><a class="nav-link" href="#Distinct&lt;EQ, T>">Distinct&lt;EQ, T&gt;(Seq&lt;T&gt;)</a><a class="nav-link" href="#Distinct&lt;T, K>">Distinct&lt;T, K&gt;(Seq&lt;T&gt;, Func&lt;T, K&gt;, Option&lt;Func&lt;K, K, bool&gt;&gt;)</a><a class="nav-link" href="#Distinct&lt;T>">Distinct&lt;T&gt;(Seq&lt;T&gt;)</a><a class="nav-link" href="#Find&lt;T>">Find&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#FindSeq&lt;T>">FindSeq&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#First&lt;A>">First&lt;A&gt;(ISeq&lt;A&gt;)</a><a class="nav-link" href="#FirstOrDefault&lt;A>">FirstOrDefault&lt;A&gt;(ISeq&lt;A&gt;)</a><a class="nav-link" href="#FoldBackUntil&lt;S, T>">FoldBackUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#FoldBackUntil&lt;S, T>">FoldBackUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#FoldBackWhile&lt;S, T>">FoldBackWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#FoldBackWhile&lt;S, T>">FoldBackWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#FoldUntil&lt;S, T>">FoldUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#FoldUntil&lt;S, T>">FoldUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#FoldWhile&lt;S, T>">FoldWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#FoldWhile&lt;S, T>">FoldWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)</a><a class="nav-link" href="#Head&lt;A>">Head&lt;A&gt;(ISeq&lt;A&gt;)</a><a class="nav-link" href="#HeadOrNone&lt;A>">HeadOrNone&lt;A&gt;(ISeq&lt;A&gt;)</a><a class="nav-link" href="#Iter&lt;T>">Iter&lt;T&gt;(Seq&lt;T&gt;, Action&lt;T&gt;)</a><a class="nav-link" href="#Iter&lt;T>">Iter&lt;T&gt;(Seq&lt;T&gt;, Action&lt;int, T&gt;)</a><a class="nav-link" href="#Reduce&lt;T>">Reduce&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, T, T&gt;)</a><a class="nav-link" href="#ReduceBack&lt;T>">ReduceBack&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, T, T&gt;)</a><a class="nav-link" href="#Rev&lt;T>">Rev&lt;T&gt;(Seq&lt;T&gt;)</a><a class="nav-link" href="#Scan&lt;S, T>">Scan&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#ScanBack&lt;S, T>">ScanBack&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;)</a><a class="nav-link" href="#Span&lt;T>">Span&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)</a><a class="nav-link" href="#Sum">Sum(Seq&lt;int&gt;)</a><a class="nav-link" href="#Sum">Sum(Seq&lt;float&gt;)</a><a class="nav-link" href="#Sum">Sum(Seq&lt;double&gt;)</a><a class="nav-link" href="#Sum">Sum(Seq&lt;decimal&gt;)</a><a class="nav-link" href="#Tail&lt;A>">Tail&lt;A&gt;(ISeq&lt;A&gt;)</a><a class="nav-link" href="#Tails&lt;A>">Tails&lt;A&gt;(Seq&lt;A&gt;)</a><a class="nav-link" href="#Tailsr&lt;A>">Tailsr&lt;A&gt;(Seq&lt;A&gt;)</a><a class="nav-link" href="#Zip&lt;T, U, V>">Zip&lt;T, U, V&gt;(Seq&lt;T&gt;, Seq&lt;U&gt;, Func&lt;T, U, V&gt;)</a><a class="nav-link" href="#Zip&lt;T, U>">Zip&lt;T, U&gt;(Seq&lt;T&gt;, Seq&lt;U&gt;)</a></div><div class="content-panel"><h1 >SeqExtensions Class</h1><p ></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">SeqExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div></div></div><h2 >Methods</h2><div class="member-title"><a name="Action&lt;A, B>"></a>Action&lt;A, B&gt;(Seq&lt;A&gt;, Seq&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Action_A_B_Seq_A_fa__Seq_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-Action_A_B_Seq_A_fa__Seq_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplSeq&lt;A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="Append&lt;T>"></a>Append&lt;T&gt;(Seq&lt;T&gt;, Seq&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append_T_Seq_T_lhs__Seq_T_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Concatenate two sequences (Concat in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >First sequence</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Second sequence</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Append</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; lhs, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Concatenated sequence</span></div></div></div><div style="display:none" id="code-Append_T_Seq_T_lhs__Seq_T_rhs_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.append(lhs, rhs)</div></div></div><div class="member-title"><a name="Append&lt;T>"></a>Append&lt;T&gt;(Seq&lt;T&gt;, Seq&lt;Seq&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append_T_Seq_T_x__Seq_Seq&lt;T>_xs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Concatenate a sequence and a sequence of sequences </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">x</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">xs</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Append</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; x, <span class="ident">Seq</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; xs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Concatenated list</span></div></div></div><div style="display:none" id="code-Append_T_Seq_T_x__Seq_Seq&lt;T>_xs_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.append(x, xs)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, B, C&gt;&gt;, Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Seq_Func&lt;A, B, C>_fabc__Seq_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a sequence of values to a sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Returns the result of applying the sequence of argument values to the  IEnumerable of functions: a sequence of functions of arity 1</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Seq_Func&lt;A, B, C>_fabc__Seq_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplSeq&lt;A, B, C&gt;.Inst.Apply(fabc.Map(curry), fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Func_A_B_C_fabc__Seq_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a sequence of values to a sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Returns the result of applying the sequence of argument values to the  sequence of functions: a sequence of functions of arity 1</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Func_A_B_C_fabc__Seq_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplSeq&lt;A, B, C&gt;.Inst.Apply(curry(fabc).Cons(), fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, B, C&gt;&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Seq_Func&lt;A, B, C>_fabc__Seq_A_fa__Seq_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply sequence of values to a sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Returns the result of applying the sequence of arguments to the sequence of functions</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Seq_Func&lt;A, B, C>_fabc__Seq_A_fa__Seq_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplSeq&lt;A, B, C&gt;.Inst.Apply(fabc.Map(curry), fa, fb)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Func_A_B_C_fabc__Seq_A_fa__Seq_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply sequence of values to an sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Returns the result of applying the sequence of arguments to the sequence of functions</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Func_A_B_C_fabc__Seq_A_fa__Seq_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplSeq&lt;A, B, C&gt;.Inst.Apply(curry(fabc).Cons(), fa, fb)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Seq_Func&lt;A, Func&lt;B, C>>_fabc__Seq_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a sequence of values to a sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Returns the result of applying the sequence of argument values to the  sequence of functions: a sequence of functions of arity 1</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Seq_Func&lt;A, Func&lt;B, C>>_fabc__Seq_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplSeq&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Seq_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply an sequence of values to an sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Returns the result of applying the sequence of argument values to the  sequence of functions: a sequence of functions of arity 1</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Seq_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplSeq&lt;A, B, C&gt;.Inst.Apply(fabc.Cons(), fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Seq&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Seq_Func&lt;A, Func&lt;B, C>>_fabc__Seq_A_fa__Seq_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply sequence of values to an sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Returns the result of applying the sequence of arguments to the sequence of functions</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Seq_Func&lt;A, Func&lt;B, C>>_fabc__Seq_A_fa__Seq_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplSeq&lt;A, B, C&gt;.Inst.Apply(fabc, fa, fb)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, Seq&lt;A&gt;, Seq&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Seq_A_fa__Seq_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply sequence of values to a sequence of functions of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >sequence argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Returns the result of applying the sequence of arguments to the sequence of functions</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Func_A_Func&lt;B, C>_fabc__Seq_A_fa__Seq_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplSeq&lt;A, B, C&gt;.Inst.Apply(fabc.Cons(), fa, fb)</div></div></div><div class="member-title"><a name="Apply&lt;A, B>"></a>Apply&lt;A, B&gt;(Seq&lt;Func&lt;A, B&gt;&gt;, Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_Seq_Func&lt;A, B>_fabc__Seq_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a sequence of values to a sequence of functions </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence of argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Returns the result of applying the sequence argument values to the sequence functions</span></div></div></div><div style="display:none" id="code-Apply_A_B_Seq_Func&lt;A, B>_fabc__Seq_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplSeq&lt;A, B&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B>"></a>Apply&lt;A, B&gt;(Func&lt;A, B&gt;, Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_Func_A_B_fabc__Seq_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply a sequence of values to a sequence of functions </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >sequence of functions</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence of argument values</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fabc, <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Returns the result of applying the sequence argument values to the sequence functions</span></div></div></div><div style="display:none" id="code-Apply_A_B_Func_A_B_fabc__Seq_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplSeq&lt;A, B&gt;.Inst.Apply(fabc.Cons(), fa)</div></div></div><div class="member-title"><a name="Choose&lt;A, B>"></a>Choose&lt;A, B&gt;(Seq&lt;A&gt;, Func&lt;A, Option&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Choose_A_B_Seq_A_list__Func_A_Option&lt;B>_selector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies the given function &#39;selector&#39; to each element of the sequence. Returns the sequence  comprised of the results for each element where the function returns Some(f(x)). </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Selector function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Choose</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt; selector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped and filtered sequence</span></div></div></div><div style="display:none" id="code-Choose_A_B_Seq_A_list__Func_A_Option&lt;B>_selector_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.choose(list, selector)</div></div></div><div class="member-title"><a name="Choose&lt;A, B>"></a>Choose&lt;A, B&gt;(Seq&lt;A&gt;, Func&lt;int, A, Option&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Choose_A_B_Seq_A_list__Func_int_A_Option&lt;B>_selector_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies the given function &#39;selector&#39; to each element of the sequence. Returns the  sequence comprised of the results for each element where the function returns Some(f(x)). An index value is passed through to the selector function also. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">selector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">A</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Selector function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Choose</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; list, <span class="ident">Func</span>&lt;<span class="keyword">int</span>, <span class="ident">A</span>, <span class="ident">Option</span>&lt;<span class="ident">B</span>&gt;&gt; selector)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped and filtered sequence</span></div></div></div><div style="display:none" id="code-Choose_A_B_Seq_A_list__Func_int_A_Option&lt;B>_selector_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.choose(list, selector)</div></div></div><div class="member-title"><a name="Count&lt;A>"></a>Count&lt;A&gt;(ISeq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count_A_ISeq_A_seq_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the number of items in the sequence </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">seq</div><div class="arg-type"><span class="ident">ISeq</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">Count</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">ISeq</span>&lt;<span class="ident">A</span>&gt; seq)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Count_A_ISeq_A_seq_"><div class="section_title">SOURCE</div><div class="code">
        seq.Count</div></div></div><div class="member-title"><a name="Distinct&lt;EQ, T>"></a>Distinct&lt;EQ, T&gt;(Seq&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Distinct_EQ_T_Seq_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a new sequence with all duplicate values removed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Distinct</span>&lt;<span class="ident">EQ</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A new sequence with all duplicate values removed</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">EQ</span> : <span class="keyword">struct</span> <span class="ident">Eq</span>&lt;<span class="ident">T</span>&gt;</div></div><div style="display:none" id="code-Distinct_EQ_T_Seq_T_list_"><div class="section_title">SOURCE</div><div class="code">
        Seq(Enumerable.Distinct(list, new EqCompare&lt;T&gt;((x, y) =&gt; default(EQ).Equals(x, y))))</div></div></div><div class="member-title"><a name="Distinct&lt;T, K>"></a>Distinct&lt;T, K&gt;(Seq&lt;T&gt;, Func&lt;T, K&gt;, Option&lt;Func&lt;K, K, bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Distinct_T_K_Seq_T_list__Func_T_K_keySelector__Option_Func&lt;K, K, bool>_compare_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a new sequence with all duplicate values removed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">keySelector</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">K</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">compare</div><div class="arg-type"><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">K</span>, <span class="keyword">bool</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Distinct</span>&lt;<span class="ident">T</span>, <span class="ident">K</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">K</span>&gt; keySelector, <span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">K</span>, <span class="keyword">bool</span>&gt;&gt; compare = <span class="keyword">default</span><span class="ident">Option</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">K</span>, <span class="ident">K</span>, <span class="keyword">bool</span>&gt;&gt;)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A new sequence with all duplicate values removed</span></div></div></div><div style="display:none" id="code-Distinct_T_K_Seq_T_list__Func_T_K_keySelector__Option_Func&lt;K, K, bool>_compare_"><div class="section_title">SOURCE</div><div class="code">
         Seq(Enumerable.Distinct(list, new EqCompare&lt;T&gt;((a, b) =&gt; compare.IfNone(EqualityComparer&lt;K&gt;.Default.Equals)(keySelector(a), keySelector(b)), a =&gt; keySelector(a)?.GetHashCode() ?? 0)))</div></div></div><div class="member-title"><a name="Distinct&lt;T>"></a>Distinct&lt;T&gt;(Seq&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Distinct_T_Seq_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a new sequence with all duplicate values removed </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Distinct</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >A new sequence with all duplicate values removed</span></div></div></div><div style="display:none" id="code-Distinct_T_Seq_T_list_"><div class="section_title">SOURCE</div><div class="code">
        Seq(Enumerable.Distinct(list))</div></div></div><div class="member-title"><a name="Find&lt;T>"></a>Find&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Find_T_Seq_T_list__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns Some(x) for the first item in the sequence that matches the predicate  provided, None otherwise. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to search</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Find</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Some(x) for the first item in the sequence that matches the predicate  provided, None otherwise.</span></div></div></div><div style="display:none" id="code-Find_T_Seq_T_list__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.find(list, pred)</div></div></div><div class="member-title"><a name="FindSeq&lt;T>"></a>FindSeq&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FindSeq_T_Seq_T_list__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns [x] for the first item in the sequence that matches the predicate  provided, [] otherwise. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to search</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">FindSeq</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >[x] for the first item in the sequence that matches the predicate  provided, [] otherwise.</span></div></div></div><div style="display:none" id="code-FindSeq_T_Seq_T_list__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.findSeq(list, pred)</div></div></div><div class="member-title"><a name="First&lt;A>"></a>First&lt;A&gt;(ISeq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-First_A_ISeq_A_seq_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the head item in the sequence </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">seq</div><div class="arg-type"><span class="ident">ISeq</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">First</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">ISeq</span>&lt;<span class="ident">A</span>&gt; seq)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-First_A_ISeq_A_seq_"><div class="section_title">SOURCE</div><div class="code">
        seq.Head</div></div></div><div class="member-title"><a name="FirstOrDefault&lt;A>"></a>FirstOrDefault&lt;A&gt;(ISeq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FirstOrDefault_A_ISeq_A_seq_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the head item in the sequence </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">seq</div><div class="arg-type"><span class="ident">ISeq</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">FirstOrDefault</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">ISeq</span>&lt;<span class="ident">A</span>&gt; seq)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-FirstOrDefault_A_ISeq_A_seq_"><div class="section_title">SOURCE</div><div class="code">
        seq.IsEmpty
            ? default(A)
            : seq.Head</div></div></div><div class="member-title"><a name="FoldBackUntil&lt;S, T>"></a>FoldBackUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence (from last element to first) whilst the predicate function returns False for the item being processed, threading an  aggregate state through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the sequence. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackUntil</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldBackUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.foldBackUntil(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldBackUntil&lt;S, T>"></a>FoldBackUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence (from last element to first),  threading an accumulator argument through the computation (and whilst the predicate function  returns False when passed the aggregate state). The fold function takes the state argument,  and applies the function &#39;folder&#39; to it and the first element of the sequence. Then, it feeds  this result into the function &#39;folder&#39; along with the second element, and so on. It returns  the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackUntil</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldBackUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.foldBackUntil(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldBackWhile&lt;S, T>"></a>FoldBackWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence (from last element to first) whilst the predicate function returns True for the item being processed, threading an  aggregate state through the computation. The fold function takes the state argument, and  applies the function &#39;folder&#39; to it and the first element of the sequence. Then, it feeds this  result into the function &#39;folder&#39; along with the second element, and so on. It returns the  final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldBackWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.foldBackWhile(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldBackWhile&lt;S, T>"></a>FoldBackWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldBackWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence (from last element to first),  threading an accumulator argument through the computation (and whilst the predicate function  returns True when passed the aggregate state). The fold function takes the state argument,  and applies the function &#39;folder&#39; to it and the first element of the sequence. Then, it feeds  this result into the function &#39;folder&#39; along with the second element, and so on. It returns  the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldBackWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldBackWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.foldBackWhile(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldUntil&lt;S, T>"></a>FoldUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence whilst the predicate function  returns False for the item being processed, threading an aggregate state through the  computation. The fold function takes the state argument, and applies the function &#39;folder&#39;  to it and the first element of the sequence. Then, it feeds this result into the function &#39;folder&#39;  along with the second element, and so on. It returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldUntil</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.foldUntil(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldUntil&lt;S, T>"></a>FoldUntil&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence, threading an accumulator  argument through the computation (and whilst the predicate function returns False when passed  the aggregate state). The fold function takes the state argument, and applies the function  &#39;folder&#39; to it and the first element of the sequence. Then, it feeds this result into the  function &#39;folder&#39; along with the second element, and so on. It returns the final result.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Enumerable to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldUntil</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldUntil_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.foldUntil(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldWhile&lt;S, T>"></a>FoldWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence whilst the predicate function  returns True for the item being processed, threading an aggregate state through the  computation. The fold function takes the state argument, and applies the function &#39;folder&#39;  to it and the first element of the sequence. Then, it feeds this result into the function &#39;folder&#39;  along with the second element, and so on. It returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.foldWhile(list, state, folder, pred)</div></div></div><div class="member-title"><a name="FoldWhile&lt;S, T>"></a>FoldWhile&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;, Func&lt;S, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-FoldWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function &#39;folder&#39; to each element of the sequence, threading an accumulator  argument through the computation (and whilst the predicate function returns True when passed  the aggregate state). The fold function takes the state argument, and applies the function  &#39;folder&#39; to it and the first element of the sequence. Then, it feeds this result into the  function &#39;folder&#39; along with the second element, and so on. It returns the final result.  </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">S</span> <span class="ident">FoldWhile</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">S</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-FoldWhile_S_T_Seq_T_list__S__state__Func_S_T_S_folder__Func_S_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.foldWhile(list, state, folder, pred)</div></div></div><div class="member-title"><a name="Head&lt;A>"></a>Head&lt;A&gt;(ISeq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Head_A_ISeq_A_seq_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the head item in the sequence </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">seq</div><div class="arg-type"><span class="ident">ISeq</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">A</span> <span class="ident">Head</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">ISeq</span>&lt;<span class="ident">A</span>&gt; seq)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">A</span></div><div class="normal"></div></div></div><div style="display:none" id="code-Head_A_ISeq_A_seq_"><div class="section_title">SOURCE</div><div class="code">
        seq.Head</div></div></div><div class="member-title"><a name="HeadOrNone&lt;A>"></a>HeadOrNone&lt;A&gt;(ISeq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-HeadOrNone_A_ISeq_A_seq_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the head item in the sequence </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">seq</div><div class="arg-type"><span class="ident">ISeq</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt; <span class="ident">HeadOrNone</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">ISeq</span>&lt;<span class="ident">A</span>&gt; seq)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-HeadOrNone_A_ISeq_A_seq_"><div class="section_title">SOURCE</div><div class="code">
        seq.IsEmpty
            ? None
            : Some(seq.Head)</div></div></div><div class="member-title"><a name="Iter&lt;T>"></a>Iter&lt;T&gt;(Seq&lt;T&gt;, Action&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_T_Seq_T_list__Action_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes an action for each item in the sequence in order </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to iterate</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke with each item</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Iter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Action</span>&lt;<span class="ident">T</span>&gt; action)</div></div><div style="display:none" id="code-Iter_T_Seq_T_list__Action_T_action_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.iter(list, action)</div></div></div><div class="member-title"><a name="Iter&lt;T>"></a>Iter&lt;T&gt;(Seq&lt;T&gt;, Action&lt;int, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_T_Seq_T_list__Action_int_T_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invokes an action for each item in the sequence in order and supplies a running index value. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to iterate</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Action to invoke with each item</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Unit</span> <span class="ident">Iter</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Action</span>&lt;<span class="keyword">int</span>, <span class="ident">T</span>&gt; action)</div></div><div style="display:none" id="code-Iter_T_Seq_T_list__Action_int_T_action_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.iter(list, action)</div></div></div><div class="member-title"><a name="Reduce&lt;T>"></a>Reduce&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Reduce_T_Seq_T_list__Func_T_T_T_reducer_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function to each element of the sequence (from last element to first), threading  an accumulator argument through the computation. This function first applies the function  to the first two elements of the sequence. Then, it passes this result into the function along  with the third element and so on. Finally, it returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to reduce</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">reducer</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Reduce function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">Reduce</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; reducer)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-Reduce_T_Seq_T_list__Func_T_T_T_reducer_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.reduceBack(list, reducer)</div></div></div><div class="member-title"><a name="ReduceBack&lt;T>"></a>ReduceBack&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, T, T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ReduceBack_T_Seq_T_list__Func_T_T_T_reducer_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function to each element of the sequence, threading an accumulator argument  through the computation. This function first applies the function to the first two  elements of the sequence. Then, it passes this result into the function along with the third  element and so on. Finally, it returns the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to reduce</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">reducer</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Reduce function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">T</span> <span class="ident">ReduceBack</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">T</span>, <span class="ident">T</span>&gt; reducer)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">T</span></div><div class="normal"><span >Aggregate value</span></div></div></div><div style="display:none" id="code-ReduceBack_T_Seq_T_list__Func_T_T_T_reducer_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.reduceBack(list, reducer)</div></div></div><div class="member-title"><a name="Rev&lt;T>"></a>Rev&lt;T&gt;(Seq&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Rev_T_Seq_T_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Reverses the sequence (Reverse in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to reverse</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Rev</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"><span >Reversed sequence</span></div></div></div><div style="display:none" id="code-Rev_T_Seq_T_list_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.rev(list)</div></div></div><div class="member-title"><a name="Scan&lt;S, T>"></a>Scan&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Scan_S_T_Seq_T_list__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function to each element of the sequence, threading an accumulator argument  through the computation. This function takes the state argument, and applies the function  to it and the first element of the sequence. Then, it passes this result into the function  along with the second element, and so on. Finally, it returns the list of intermediate  results and the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >sequence to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folding function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">S</span>&gt; <span class="ident">Scan</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Aggregate state</span></div></div></div><div style="display:none" id="code-Scan_S_T_Seq_T_list__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.scan(list, state, folder)</div></div></div><div class="member-title"><a name="ScanBack&lt;S, T>"></a>ScanBack&lt;S, T&gt;(Seq&lt;T&gt;, S, Func&lt;S, T, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ScanBack_S_T_Seq_T_list__S__state__Func_S_T_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Applies a function to each element of the sequence (from last element to first),  threading an accumulator argument through the computation. This function takes the state  argument, and applies the function to it and the first element of the sequence. Then, it  passes this result into the function along with the second element, and so on. Finally,  it returns the list of intermediate results and the final result. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >Enumerable to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Folding function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">S</span>&gt; <span class="ident">ScanBack</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">T</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Aggregate state</span></div></div></div><div style="display:none" id="code-ScanBack_S_T_Seq_T_list__S__state__Func_S_T_S_folder_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.scanBack(list, state, folder)</div></div></div><div class="member-title"><a name="Span&lt;T>"></a>Span&lt;T&gt;(Seq&lt;T&gt;, Func&lt;T, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Span_T_Seq_T_self__Func_T_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Span, applied to a predicate &#39;pred&#39; and a list, returns a tuple where first element is  longest prefix (possibly empty) of elements that satisfy &#39;pred&#39; and second element is the  remainder of the list: </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >List</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ValueTuple</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">Span</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ValueTuple</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;, <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"><span >Split list</span></div></div></div><div style="display:none" id="code-Span_T_Seq_T_self__Func_T_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.span(self, pred)</div></div></div><div class="member-title"><a name="Sum"></a>Sum(Seq&lt;int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum__Seq_int_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the sum total of all the items in the list (Sum in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="keyword">int</span>&gt;</div></div><div class="arg-desc"><span >List to sum</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="ident">Sum</span>(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="keyword">int</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">int</span></div><div class="normal"><span >Sum total</span></div></div></div><div style="display:none" id="code-Sum__Seq_int_list_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.sum(list)</div></div></div><div class="member-title"><a name="Sum"></a>Sum(Seq&lt;float&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum__Seq_float_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the sum total of all the items in the list (Sum in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="keyword">float</span>&gt;</div></div><div class="arg-desc"><span >List to sum</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="ident">Sum</span>(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="keyword">float</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">float</span></div><div class="normal"><span >Sum total</span></div></div></div><div style="display:none" id="code-Sum__Seq_float_list_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.sum(list)</div></div></div><div class="member-title"><a name="Sum"></a>Sum(Seq&lt;double&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum__Seq_double_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the sum total of all the items in the list (Sum in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="keyword">double</span>&gt;</div></div><div class="arg-desc"><span >List to sum</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="ident">Sum</span>(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="keyword">double</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">double</span></div><div class="normal"><span >Sum total</span></div></div></div><div style="display:none" id="code-Sum__Seq_double_list_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.sum(list)</div></div></div><div class="member-title"><a name="Sum"></a>Sum(Seq&lt;decimal&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum__Seq_decimal_list_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Returns the sum total of all the items in the list (Sum in LINQ) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="keyword">decimal</span>&gt;</div></div><div class="arg-desc"><span >List to sum</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">decimal</span> <span class="ident">Sum</span>(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="keyword">decimal</span>&gt; list)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="keyword">decimal</span></div><div class="normal"><span >Sum total</span></div></div></div><div style="display:none" id="code-Sum__Seq_decimal_list_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.sum(list)</div></div></div><div class="member-title"><a name="Tail&lt;A>"></a>Tail&lt;A&gt;(ISeq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tail_A_ISeq_A_seq_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Get the head item in the sequence </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">seq</div><div class="arg-type"><span class="ident">ISeq</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Tail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">ISeq</span>&lt;<span class="ident">A</span>&gt; seq)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Tail_A_ISeq_A_seq_"><div class="section_title">SOURCE</div><div class="code">
        seq.Tail</div></div></div><div class="member-title"><a name="Tails&lt;A>"></a>Tails&lt;A&gt;(Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tails_A_Seq_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The tails function returns all final segments of the argument, longest first. For example:<br/><br/><div class='code-line'>     tails([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]) == [[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;], [&#39;b&#39;,&#39;c&#39;], [&#39;c&#39;],[]]</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Seq</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Tails</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Seq of Seq of A</span></div></div></div><div style="display:none" id="code-Tails_A_Seq_A_self_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.tails(self)</div></div></div><div class="member-title"><a name="Tailsr&lt;A>"></a>Tailsr&lt;A&gt;(Seq&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Tailsr_A_Seq_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >The tailsr function returns all final segments of the argument, longest first. For example:<br/><br/><div class='code-line'>     tails([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]) == [[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;], [&#39;b&#39;,&#39;c&#39;], [&#39;c&#39;],[]]</div> </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Seq</span></div></div><div class="section_title">REMARKS</div><span >Differs from <span class='code-inline'>tails</span> in implementation only.  The <span class='code-inline'>tailsr</span> uses recursive processing whereas <span class='code-inline'>tails</span> uses a while loop aggregation followed by a reverse.  For small sequences  <span class='code-inline'>tailsr</span> is probably more efficient. of the <span class='code-inline'>Se</span> </span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">Tailsr</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"><span >Seq of Seq of A</span></div></div></div><div style="display:none" id="code-Tailsr_A_Seq_A_self_"><div class="section_title">SOURCE</div><div class="code">
        LanguageExt.Seq.tailsr(self)</div></div></div><div class="member-title"><a name="Zip&lt;T, U, V>"></a>Zip&lt;T, U, V&gt;(Seq&lt;T&gt;, Seq&lt;U&gt;, Func&lt;T, U, V&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Zip_T_U_V_Seq_T_list__Seq_U_other__Func_T_U_V_zipper_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Joins two sequences together either into a single sequence using the join  function provided </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >First sequence to join</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc"><span >Second sequence to join</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">zipper</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;</div></div><div class="arg-desc"><span >Join function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">V</span>&gt; <span class="ident">Zip</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Seq</span>&lt;<span class="ident">U</span>&gt; other, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>, <span class="ident">V</span>&gt; zipper)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">V</span>&gt;</div><div class="normal"><span >Joined sequence</span></div></div></div><div style="display:none" id="code-Zip_T_U_V_Seq_T_list__Seq_U_other__Func_T_U_V_zipper_"><div class="section_title">SOURCE</div><div class="code">
        Seq(Enumerable.Zip(list, other, zipper))</div></div></div><div class="member-title"><a name="Zip&lt;T, U>"></a>Zip&lt;T, U&gt;(Seq&lt;T&gt;, Seq&lt;U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Zip_T_U_Seq_T_list__Seq_U_other_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Joins two sequences together either into an sequence of tuples </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">list</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt;</div></div><div class="arg-desc"><span >First sequence to join</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">other</div><div class="arg-type"><span class="ident">Seq</span>&lt;<span class="ident">U</span>&gt;</div></div><div class="arg-desc"><span >Second sequence to join</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Seq</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;&gt; <span class="ident">Zip</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="keyword">this</span> <span class="ident">Seq</span>&lt;<span class="ident">T</span>&gt; list, <span class="ident">Seq</span>&lt;<span class="ident">U</span>&gt; other)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Seq</span>&lt;<span class="ident">ValueTuple</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;&gt;</div><div class="normal"><span >Joined sequence of tuples</span></div></div></div><div style="display:none" id="code-Zip_T_U_Seq_T_list__Seq_U_other_"><div class="section_title">SOURCE</div><div class="code">
        Seq(Enumerable.Zip(list, other, (t, u) =&gt; (t, u)))</div></div></div></div></body></html>