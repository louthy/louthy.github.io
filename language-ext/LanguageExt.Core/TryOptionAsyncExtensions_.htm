<html ><head ><link rel="stylesheet" type="text/css" href="doc.css"></link></head><body ><div class="nav-bar"><a class="nav-bar-link" href="../index.htm">API Reference</a> \ <a class="nav-bar-link" href="..//index.htm"></a> \ <span class="nav-bar-link" href="TryOptionAsyncExtensions_.htm">TryOptionAsyncExtensions</span></div><div class="nav-panel"><h3 >METHODS</h3><a class="nav-link" href="#Action&lt;A, B>">Action&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;)</a><a class="nav-link" href="#Add&lt;NUM, A>">Add&lt;NUM, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Append&lt;SEMI, A>">Append&lt;SEMI, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(TryOptionAsync&lt;Func&lt;A, B, C&gt;&gt;, TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(TryOptionAsync&lt;Func&lt;A, B, C&gt;&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(TryOptionAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B, C>">Apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B>">Apply&lt;A, B&gt;(TryOptionAsync&lt;Func&lt;A, B&gt;&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Apply&lt;A, B>">Apply&lt;A, B&gt;(Func&lt;A, B&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#AsEnumerable&lt;A>">AsEnumerable&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#AsString&lt;A>">AsString&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#BiBind&lt;A, R>">BiBind&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, TryOptionAsync&lt;R&gt;&gt;, Func&lt;TryOptionAsync&lt;R&gt;&gt;)</a><a class="nav-link" href="#BiFilter&lt;A>">BiFilter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#BiFilter&lt;A>">BiFilter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;, Func&lt;bool&gt;)</a><a class="nav-link" href="#BiFilter&lt;A>">BiFilter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#BiFilter&lt;A>">BiFilter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;, Func&lt;Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#BiFold&lt;A, S>">BiFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#BiFold&lt;A, S>">BiFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiFold&lt;A, S>">BiFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;)</a><a class="nav-link" href="#BiFold&lt;A, S>">BiFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#BiMap&lt;A, B>">BiMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#BiMap&lt;A, B>">BiMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)</a><a class="nav-link" href="#BiMap&lt;A, B>">BiMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#BiMap&lt;A, B>">BiMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#Bind&lt;A, B>">Bind&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, TryOptionAsync&lt;B&gt;&gt;)</a><a class="nav-link" href="#Compare&lt;ORD, A>">Compare&lt;ORD, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Count&lt;A>">Count&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Divide&lt;NUM, A>">Divide&lt;NUM, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Exists&lt;A>">Exists&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Exists&lt;A>">Exists&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#Filter&lt;A>">Filter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Filter&lt;A>">Filter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#Flatten&lt;T>">Flatten&lt;T&gt;(TryOptionAsync&lt;TryOptionAsync&lt;T&gt;&gt;)</a><a class="nav-link" href="#Flatten&lt;T>">Flatten&lt;T&gt;(TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;T&gt;&gt;&gt;)</a><a class="nav-link" href="#Flatten&lt;T>">Flatten&lt;T&gt;(TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;T&gt;&gt;&gt;&gt;)</a><a class="nav-link" href="#Fold&lt;A, S>">Fold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;)</a><a class="nav-link" href="#Fold&lt;A, S>">Fold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#ForAll&lt;A>">ForAll&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#ForAll&lt;A>">ForAll&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)</a><a class="nav-link" href="#IfFail&lt;A>">IfFail&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#IfFailThrow&lt;A>">IfFailThrow&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, A)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;Task&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A&gt;, Func&lt;Exception, A&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;Task&lt;A&gt;&gt;, Func&lt;Exception, A&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A&gt;, Func&lt;Exception, Task&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfNoneOrFail&lt;A>">IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;Task&lt;A&gt;&gt;, Func&lt;Exception, Task&lt;A&gt;&gt;)</a><a class="nav-link" href="#IfSome&lt;A>">IfSome&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#Iter&lt;A>">Iter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#Join&lt;A, B, C, D>">Join&lt;A, B, C, D&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;, Func&lt;A, C&gt;, Func&lt;B, C&gt;, Func&lt;A, B, D&gt;)</a><a class="nav-link" href="#Map&lt;A, B>">Map&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Map&lt;A, B>">Map&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, R)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, R)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, R)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, R)</a><a class="nav-link" href="#Match&lt;A, R>">Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, R)</a><a class="nav-link" href="#Match&lt;A>">Match&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action&lt;A&gt;, Action)</a><a class="nav-link" href="#Match&lt;A>">Match&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action&lt;A&gt;, Action, Action&lt;Exception&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, B>">MatchObservable&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;B&gt;&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, B>">MatchObservable&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;B&gt;&gt;, Func&lt;IObservable&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, R>">MatchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, R>">MatchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, R>">MatchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#MatchObservable&lt;A, R>">MatchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)</a><a class="nav-link" href="#Memo&lt;A>">Memo&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#ParMap&lt;A, B, C, R>">ParMap&lt;A, B, C, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B, C, R&gt;)</a><a class="nav-link" href="#ParMap&lt;A, B, R>">ParMap&lt;A, B, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B, R&gt;)</a><a class="nav-link" href="#Product&lt;NUM, A>">Product&lt;NUM, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Select&lt;A, B>">Select&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;)</a><a class="nav-link" href="#Select&lt;A, B>">Select&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#SelectMany&lt;A, B, C>">SelectMany&lt;A, B, C&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, TryOptionAsync&lt;B&gt;&gt;, Func&lt;A, B, C&gt;)</a><a class="nav-link" href="#Some&lt;A, R>">Some&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;)</a><a class="nav-link" href="#Some&lt;A>">Some&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action&lt;A&gt;)</a><a class="nav-link" href="#Subtract&lt;NUM, A>">Subtract&lt;NUM, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#Sum">Sum(TryOptionAsync&lt;int&gt;)</a><a class="nav-link" href="#ToArray&lt;A>">ToArray&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#ToEither&lt;A>">ToEither&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#ToEitherUnsafe&lt;A>">ToEitherUnsafe&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#ToList&lt;A>">ToList&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#ToNullable&lt;A>">ToNullable&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#ToOption&lt;A>">ToOption&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#ToOptionUnsafe&lt;A>">ToOptionUnsafe&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#ToSeq&lt;A>">ToSeq&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#ToTry&lt;A>">ToTry&lt;A&gt;(TryOptionAsync&lt;A&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, S&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#TriFold&lt;A, S>">TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#TriMap&lt;A, B>">TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)</a><a class="nav-link" href="#Try&lt;T>">Try&lt;T&gt;(TryOptionAsync&lt;T&gt;)</a><a class="nav-link" href="#Use&lt;T, U>">Use&lt;T, U&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, U&gt;)</a><a class="nav-link" href="#Use&lt;T, U>">Use&lt;T, U&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, TryOptionAsync&lt;U&gt;&gt;)</a><a class="nav-link" href="#Where&lt;A>">Where&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, bool&gt;)</a><a class="nav-link" href="#Where&lt;A>">Where&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)</a></div><div class="content-panel"><h1 >TryOptionAsyncExtensions Class</h1><p ><span >Extension methods for the TryOptionAsync monad </span></p><div class="left"><div class="section"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="ident">TryOptionAsyncExtensions</span></div></div></div><div class="right"><div class="section"><div class="section_title">NAMESPACE</div></div></div><h2 >Methods</h2><div class="member-title"><a name="Action&lt;A, B>"></a>Action&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Action_A_B_TryOptionAsync_A_fa__TryOptionAsync_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Evaluate fa, then fb, ignoring the result of fa </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate first</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative to evaluate second and then return</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Action</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type Option&lt;B&gt;</span></div></div></div><div style="display:none" id="code-Action_A_B_TryOptionAsync_A_fa__TryOptionAsync_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOptionAsync&lt;A, B&gt;.Inst.Action(fa, fb)</div></div></div><div class="member-title"><a name="Add&lt;NUM, A>"></a>Add&lt;NUM, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Add_NUM_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Add the bound value of Try(x) to Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Add</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Add_NUM_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;A&gt;(async () =&gt;
    {
        var x = lhs.Try();
        var y = rhs.Try();
        await Task.WhenAll(x, y);
        if (x.IsFaulted || x.Result.IsFaulted) return x.Result;
        if (y.IsFaulted || y.Result.IsFaulted) return y.Result;
        return add&lt;NUM, A&gt;(x.Result.Value, y.Result.Value);
    })</div></div></div><div class="member-title"><a name="Append&lt;SEMI, A>"></a>Append&lt;SEMI, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Append_SEMI_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Append the bound value of TryOptionAsync(x) to TryOptionAsync(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Append</span>&lt;<span class="ident">SEMI</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs ++ rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">SEMI</span> : <span class="keyword">struct</span> <span class="ident">Semigroup</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Append_SEMI_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;A&gt;(async () =&gt;
    {
        var x = lhs.Try();
        var y = rhs.Try();
        await Task.WhenAll(x, y);
        if (x.IsFaulted || x.Result.IsFaulted) return x.Result;
        if (y.IsFaulted || y.Result.IsFaulted) return y.Result;
        return append&lt;SEMI, A&gt;(x.Result.Value, y.Result.Value);
    })</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(TryOptionAsync&lt;Func&lt;A, B, C&gt;&gt;, TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_TryOptionAsync_Func&lt;A, B, C>_fabc__TryOptionAsync_A_fa__TryOptionAsync_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">C</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_TryOptionAsync_Func&lt;A, B, C>_fabc__TryOptionAsync_A_fa__TryOptionAsync_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        fabc.Bind(f =&gt; ApplTryOptionAsync&lt;A, B, C&gt;.Inst.Apply(MTryOptionAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(f)), fa, fb))</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Func_A_B_C_fabc__TryOptionAsync_A_fa__TryOptionAsync_B_fb_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative a to apply</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fb</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Applicative b to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">C</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; fb)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"><span >Applicative of type FC derived from Applicative of C</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Func_A_B_C_fabc__TryOptionAsync_A_fa__TryOptionAsync_B_fb_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOptionAsync&lt;A, B, C&gt;.Inst.Apply(MTryOptionAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), fa, fb)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(TryOptionAsync&lt;Func&lt;A, B, C&gt;&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_TryOptionAsync_Func&lt;A, B, C>_fabc__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_TryOptionAsync_Func&lt;A, B, C>_fabc__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        fabc.Bind(f =&gt; ApplTryOptionAsync&lt;A, B, C&gt;.Inst.Apply(MTryOptionAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(f)), fa))</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Func_A_B_C_fabc__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Func_A_B_C_fabc__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOptionAsync&lt;A, B, C&gt;.Inst.Apply(MTryOptionAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;.Inst.Return(curry(fabc)), fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(TryOptionAsync&lt;Func&lt;A, Func&lt;B, C&gt;&gt;&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_TryOptionAsync_Func&lt;A, Func&lt;B, C>>_fabc__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_TryOptionAsync_Func&lt;A, Func&lt;B, C>>_fabc__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOptionAsync&lt;A, B, C&gt;.Inst.Apply(fabc, fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B, C>"></a>Apply&lt;A, B, C&gt;(Func&lt;A, Func&lt;B, C&gt;&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_C_Func_A_Func&lt;B, C>_fabc__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fabc</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt; fabc, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;&gt;</div><div class="normal"><span >Applicative of type f(b -&gt; c) derived from Applicative of Func&lt;B, C&gt;</span></div></div></div><div style="display:none" id="code-Apply_A_B_C_Func_A_Func&lt;B, C>_fabc__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOptionAsync&lt;A, B, C&gt;.Inst.Apply(TryOptionAsync(fabc), fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B>"></a>Apply&lt;A, B&gt;(TryOptionAsync&lt;Func&lt;A, B&gt;&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_TryOptionAsync_Func&lt;A, B>_fab__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;&gt; fab, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-Apply_A_B_TryOptionAsync_Func&lt;A, B>_fab__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOptionAsync&lt;A, B&gt;.Inst.Apply(fab, fa)</div></div></div><div class="member-title"><a name="Apply&lt;A, B>"></a>Apply&lt;A, B&gt;(Func&lt;A, B&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Apply_A_B_Func_A_B_fab__TryOptionAsync_A_fa_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">fab</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to apply the applicative to</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">fa</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Applicative to apply</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Apply</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; fab, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; fa)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Applicative of type FB derived from Applicative of B</span></div></div></div><div style="display:none" id="code-Apply_A_B_Func_A_B_fab__TryOptionAsync_A_fa_"><div class="section_title">SOURCE</div><div class="code">
        ApplTryOptionAsync&lt;A, B&gt;.Inst.Apply(TryOptionAsync(fab), fa)</div></div></div><div class="member-title"><a name="AsEnumerable&lt;A>"></a>AsEnumerable&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsEnumerable_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">AsEnumerable</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsEnumerable_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.ToSeq()</div></div></div><div class="member-title"><a name="AsString&lt;A>"></a>AsString&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-AsString_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">string</span>&gt; <span class="ident">AsString</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">string</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-AsString_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.Match(
            Some: v =&gt; isnull(v)
                      ? &quot;Some(null)&quot;
                      : $&quot;Some({v})&quot;,
            None: () =&gt; &quot;None&quot;,
            Fail: ex =&gt; $&quot;Fail({ex.Message})&quot;)</div></div></div><div class="member-title"><a name="BiBind&lt;A, R>"></a>BiBind&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, TryOptionAsync&lt;R&gt;&gt;, Func&lt;TryOptionAsync&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiBind_A_R_TryOptionAsync_A_self__Func_A_TryOptionAsync&lt;R>_Succ__Func_TryOptionAsync&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt; <span class="ident">BiBind</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiBind_A_R_TryOptionAsync_A_self__Func_A_TryOptionAsync&lt;R>_Succ__Func_TryOptionAsync&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;R&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaultedOrNone
            ? await Fail().Try()
            : await Succ(res.Value.Value).Try();
    })</div></div></div><div class="member-title"><a name="BiFilter&lt;A>"></a>BiFilter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFilter_A_TryOptionAsync_A_self__Func_A_bool_Succ__Func_bool_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">BiFilter</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiFilter_A_TryOptionAsync_A_self__Func_A_bool_Succ__Func_bool_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;A&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaultedOrNone
            ? Fail()
                ? res.Value
                : Option&lt;A&gt;.None
            : Succ(res.Value.Value)
                ? res.Value
                : Option&lt;A&gt;.None;
    })</div></div></div><div class="member-title"><a name="BiFilter&lt;A>"></a>BiFilter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;, Func&lt;bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFilter_A_TryOptionAsync_A_self__Func_A_Task&lt;bool>_Succ__Func_bool_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">BiFilter</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="keyword">bool</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiFilter_A_TryOptionAsync_A_self__Func_A_Task&lt;bool>_Succ__Func_bool_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;A&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaulted
            ? Fail()
                ? res.Value
                : Option&lt;A&gt;.None
            : await Succ(res.Value.Value)
                ? res.Value
                : Option&lt;A&gt;.None;
    })</div></div></div><div class="member-title"><a name="BiFilter&lt;A>"></a>BiFilter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, bool&gt;, Func&lt;Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFilter_A_TryOptionAsync_A_self__Func_A_bool_Succ__Func_Task&lt;bool>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">BiFilter</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiFilter_A_TryOptionAsync_A_self__Func_A_bool_Succ__Func_Task&lt;bool>_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;A&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaulted
            ? await Fail()
                ? res.Value
                : Option&lt;A&gt;.None
            : Succ(res.Value.Value)
                ? res.Value
                : Option&lt;A&gt;.None;
    })</div></div></div><div class="member-title"><a name="BiFilter&lt;A>"></a>BiFilter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;, Func&lt;Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFilter_A_TryOptionAsync_A_self__Func_A_Task&lt;bool>_Succ__Func_Task&lt;bool>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">BiFilter</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-BiFilter_A_TryOptionAsync_A_self__Func_A_Task&lt;bool>_Succ__Func_Task&lt;bool>_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;A&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaulted
            ? await Fail()
                ? res.Value
                : Option&lt;A&gt;.None
            : await Succ(res.Value.Value)
                ? res.Value
                : Option&lt;A&gt;.None;
    })</div></div></div><div class="member-title"><a name="BiFold&lt;A, S>"></a>BiFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_Succ__Func_S_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds computation value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_Succ__Func_S_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        BiMap(self,
            Succ: v  =&gt; Succ(state, v),
            Fail: () =&gt; Fail(state)).IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="BiFold&lt;A, S>"></a>BiFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_Succ__Func_S_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds computation value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_Succ__Func_S_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        BiMap(self,
            Succ: v  =&gt; Succ(state, v),
            Fail: () =&gt; Fail(state)).IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="BiFold&lt;A, S>"></a>BiFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_Task&lt;S>_Succ__Func_S_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds computation value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_Task&lt;S>_Succ__Func_S_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        BiMap(self,
            Succ: v  =&gt; Succ(state, v),
            Fail: () =&gt; Fail(state)).IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="BiFold&lt;A, S>"></a>BiFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_Task&lt;S>_Succ__Func_S_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds computation value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">BiFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-BiFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_Task&lt;S>_Succ__Func_S_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        BiMap(self,
            Succ: v  =&gt; Succ(state, v),
            Fail: () =&gt; Fail(state))
           .IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="BiMap&lt;A, B>"></a>BiMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMap_A_B_TryOptionAsync_A_self__Func_A_B_Succ__Func_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-BiMap_A_B_TryOptionAsync_A_self__Func_A_B_Succ__Func_B_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;B&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaultedOrNone
            ? Fail()
            : Succ(res.Value.Value);
    })</div></div></div><div class="member-title"><a name="BiMap&lt;A, B>"></a>BiMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMap_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_Succ__Func_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-BiMap_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_Succ__Func_B_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;B&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaultedOrNone
            ? Fail()
            : await Succ(res.Value.Value);
    })</div></div></div><div class="member-title"><a name="BiMap&lt;A, B>"></a>BiMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMap_A_B_TryOptionAsync_A_self__Func_A_B_Succ__Func_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-BiMap_A_B_TryOptionAsync_A_self__Func_A_B_Succ__Func_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;B&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaultedOrNone
            ? await Fail()
            : Succ(res.Value.Value);
    })</div></div></div><div class="member-title"><a name="BiMap&lt;A, B>"></a>BiMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-BiMap_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_Succ__Func_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">BiMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-BiMap_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_Succ__Func_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;B&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaultedOrNone
            ? await Fail()
            : await Succ(res.Value.Value);
    })</div></div></div><div class="member-title"><a name="Bind&lt;A, B>"></a>Bind&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, TryOptionAsync&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Bind_A_B_TryOptionAsync_A_self__Func_A_TryOptionAsync&lt;B>_binder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">binder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Bind</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;&gt; binder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Bind_A_B_TryOptionAsync_A_self__Func_A_TryOptionAsync&lt;B>_binder_"><div class="section_title">SOURCE</div><div class="code">
        MTryOptionAsync&lt;A&gt;.Inst.Bind&lt;MTryOptionAsync&lt;B&gt;, TryOptionAsync&lt;B&gt;, B&gt;(self, binder)</div></div></div><div class="member-title"><a name="Compare&lt;ORD, A>"></a>Compare&lt;ORD, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Compare_ORD_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Compare the bound value of Try(x) to Try(y).  If either of the </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">Compare</span>&lt;<span class="ident">ORD</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"><span >1 if lhs &gt; rhs, 0 if lhs == rhs, -1 if lhs &lt; rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">ORD</span> : <span class="keyword">struct</span> <span class="ident">Ord</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Compare_ORD_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_"><div class="section_title">SOURCE</div><div class="code">
        var x = lhs.Try();
        var y = rhs.Try();
        await Task.WhenAll(x, y);

        if (x.IsFaulted &amp;&amp; y.IsFaulted) return 0;
        if (x.IsFaulted &amp;&amp; !y.IsFaulted) return -1;
        if (!x.IsFaulted &amp;&amp; y.IsFaulted) return 1;
        if (x.Result.IsFaulted &amp;&amp; y.Result.IsFaulted) return 0;
        if (x.Result.IsFaulted &amp;&amp; !y.Result.IsFaulted) return -1;
        if (!x.Result.IsFaulted &amp;&amp; y.Result.IsFaulted) return 1;
        return compare&lt;ORD, A&gt;(x.Result.Value, y.Result.Value);
    </div></div></div><div class="member-title"><a name="Count&lt;A>"></a>Count&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Count_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Counts the number of bound values.   </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">Count</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"><span >1 if the computation is successful, 0 otherwise.</span></div></div></div><div style="display:none" id="code-Count_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        Map(self, _ =&gt; 1).IfNoneOrFail(0)</div></div></div><div class="member-title"><a name="Divide&lt;NUM, A>"></a>Divide&lt;NUM, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Divide_NUM_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Multiply the bound value of Try(x) and Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Divide</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Divide_NUM_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;A&gt;(async () =&gt;
    {
        var x = lhs.Try();
        var y = rhs.Try();
        await Task.WhenAll(x, y);
        if (x.IsFaulted || x.Result.IsFaulted) return x.Result;
        if (y.IsFaulted || y.Result.IsFaulted) return y.Result;
        return divide&lt;NUM, A&gt;(x.Result.Value, y.Result.Value);
    })</div></div></div><div class="member-title"><a name="Exists&lt;A>"></a>Exists&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists_A_TryOptionAsync_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for any value of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">Exists</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value.  False otherwise.</span></div></div></div><div style="display:none" id="code-Exists_A_TryOptionAsync_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.Map(pred).IfNoneOrFail(false)</div></div></div><div class="member-title"><a name="Exists&lt;A>"></a>Exists&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Exists_A_TryOptionAsync_A_self__Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for any value of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">Exists</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value.  False otherwise.</span></div></div></div><div style="display:none" id="code-Exists_A_TryOptionAsync_A_self__Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.Map(pred).IfNoneOrFail(false)</div></div></div><div class="member-title"><a name="Filter&lt;A>"></a>Filter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter_A_TryOptionAsync_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Filter_A_TryOptionAsync_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;A&gt;(async () =&gt;
    {
        var res = await self.Try();
        if (res.IsFaultedOrNone) return res;
        return pred(res.Value.Value)
            ? res
            : Option&lt;A&gt;.None;
    })</div></div></div><div class="member-title"><a name="Filter&lt;A>"></a>Filter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Filter_A_TryOptionAsync_A_self__Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Filter</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Filter_A_TryOptionAsync_A_self__Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;A&gt;(async () =&gt;
    {
        var res = await self.Try();
        if (res.IsFaultedOrNone) return res;
        return await pred(res.Value.Value)
            ? res
            : Option&lt;A&gt;.None;
    })</div></div></div><div class="member-title"><a name="Flatten&lt;T>"></a>Flatten&lt;T&gt;(TryOptionAsync&lt;TryOptionAsync&lt;T&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Flatten_T_TryOptionAsync_TryOptionAsync&lt;T>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Flatten_T_TryOptionAsync_TryOptionAsync&lt;T>_self_"><div class="section_title">SOURCE</div><div class="code">
        from x in self
        from y in x
        select y</div></div></div><div class="member-title"><a name="Flatten&lt;T>"></a>Flatten&lt;T&gt;(TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;T&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Flatten_T_TryOptionAsync_TryOptionAsync&lt;TryOptionAsync&lt;T>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Flatten_T_TryOptionAsync_TryOptionAsync&lt;TryOptionAsync&lt;T>>_self_"><div class="section_title">SOURCE</div><div class="code">
        from x in self
        from y in x
        from z in y
        select z</div></div></div><div class="member-title"><a name="Flatten&lt;T>"></a>Flatten&lt;T&gt;(TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;T&gt;&gt;&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Flatten_T_TryOptionAsync_TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;T>>>_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; <span class="ident">Flatten</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;&gt;&gt;&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Flatten_T_TryOptionAsync_TryOptionAsync&lt;TryOptionAsync&lt;TryOptionAsync&lt;T>>>_self_"><div class="section_title">SOURCE</div><div class="code">
        from w in self
        from x in w
        from y in x
        from z in y
        select z</div></div></div><div class="member-title"><a name="Fold&lt;A, S>"></a>Fold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds computation value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">Fold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-Fold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_folder_"><div class="section_title">SOURCE</div><div class="code">
        Map(self, v =&gt; folder(state, v)).IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="Fold&lt;A, S>"></a>Fold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Fold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_Task&lt;S>_folder_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds computation value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">folder</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">Fold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; folder)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-Fold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_Task&lt;S>_folder_"><div class="section_title">SOURCE</div><div class="code">
        Map(self, v =&gt; folder(state, v)).IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="ForAll&lt;A>"></a>ForAll&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll_A_TryOptionAsync_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for all values of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ForAll</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value, or if the computation fails.  False otherwise.</span></div></div></div><div style="display:none" id="code-ForAll_A_TryOptionAsync_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        Map(self, pred).IfNoneOrFail(true)</div></div></div><div class="member-title"><a name="ForAll&lt;A>"></a>ForAll&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ForAll_A_TryOptionAsync_A_self__Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Tests that a predicate holds for all values of the bound value T </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div><div class="arg-desc"><span >Predicate to test the bound value against</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt; <span class="ident">ForAll</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;</div><div class="normal"><span >True if the predicate holds for the bound value, or if the computation fails.  False otherwise.</span></div></div></div><div style="display:none" id="code-ForAll_A_TryOptionAsync_A_self__Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
        Map(self, pred).IfNoneOrFail(true)</div></div></div><div class="member-title"><a name="IfFail&lt;A>"></a>IfFail&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfFail_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Provides a fluent exception matching interface which is invoked when the computation fails. </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">ExceptionMatchOptionalAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">ExceptionMatchOptionalAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >Fluent exception matcher</span></div></div></div><div style="display:none" id="code-IfFail_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        new ExceptionMatchOptionalAsync&lt;A&gt;(self.Try())</div></div></div><div class="member-title"><a name="IfFailThrow&lt;A>"></a>IfFailThrow&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfFailThrow_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfFailThrow</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfFailThrow_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        try
        {
            var res = await self.Try();
            if (res.IsFaultedOrNone) throw new InnerException(res.Exception ?? new BottomException());
            return res.Value.Value;
        }
        catch (Exception e)
        {
            TryConfig.ErrorLogger(e);
            throw;
        }
    </div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, A)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_TryOptionAsync_A_self__A__defaultValue_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Return a default value if the computation fails or completes successfully  but returns None </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">defaultValue</div><div class="arg-type"><span class="ident">A</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">A</span> defaultValue)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_TryOptionAsync_A_self__A__defaultValue_"><div class="section_title">SOURCE</div><div class="code">
        self.IfNoneOrFail(() =&gt; defaultValue)</div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_TryOptionAsync_A_self__Action__None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the computation fails or completes successfully but returns None </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span> None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_TryOptionAsync_A_self__Action__None_"><div class="section_title">SOURCE</div><div class="code">
        await self.IfNoneOrFail(() =&gt; { None(); return default(A); } );
        return unit;
    </div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_TryOptionAsync_A_self__Func_A_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the computation fails or completes successfully but returns None </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_TryOptionAsync_A_self__Func_A_None_"><div class="section_title">SOURCE</div><div class="code">
        self.IfNoneOrFail(None, _ =&gt; None())</div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;Task&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_TryOptionAsync_A_self__Func_Task&lt;A>_None_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the computation fails or completes successfully but returns None </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; None)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_TryOptionAsync_A_self__Func_Task&lt;A>_None_"><div class="section_title">SOURCE</div><div class="code">
        Task&lt;A&gt; fail(Exception _) =&gt; None();
        return self.IfNoneOrFail(None, fail);
    </div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A&gt;, Func&lt;Exception, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_TryOptionAsync_A_self__Func_A_None__Func_Exception_A_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the computation fails or completes successfully but returns None </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_TryOptionAsync_A_self__Func_A_None__Func_Exception_A_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(self)) throw new ArgumentNullException(&quot;this&quot;);
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        try
        {
            var res = await self.Try();
            return res.IsFaulted 
                ? Fail(res.Exception)
                : res.Value.IsNone
                    ? None()
                    : res.Value.Value;
        }
        catch (Exception e)
        {
            TryConfig.ErrorLogger(e);
            return None();
        }
    </div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;Task&lt;A&gt;&gt;, Func&lt;Exception, A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_TryOptionAsync_A_self__Func_Task&lt;A>_None__Func_Exception_A_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the computation fails or completes successfully but returns None </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">A</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_TryOptionAsync_A_self__Func_Task&lt;A>_None__Func_Exception_A_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(self)) throw new ArgumentNullException(&quot;this&quot;);
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        try
        {
            var res = await self.Try();
            return res.IsFaulted
                ? Fail(res.Exception)
                : res.Value.IsNone
                    ? await None()
                    : res.Value.Value;
        }
        catch (Exception e)
        {
            TryConfig.ErrorLogger(e);
            return await None();
        }
    </div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A&gt;, Func&lt;Exception, Task&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_TryOptionAsync_A_self__Func_A_None__Func_Exception_Task&lt;A>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the computation fails or completes successfully but returns None </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_TryOptionAsync_A_self__Func_A_None__Func_Exception_Task&lt;A>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(self)) throw new ArgumentNullException(&quot;this&quot;);
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        try
        {
            var res = await self.Try();
            return res.IsFaulted
                ? await Fail(res.Exception)
                : res.Value.IsNone
                    ? None()
                    : res.Value.Value;
        }
        catch (Exception e)
        {
            TryConfig.ErrorLogger(e);
            return None();
        }
    </div></div></div><div class="member-title"><a name="IfNoneOrFail&lt;A>"></a>IfNoneOrFail&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;Task&lt;A&gt;&gt;, Func&lt;Exception, Task&lt;A&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfNoneOrFail_A_TryOptionAsync_A_self__Func_Task&lt;A>_None__Func_Exception_Task&lt;A>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the computation fails or completes successfully but returns None </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt; <span class="ident">IfNoneOrFail</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfNoneOrFail_A_TryOptionAsync_A_self__Func_Task&lt;A>_None__Func_Exception_Task&lt;A>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(self)) throw new ArgumentNullException(&quot;this&quot;);
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        try
        {
            var res = await self.Try();
            return res.IsFaulted
                ? await Fail(res.Exception)
                : res.Value.IsNone
                    ? await None()
                    : res.Value.Value;
        }
        catch (Exception e)
        {
            TryConfig.ErrorLogger(e);
            return await None();
        }
    </div></div></div><div class="member-title"><a name="IfSome&lt;A>"></a>IfSome&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-IfSome_A_TryOptionAsync_A_self__Action_A_Some_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Invoke a delegate if the computation returns a value successfully </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if successful</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">IfSome</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-IfSome_A_TryOptionAsync_A_self__Action_A_Some_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(self)) throw new ArgumentNullException(&quot;this&quot;);
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));

        try
        {
            var res = await self.Try();
            if (!res.IsFaulted)
            {
                Some(res.Value.Value);
            }
            return unit;
        }
        catch (Exception e)
        {
            TryConfig.ErrorLogger(e);
            return unit;
        }
    </div></div></div><div class="member-title"><a name="Iter&lt;A>"></a>Iter&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Iter_A_TryOptionAsync_A_self__Action_A_action_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Apply computation values to a computation function of arity 2 </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation function</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">action</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">Iter</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; action)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"><span >Returns the result of applying the computation arguments to the computation function</span></div></div></div><div style="display:none" id="code-Iter_A_TryOptionAsync_A_self__Action_A_action_"><div class="section_title">SOURCE</div><div class="code">
        IfSome(self, action)</div></div></div><div class="member-title"><a name="Join&lt;A, B, C, D>"></a>Join&lt;A, B, C, D&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;B&gt;, Func&lt;A, C&gt;, Func&lt;B, C&gt;, Func&lt;A, B, D&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Join_A_B_C_D_TryOptionAsync_A_self__TryOptionAsync_B_inner__Func_A_C_outerKeyMap__Func_B_C_innerKeyMap__Func_A_B_D_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">inner</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">outerKeyMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">innerKeyMap</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">D</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">D</span>&gt; <span class="ident">Join</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">D</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; inner, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">C</span>&gt; outerKeyMap, <span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">C</span>&gt; innerKeyMap, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">D</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">D</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Join_A_B_C_D_TryOptionAsync_A_self__TryOptionAsync_B_inner__Func_A_C_outerKeyMap__Func_B_C_innerKeyMap__Func_A_B_D_project_"><div class="section_title">SOURCE</div><div class="code">
            Memo&lt;D&gt;(async () =&gt;
            {
                var selfTask = self.Try();
                var innerTask = inner.Try();
                await Task.WhenAll(selfTask, innerTask);

                if (selfTask.IsFaulted) return new OptionalResult&lt;D&gt;(selfTask.Exception);
                if (selfTask.Result.IsFaultedOrNone) return new OptionalResult&lt;D&gt;(selfTask.Result.Exception);
                if (innerTask.IsFaulted) return new OptionalResult&lt;D&gt;(innerTask.Exception);
                if (innerTask.Result.IsFaultedOrNone) return new OptionalResult&lt;D&gt;(innerTask.Result.Exception);
                return EqualityComparer&lt;C&gt;.Default.Equals(outerKeyMap(selfTask.Result.Value.Value), innerKeyMap(innerTask.Result.Value.Value))
                    ? project(selfTask.Result.Value.Value, innerTask.Result.Value.Value)
                    : throw new BottomException();
            })</div></div></div><div class="member-title"><a name="Map&lt;A, B>"></a>Map&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_A_B_TryOptionAsync_A_self__Func_A_B_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-Map_A_B_TryOptionAsync_A_self__Func_A_B_f_"><div class="section_title">SOURCE</div><div class="code">
        Memo(async () =&gt; (await self.Try()).Map(f))</div></div></div><div class="member-title"><a name="Map&lt;A, B>"></a>Map&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Map_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_f_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">f</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Map</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; f)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-Map_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_f_"><div class="section_title">SOURCE</div><div class="code">
        Memo(async () =&gt; await (await self.Try()).MapAsync(f))</div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Succ__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Value to use if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Succ__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.Match(Succ, () =&gt; Fail)</div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Succ__Func_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Succ__Func_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Succ)) throw new ArgumentNullException(nameof(Succ));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaultedOrNone
            ? Fail()
            : Succ(res.Value.Value);
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Succ__Func_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Succ__Func_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Succ)) throw new ArgumentNullException(nameof(Succ));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaultedOrNone
            ? await Fail()
            : Succ(res.Value.Value);
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Succ__Func_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Succ, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Succ__Func_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Succ)) throw new ArgumentNullException(nameof(Succ));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaultedOrNone
            ? await Fail()
            : await Succ(res.Value.Value);
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.Match(Some, None);
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : await None();
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? await Some(res.Value.Value)
                : None();
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_R_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">R</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_R_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? await Some(res.Value.Value)
                : await None();
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaulted
            ? await Fail(res.Exception)
            : res.Value.Match(Some, None);
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaulted
            ? await Fail(res.Exception)
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : await None();
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_R_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaulted
            ? await Fail(res.Exception)
            : res.Value.IsSome
                ? await Some(res.Value.Value)
                : None();
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, Func&lt;Exception, Task&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__Func_Exception_Task&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaulted
            ? await Fail(res.Exception)
            : res.Value.IsSome
                ? await Some(res.Value.Value)
                : await None();
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaulted
            ? Fail
            : res.Value.Match(Some, None);
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;Task&lt;R&gt;&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_Task&lt;R>_None__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_Task&lt;R>_None__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaulted
            ? Fail
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : await None();
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;R&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_R_None__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_R_None__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaulted
            ? Fail
            : res.Value.IsSome
                ? await Some(res.Value.Value)
                : None();
    </div></div></div><div class="member-title"><a name="Match&lt;A, R>"></a>Match&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;R&gt;&gt;, Func&lt;Task&lt;R&gt;&gt;, R)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__R__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">R</span></div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">R</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_R_TryOptionAsync_A_self__Func_A_Task&lt;R>_Some__Func_Task&lt;R>_None__R__Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();
        return res.IsFaulted
            ? Fail
            : res.Value.IsSome
                ? await Some(res.Value.Value)
                : await None();
    </div></div></div><div class="member-title"><a name="Match&lt;A>"></a>Match&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action&lt;A&gt;, Action)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_TryOptionAsync_A_self__Action_A_Succ__Action__Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Succ</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Succ, <span class="ident">Action</span> Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_TryOptionAsync_A_self__Action_A_Succ__Action__Fail_"><div class="section_title">SOURCE</div><div class="code">
        await Match(self, a =&gt; { Succ(a); return unit; }, () =&gt; { Fail(); return unit; })</div></div></div><div class="member-title"><a name="Match&lt;A>"></a>Match&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action&lt;A&gt;, Action, Action&lt;Exception&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Match_A_TryOptionAsync_A_self__Action_A_Some__Action__None__Action_Exception_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Pattern matches the three possible states of the computation </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Action</span></div></div><div class="arg-desc"><span >Delegate to invoke if the computation completes successfully but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt;</div></div><div class="arg-desc"><span >Delegate to invoke if the computation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt; <span class="ident">Match</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; Some, <span class="ident">Action</span> None, <span class="ident">Action</span>&lt;<span class="ident">Exception</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Unit</span>&gt;</div><div class="normal"><span >The result of either the Succ, None, or Fail delegate</span></div></div></div><div style="display:none" id="code-Match_A_TryOptionAsync_A_self__Action_A_Some__Action__None__Action_Exception_Fail_"><div class="section_title">SOURCE</div><div class="code">
        if (isnull(Some)) throw new ArgumentNullException(nameof(Some));
        if (isnull(None)) throw new ArgumentNullException(nameof(None));
        if (isnull(Fail)) throw new ArgumentNullException(nameof(Fail));

        var res = await self.Try();

        if (res.IsFaulted)
            Fail(res.Exception);
        else
            res.Value.Match(Some, None);

        return unit;
    </div></div></div><div class="member-title"><a name="MatchObservable&lt;A, B>"></a>MatchObservable&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;B&gt;&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_B_TryOptionAsync_A_self__Func_A_IObservable&lt;B>_Some__Func_B_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turns the computation into an observable stream </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >An observable that represents the result of Succ or Fail</span></div></div></div><div style="display:none" id="code-MatchObservable_A_B_TryOptionAsync_A_self__Func_A_IObservable&lt;B>_Some__Func_B_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.Try().ToObservable().SelectMany(
            a =&gt; a.IsFaulted
                ? Observable.Return(Fail(a.Exception))
                : a.Value.IsSome
                    ? Some(a.Value.Value)
                    : Observable.Return(None()))</div></div></div><div class="member-title"><a name="MatchObservable&lt;A, B>"></a>MatchObservable&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;B&gt;&gt;, Func&lt;IObservable&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_B_TryOptionAsync_A_self__Func_A_IObservable&lt;B>_Some__Func_IObservable&lt;B>_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turns the computation into an observable stream </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >An observable that represents the result of Succ or Fail</span></div></div></div><div style="display:none" id="code-MatchObservable_A_B_TryOptionAsync_A_self__Func_A_IObservable&lt;B>_Some__Func_IObservable&lt;B>_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.Try().ToObservable().SelectMany(
            a =&gt; a.IsFaulted
                ? Observable.Return(Fail(a.Exception))
                : a.Value.IsSome
                    ? Some(a.Value.Value)
                    : None())</div></div></div><div class="member-title"><a name="MatchObservable&lt;A, R>"></a>MatchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_R_TryOptionAsync_A_self__Func_A_IObservable&lt;R>_Some__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turns the computation into an observable stream </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An observable that represents the result of Succ or Fail</span></div></div></div><div style="display:none" id="code-MatchObservable_A_R_TryOptionAsync_A_self__Func_A_IObservable&lt;R>_Some__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.Try().ToObservable().SelectMany(
            a =&gt; a.IsFaulted
                ? Fail(a.Exception)
                : a.Value.IsSome
                    ? Some(a.Value.Value)
                    : Observable.Return(None()))</div></div></div><div class="member-title"><a name="MatchObservable&lt;A, R>"></a>MatchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, IObservable&lt;R&gt;&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_R_TryOptionAsync_A_self__Func_A_IObservable&lt;R>_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turns the computation into an observable stream </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An observable that represents the result of Succ or Fail</span></div></div></div><div style="display:none" id="code-MatchObservable_A_R_TryOptionAsync_A_self__Func_A_IObservable&lt;R>_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.Try().ToObservable().SelectMany(
            a =&gt; a.IsFaulted
                ? Fail(a.Exception)
                : a.Value.IsSome
                    ? Some(a.Value.Value)
                    : None())</div></div></div><div class="member-title"><a name="MatchObservable&lt;A, R>"></a>MatchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;R&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turns the computation into an observable stream </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">R</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An observable that represents the result of Succ or Fail</span></div></div></div><div style="display:none" id="code-MatchObservable_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_R_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.Try().ToObservable().SelectMany(
            a =&gt; a.IsFaulted
                ? Fail(a.Exception)
                : a.Value.IsSome
                    ? Observable.Return(Some(a.Value.Value))
                    : Observable.Return(None()))</div></div></div><div class="member-title"><a name="MatchObservable&lt;A, R>"></a>MatchObservable&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;, Func&lt;IObservable&lt;R&gt;&gt;, Func&lt;Exception, IObservable&lt;R&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-MatchObservable_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Turns the computation into an observable stream </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >This</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation succeeds but returns no value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt;</div></div><div class="arg-desc"><span >Function to call when the operation fails</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt; <span class="ident">MatchObservable</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">IObservable</span>&lt;<span class="ident">R</span>&gt;</div><div class="normal"><span >An observable that represents the result of Succ or Fail</span></div></div></div><div style="display:none" id="code-MatchObservable_A_R_TryOptionAsync_A_self__Func_A_R_Some__Func_IObservable&lt;R>_None__Func_Exception_IObservable&lt;R>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        self.Try().ToObservable().SelectMany(
            a =&gt; a.IsFaulted
                ? Fail(a.Exception)
                : a.Value.IsSome
                    ? Observable.Return(Some(a.Value.Value))
                    : None())</div></div></div><div class="member-title"><a name="Memo&lt;A>"></a>Memo&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Memo_A_TryOptionAsync_A_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Memoize the computation so that it&#39;s only run once </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Memo</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Memo_A_TryOptionAsync_A_ma_"><div class="section_title">SOURCE</div><div class="code">
        bool run = false;
        OptionalResult&lt;A&gt; result = new OptionalResult&lt;A&gt;();
        return new TryOptionAsync&lt;A&gt;(async () =&gt;
        {
            if (run) return result;
            result = await ma.Try();
            run = true;
            return result;
        });
    </div></div></div><div class="member-title"><a name="ParMap&lt;A, B, C, R>"></a>ParMap&lt;A, B, C, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B, C, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_A_B_C_R_TryOptionAsync_A_self__Func_A_B_C_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R</span>&gt;&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">Func</span>&lt;<span class="ident">C</span>, <span class="ident">R</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_A_B_C_R_TryOptionAsync_A_self__Func_A_B_C_R_func_"><div class="section_title">SOURCE</div><div class="code">
        self.Map(curry(func))</div></div></div><div class="member-title"><a name="ParMap&lt;A, B, R>"></a>ParMap&lt;A, B, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ParMap_A_B_R_TryOptionAsync_A_self__Func_A_B_R_func_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Partial application map </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">func</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;</div></div></div><div class="section_title">REMARKS</div><span >TODO: Better documentation of this function</span></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R</span>&gt;&gt; <span class="ident">ParMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">R</span>&gt; func)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">Func</span>&lt;<span class="ident">B</span>, <span class="ident">R</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ParMap_A_B_R_TryOptionAsync_A_self__Func_A_B_R_func_"><div class="section_title">SOURCE</div><div class="code">
        self.Map(curry(func))</div></div></div><div class="member-title"><a name="Product&lt;NUM, A>"></a>Product&lt;NUM, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Product_NUM_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Multiply the bound value of Try(x) and Try(y).  If either of the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Product</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Product_NUM_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;A&gt;(async () =&gt;
    {
        var x = lhs.Try();
        var y = rhs.Try();
        await Task.WhenAll(x, y);
        if (x.IsFaulted || x.Result.IsFaulted) return x.Result;
        if (y.IsFaulted || y.Result.IsFaulted) return y.Result;
        return product&lt;NUM, A&gt;(x.Result.Value, y.Result.Value);
    })</div></div></div><div class="member-title"><a name="Select&lt;A, B>"></a>Select&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_A_B_TryOptionAsync_A_self__Func_A_B_select_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">select</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; select)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-Select_A_B_TryOptionAsync_A_self__Func_A_B_select_"><div class="section_title">SOURCE</div><div class="code">
        Map(self, select)</div></div></div><div class="member-title"><a name="Select&lt;A, B>"></a>Select&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Select_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_select_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">select</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">Select</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; select)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-Select_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_select_"><div class="section_title">SOURCE</div><div class="code">
        Map(self, select)</div></div></div><div class="member-title"><a name="SelectMany&lt;A, B, C>"></a>SelectMany&lt;A, B, C&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, TryOptionAsync&lt;B&gt;&gt;, Func&lt;A, B, C&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-SelectMany_A_B_C_TryOptionAsync_A_self__Func_A_TryOptionAsync&lt;B>_bind__Func_A_B_C_project_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">bind</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">project</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">C</span>&gt; <span class="ident">SelectMany</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;&gt; bind, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>, <span class="ident">C</span>&gt; project)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">C</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-SelectMany_A_B_C_TryOptionAsync_A_self__Func_A_TryOptionAsync&lt;B>_bind__Func_A_B_C_project_"><div class="section_title">SOURCE</div><div class="code">
            MTryOptionAsync&lt;A&gt;.Inst.Bind&lt;MTryOptionAsync&lt;C&gt;, TryOptionAsync&lt;C&gt;, C&gt;(self, a =&gt;
            MTryOptionAsync&lt;B&gt;.Inst.Bind&lt;MTryOptionAsync&lt;C&gt;, TryOptionAsync&lt;C&gt;, C&gt;(bind(a), b =&gt;
            MTryOptionAsync&lt;C&gt;.Inst.Return(project(a, b))))</div></div></div><div class="member-title"><a name="Some&lt;A, R>"></a>Some&lt;A, R&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, R&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some_A_R_TryOptionAsync_A_self__Func_A_R_succHandler_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">succHandler</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsyncSuccContext</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; <span class="ident">Some</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt; succHandler)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsyncSuccContext</span>&lt;<span class="ident">A</span>, <span class="ident">R</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Some_A_R_TryOptionAsync_A_self__Func_A_R_succHandler_"><div class="section_title">SOURCE</div><div class="code">
        new TryOptionAsyncSuccContext&lt;A, R&gt;(self, succHandler, () =&gt; default(R))</div></div></div><div class="member-title"><a name="Some&lt;A>"></a>Some&lt;A&gt;(TryOptionAsync&lt;A&gt;, Action&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Some_A_TryOptionAsync_A_self__Action_A_succHandler_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">succHandler</div><div class="arg-type"><span class="ident">Action</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsyncSuccContext</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Some</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Action</span>&lt;<span class="ident">A</span>&gt; succHandler)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsyncSuccContext</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Some_A_TryOptionAsync_A_self__Action_A_succHandler_"><div class="section_title">SOURCE</div><div class="code">
        new TryOptionAsyncSuccContext&lt;A&gt;(self, succHandler, () =&gt; { })</div></div></div><div class="member-title"><a name="Subtract&lt;NUM, A>"></a>Subtract&lt;NUM, A&gt;(TryOptionAsync&lt;A&gt;, TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Subtract_NUM_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Find the subtract of the bound value of Try(x) and Try(y).  If either of  the Trys are Fail then the result is Fail </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">lhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Left-hand side of the operation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">rhs</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Right-hand side of the operation</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Subtract</span>&lt;<span class="ident">NUM</span>, <span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; lhs, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; rhs)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"><span >lhs + rhs</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">NUM</span> : <span class="keyword">struct</span> <span class="ident">Num</span>&lt;<span class="ident">A</span>&gt;</div></div><div style="display:none" id="code-Subtract_NUM_A_TryOptionAsync_A_lhs__TryOptionAsync_A_rhs_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;A&gt;(async () =&gt;
    {
        var x = lhs.Try();
        var y = rhs.Try();
        await Task.WhenAll(x, y);
        if (x.IsFaulted || x.Result.IsFaulted) return x.Result;
        if (y.IsFaulted || y.Result.IsFaulted) return y.Result;
        return subtract&lt;NUM, A&gt;(x.Result.Value, y.Result.Value);
    })</div></div></div><div class="member-title"><a name="Sum"></a>Sum(TryOptionAsync&lt;int&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Sum__TryOptionAsync_int_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="keyword">int</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt; <span class="ident">Sum</span>(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="keyword">int</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="keyword">int</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Sum__TryOptionAsync_int_self_"><div class="section_title">SOURCE</div><div class="code">
        from x in self.Try()
        select x.IfFail(0)</div></div></div><div class="member-title"><a name="ToArray&lt;A>"></a>ToArray&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToArray_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToArray</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Arr</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToArray_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        toArray(await self.AsEnumerable())</div></div></div><div class="member-title"><a name="ToEither&lt;A>"></a>ToEither&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEither_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;&gt; <span class="ident">ToEither</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Either</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToEither_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.Match(
            Some: v  =&gt; Either&lt;Exception,Option&lt;A&gt;&gt;.Right(v),
            None: () =&gt; Either&lt;Exception,Option&lt;A&gt;&gt;.Right(None),
            Fail: ex =&gt; Either&lt;Exception, Option&lt;A&gt;&gt;.Left(ex))</div></div></div><div class="member-title"><a name="ToEitherUnsafe&lt;A>"></a>ToEitherUnsafe&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToEitherUnsafe_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;&gt; <span class="ident">ToEitherUnsafe</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">EitherUnsafe</span>&lt;<span class="ident">Exception</span>, <span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToEitherUnsafe_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.Match(
            Some: v  =&gt; EitherUnsafe&lt;Exception,Option&lt;A&gt;&gt;.Right(v),
            None: () =&gt; EitherUnsafe&lt;Exception,Option&lt;A&gt;&gt;.Right(None),
            Fail: ex =&gt; EitherUnsafe&lt;Exception, Option&lt;A&gt;&gt;.Left(ex))</div></div></div><div class="member-title"><a name="ToList&lt;A>"></a>ToList&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToList_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToList</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Lst</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToList_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        toList(await self.AsEnumerable())</div></div></div><div class="member-title"><a name="ToNullable&lt;A>"></a>ToNullable&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToNullable_A_TryOptionAsync_A_ma_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Convert the computation type to a Nullable of A </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">ma</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation to convert</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">A</span>?&gt; <span class="ident">ToNullable</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; ma)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">A</span>?&gt;</div><div class="normal"><span >Nullable of A</span></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">A</span> : <span class="keyword">struct</span></div></div><div style="display:none" id="code-ToNullable_A_TryOptionAsync_A_ma_"><div class="section_title">SOURCE</div><div class="code">
        var x = await ma.Try();
        return x.IsFaultedOrNone
            ? (A?)null
            : x.Value.Value;
    </div></div></div><div class="member-title"><a name="ToOption&lt;A>"></a>ToOption&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToOption_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToOption</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Option</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToOption_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.Match(
            Some: v  =&gt; Option&lt;A&gt;.Some(v),
            None: () =&gt; Option&lt;A&gt;.None,
            Fail: _  =&gt; Option&lt;A&gt;.None)</div></div></div><div class="member-title"><a name="ToOptionUnsafe&lt;A>"></a>ToOptionUnsafe&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToOptionUnsafe_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToOptionUnsafe</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionUnsafe</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToOptionUnsafe_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.Match(
            Some: v =&gt; OptionUnsafe&lt;A&gt;.Some(v),
            None: () =&gt; OptionUnsafe&lt;A&gt;.None,
            Fail: _ =&gt; OptionUnsafe&lt;A&gt;.None)</div></div></div><div class="member-title"><a name="ToSeq&lt;A>"></a>ToSeq&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToSeq_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt; <span class="ident">ToSeq</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">Seq</span>&lt;<span class="ident">A</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToSeq_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        self.Match(
            Some: v =&gt; v.Cons(Empty),
            None: () =&gt; Empty,
            Fail: x =&gt; Empty)</div></div></div><div class="member-title"><a name="ToTry&lt;A>"></a>ToTry&lt;A&gt;(TryOptionAsync&lt;A&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-ToTry_A_TryOptionAsync_A_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">ToTry</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-ToTry_A_TryOptionAsync_A_self_"><div class="section_title">SOURCE</div><div class="code">
        async () =&gt; (await self.Try()).ToResult()</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        TriMap(self,
            Some: v  =&gt; Some(state, v),
            None: () =&gt; None(state),
            Fail: x  =&gt; Fail(state, x))
           .IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_S_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_S_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        TriMap(self,
            Some: v =&gt; Some(state, v),
            None: () =&gt; None(state),
            Fail: x =&gt; Fail(state, x))
           .IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        TriMap(self,
            Some: v =&gt; Some(state, v),
            None: () =&gt; None(state),
            Fail: x =&gt; Fail(state, x))
           .IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, S&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">S</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_Some__Func_S_S_None__Func_S_Exception_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        TriMap(self,
            Some: v =&gt; Some(state, v),
            None: () =&gt; None(state),
            Fail: x =&gt; Fail(state, x))
           .IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, S&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None__Func_S_Exception_S_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">S</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None__Func_S_Exception_S_Fail_"><div class="section_title">SOURCE</div><div class="code">
        TriMap(self,
            Some: v =&gt; Some(state, v),
            None: () =&gt; None(state),
            Fail: x =&gt; Fail(state, x))
           .IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, S&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None__Func_S_Exception_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">S</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_S_Some__Func_S_Task&lt;S>_None__Func_S_Exception_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        TriMap(self,
            Some: v =&gt; Some(state, v),
            None: () =&gt; None(state),
            Fail: x =&gt; Fail(state, x))
           .IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="TriFold&lt;A, S>"></a>TriFold&lt;A, S&gt;(TryOptionAsync&lt;A&gt;, S, Func&lt;S, A, Task&lt;S&gt;&gt;, Func&lt;S, Task&lt;S&gt;&gt;, Func&lt;S, Exception, Task&lt;S&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None__Func_S_Exception_Task&lt;S>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Folds Try value into an S. https://en.wikipedia.org/wiki/Fold_(higher-order_function) </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >Try to fold</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">state</div><div class="arg-type"><span class="ident">S</span></div></div><div class="arg-desc"><span >Initial state</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Success</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for None</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt;</div></div><div class="arg-desc"><span >Fold function for Failure</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt; <span class="ident">TriFold</span>&lt;<span class="ident">A</span>, <span class="ident">S</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">S</span> state, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">S</span>, <span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">S</span>&gt;</div><div class="normal"><span >Folded state</span></div></div></div><div style="display:none" id="code-TriFold_A_S_TryOptionAsync_A_self__S__state__Func_S_A_Task&lt;S>_Some__Func_S_Task&lt;S>_None__Func_S_Exception_Task&lt;S>_Fail_"><div class="section_title">SOURCE</div><div class="code">
        TriMap(self,
            Some: v =&gt; Some(state, v),
            None: () =&gt; None(state),
            Fail: x =&gt; Fail(state, x))
           .IfNoneOrFail(state)</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_TryOptionAsync_A_self__Func_A_B_Some__Func_B_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_TryOptionAsync_A_self__Func_A_B_Some__Func_B_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;B&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : None();
    })</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;B&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_Some__Func_B_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_Some__Func_B_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;B&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? await Some(res.Value.Value)
                : None();
    })</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_TryOptionAsync_A_self__Func_A_B_Some__Func_Task&lt;B>_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_TryOptionAsync_A_self__Func_A_B_Some__Func_Task&lt;B>_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;B&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : await None();
    })</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;B&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_TryOptionAsync_A_self__Func_A_B_Some__Func_B_None__Func_Exception_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">B</span>&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_TryOptionAsync_A_self__Func_A_B_Some__Func_B_None__Func_Exception_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;B&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaulted
            ? await Fail(res.Exception)
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : None();
    })</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, B&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None__Func_Exception_B_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">B</span>&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None__Func_Exception_B_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;B&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaulted
            ? Fail(res.Exception)
            : res.Value.IsSome
                ? await Some(res.Value.Value)
                : await None();
    })</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, B&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_TryOptionAsync_A_self__Func_A_B_Some__Func_Task&lt;B>_None__Func_Exception_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_TryOptionAsync_A_self__Func_A_B_Some__Func_Task&lt;B>_None__Func_Exception_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;B&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaulted
            ? await Fail(res.Exception)
            : res.Value.IsSome
                ? Some(res.Value.Value)
                : await None();
    })</div></div></div><div class="member-title"><a name="TriMap&lt;A, B>"></a>TriMap&lt;A, B&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;B&gt;&gt;, Func&lt;Task&lt;B&gt;&gt;, Func&lt;Exception, Task&lt;B&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-TriMap_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None__Func_Exception_Task&lt;B>_Fail_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">SUMMARY</div><p ><span >Maps the bound value </span></p><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div><div class="arg-desc"><span >computation</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Some</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the bound value</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">None</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the None to the desired bound result type</span></div></div><div class="arg"><div class="arg-header"><div class="arg-name">Fail</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt;</div></div><div class="arg-desc"><span >Delegate to map the exception to the desired bound result type</span></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt; <span class="ident">TriMap</span>&lt;<span class="ident">A</span>, <span class="ident">B</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Some, <span class="ident">Func</span>&lt;<span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; None, <span class="ident">Func</span>&lt;<span class="ident">Exception</span>, <span class="ident">Task</span>&lt;<span class="ident">B</span>&gt;&gt; Fail)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">B</span>&gt;</div><div class="normal"><span >Mapped computation</span></div></div></div><div style="display:none" id="code-TriMap_A_B_TryOptionAsync_A_self__Func_A_Task&lt;B>_Some__Func_Task&lt;B>_None__Func_Exception_Task&lt;B>_Fail_"><div class="section_title">SOURCE</div><div class="code"> Memo&lt;B&gt;(async () =&gt;
    {
        var res = await self.Try();
        return res.IsFaulted
            ? await Fail(res.Exception)
            : res.Value.IsSome
                ? await Some(res.Value.Value)
                : await None();
    })</div></div></div><div class="member-title"><a name="Try&lt;T>"></a>Try&lt;T&gt;(TryOptionAsync&lt;T&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Try_T_TryOptionAsync_T_self_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="ident">Task</span>&lt;<span class="ident">OptionalResult</span>&lt;<span class="ident">T</span>&gt;&gt; <span class="ident">Try</span>&lt;<span class="ident">T</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">Task</span>&lt;<span class="ident">OptionalResult</span>&lt;<span class="ident">T</span>&gt;&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Try_T_TryOptionAsync_T_self_"><div class="section_title">SOURCE</div><div class="code">
        try
        {
            if (self == null)
            {
                throw new ArgumentNullException(&quot;this&quot;);
            }
            try
            {
                return await self();
            }
            catch(Exception e)
            {
                TryConfig.ErrorLogger(e);
                return new OptionalResult&lt;T&gt;(e);
            }
        }
        catch (Exception e)
        {
            TryConfig.ErrorLogger(e);
            return new OptionalResult&lt;T&gt;(e);
        }
    </div></div></div><div class="member-title"><a name="Use&lt;T, U>"></a>Use&lt;T, U&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, U&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Use_T_U_TryOptionAsync_T_self__Func_T_U_select_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">select</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">U</span>&gt; <span class="ident">Use</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt; select)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="ident">IDisposable</span></div></div><div style="display:none" id="code-Use_T_U_TryOptionAsync_T_self__Func_T_U_select_"><div class="section_title">SOURCE</div><div class="code"> async () =&gt;
            {
                var t = default(T);
                try
                {
                    var res = await self.Try();
                    if (res.IsFaultedOrNone) return default(U);
                    t = res.Value.Value;
                    return select(t);
                }
                finally
                {
                    t?.Dispose();
                }
            }</div></div></div><div class="member-title"><a name="Use&lt;T, U>"></a>Use&lt;T, U&gt;(TryOptionAsync&lt;T&gt;, Func&lt;T, TryOptionAsync&lt;U&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Use_T_U_TryOptionAsync_T_self__Func_T_TryOptionAsync&lt;U>_select_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">select</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">U</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">U</span>&gt; <span class="ident">Use</span>&lt;<span class="ident">T</span>, <span class="ident">U</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">T</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">T</span>, <span class="ident">TryOptionAsync</span>&lt;<span class="ident">U</span>&gt;&gt; select)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">U</span>&gt;</div><div class="normal"></div></div><div class="section_title">CONSTRAINTS</div><div class="code"><span class="keyword">where</span> <span class="ident">T</span> : <span class="ident">IDisposable</span></div></div><div style="display:none" id="code-Use_T_U_TryOptionAsync_T_self__Func_T_TryOptionAsync&lt;U>_select_"><div class="section_title">SOURCE</div><div class="code"> async () =&gt;
        {
            var t = default(T);
            try
            {
                var res = await self.Try();
                if (res.IsFaultedOrNone) return new OptionalResult&lt;U&gt;(res.Exception);
                t = res.Value.Value;
                return await select(t).Try();
            }
            finally
            {
                t?.Dispose();
            }
        }</div></div></div><div class="member-title"><a name="Where&lt;A>"></a>Where&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, bool&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_A_TryOptionAsync_A_self__Func_A_bool_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Where</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="keyword">bool</span>&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Where_A_TryOptionAsync_A_self__Func_A_bool_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.Filter(pred)</div></div></div><div class="member-title"><a name="Where&lt;A>"></a>Where&lt;A&gt;(TryOptionAsync&lt;A&gt;, Func&lt;A, Task&lt;bool&gt;&gt;)<div class="source-link-cont"><a class="source-link" href="#" onclick="document.getElementById(&#39;code-Where_A_TryOptionAsync_A_self__Func_A_Task&lt;bool>_pred_&#39;).style.display=&#39;&#39;;">SOURCE</a></div></div><div class="section"><div class="left"><div class="section_title">PARAMETERS</div><div class="arg"><div class="arg-header"><div class="arg-name">self</div><div class="arg-type"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div></div></div><div class="arg"><div class="arg-header"><div class="arg-name">pred</div><div class="arg-type"><span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt;</div></div></div></div><div class="right"><div class="section_title">DECLARATION</div><div class="code"><div class="attr">[Pure]</div><span class="keyword">public</span> <span class="keyword">static</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; <span class="ident">Where</span>&lt;<span class="ident">A</span>&gt;(<span class="keyword">this</span> <span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt; self, <span class="ident">Func</span>&lt;<span class="ident">A</span>, <span class="ident">Task</span>&lt;<span class="keyword">bool</span>&gt;&gt; pred)</div><div class="section_title">RETURNS</div><div class="code"><div class="member-title"><span class="ident">TryOptionAsync</span>&lt;<span class="ident">A</span>&gt;</div><div class="normal"></div></div></div><div style="display:none" id="code-Where_A_TryOptionAsync_A_self__Func_A_Task&lt;bool>_pred_"><div class="section_title">SOURCE</div><div class="code">
        self.Filter(pred)</div></div></div></div></body></html>